
qube_core.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004580  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08004758  08004758  00014758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047a4  080047a4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080047a4  080047a4  000147a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080047ac  080047ac  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047ac  080047ac  000147ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047b0  080047b0  000147b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080047b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000194  2000000c  080047c0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a0  080047c0  000201a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001288b  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000213b  00000000  00000000  000328c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001258  00000000  00000000  00034a08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001150  00000000  00000000  00035c60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001df5b  00000000  00000000  00036db0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f01f  00000000  00000000  00054d0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c491c  00000000  00000000  00063d2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00128646  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ef8  00000000  00000000  001286c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004740 	.word	0x08004740

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08004740 	.word	0x08004740

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b972 	b.w	8000514 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	4688      	mov	r8, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14b      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000256:	428a      	cmp	r2, r1
 8000258:	4615      	mov	r5, r2
 800025a:	d967      	bls.n	800032c <__udivmoddi4+0xe4>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0720 	rsb	r7, r2, #32
 8000266:	fa01 f302 	lsl.w	r3, r1, r2
 800026a:	fa20 f707 	lsr.w	r7, r0, r7
 800026e:	4095      	lsls	r5, r2
 8000270:	ea47 0803 	orr.w	r8, r7, r3
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000280:	fa1f fc85 	uxth.w	ip, r5
 8000284:	fb0e 8817 	mls	r8, lr, r7, r8
 8000288:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028c:	fb07 f10c 	mul.w	r1, r7, ip
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18eb      	adds	r3, r5, r3
 8000296:	f107 30ff 	add.w	r0, r7, #4294967295
 800029a:	f080 811b 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8118 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002a4:	3f02      	subs	r7, #2
 80002a6:	442b      	add	r3, r5
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002bc:	45a4      	cmp	ip, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	192c      	adds	r4, r5, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002ca:	45a4      	cmp	ip, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002d0:	3802      	subs	r0, #2
 80002d2:	442c      	add	r4, r5
 80002d4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d8:	eba4 040c 	sub.w	r4, r4, ip
 80002dc:	2700      	movs	r7, #0
 80002de:	b11e      	cbz	r6, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c6 4300 	strd	r4, r3, [r6]
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xbe>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80eb 	beq.w	80004ce <__udivmoddi4+0x286>
 80002f8:	2700      	movs	r7, #0
 80002fa:	e9c6 0100 	strd	r0, r1, [r6]
 80002fe:	4638      	mov	r0, r7
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f783 	clz	r7, r3
 800030a:	2f00      	cmp	r7, #0
 800030c:	d147      	bne.n	800039e <__udivmoddi4+0x156>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd0>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80fa 	bhi.w	800050c <__udivmoddi4+0x2c4>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4698      	mov	r8, r3
 8000322:	2e00      	cmp	r6, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000326:	e9c6 4800 	strd	r4, r8, [r6]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa0>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xe8>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 808f 	bne.w	8000458 <__udivmoddi4+0x210>
 800033a:	1b49      	subs	r1, r1, r5
 800033c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000340:	fa1f f885 	uxth.w	r8, r5
 8000344:	2701      	movs	r7, #1
 8000346:	fbb1 fcfe 	udiv	ip, r1, lr
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb08 f10c 	mul.w	r1, r8, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x124>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4299      	cmp	r1, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 800036a:	4684      	mov	ip, r0
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb1 f0fe 	udiv	r0, r1, lr
 8000374:	fb0e 1410 	mls	r4, lr, r0, r1
 8000378:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800037c:	fb08 f800 	mul.w	r8, r8, r0
 8000380:	45a0      	cmp	r8, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x14c>
 8000384:	192c      	adds	r4, r5, r4
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x14a>
 800038c:	45a0      	cmp	r8, r4
 800038e:	f200 80b6 	bhi.w	80004fe <__udivmoddi4+0x2b6>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 0408 	sub.w	r4, r4, r8
 8000398:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800039c:	e79f      	b.n	80002de <__udivmoddi4+0x96>
 800039e:	f1c7 0c20 	rsb	ip, r7, #32
 80003a2:	40bb      	lsls	r3, r7
 80003a4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003ac:	fa01 f407 	lsl.w	r4, r1, r7
 80003b0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003bc:	4325      	orrs	r5, r4
 80003be:	fbb3 f9f8 	udiv	r9, r3, r8
 80003c2:	0c2c      	lsrs	r4, r5, #16
 80003c4:	fb08 3319 	mls	r3, r8, r9, r3
 80003c8:	fa1f fa8e 	uxth.w	sl, lr
 80003cc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d0:	fb09 f40a 	mul.w	r4, r9, sl
 80003d4:	429c      	cmp	r4, r3
 80003d6:	fa02 f207 	lsl.w	r2, r2, r7
 80003da:	fa00 f107 	lsl.w	r1, r0, r7
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1e 0303 	adds.w	r3, lr, r3
 80003e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e8:	f080 8087 	bcs.w	80004fa <__udivmoddi4+0x2b2>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f240 8084 	bls.w	80004fa <__udivmoddi4+0x2b2>
 80003f2:	f1a9 0902 	sub.w	r9, r9, #2
 80003f6:	4473      	add	r3, lr
 80003f8:	1b1b      	subs	r3, r3, r4
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000400:	fb08 3310 	mls	r3, r8, r0, r3
 8000404:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000408:	fb00 fa0a 	mul.w	sl, r0, sl
 800040c:	45a2      	cmp	sl, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1e 0404 	adds.w	r4, lr, r4
 8000414:	f100 33ff 	add.w	r3, r0, #4294967295
 8000418:	d26b      	bcs.n	80004f2 <__udivmoddi4+0x2aa>
 800041a:	45a2      	cmp	sl, r4
 800041c:	d969      	bls.n	80004f2 <__udivmoddi4+0x2aa>
 800041e:	3802      	subs	r0, #2
 8000420:	4474      	add	r4, lr
 8000422:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000426:	fba0 8902 	umull	r8, r9, r0, r2
 800042a:	eba4 040a 	sub.w	r4, r4, sl
 800042e:	454c      	cmp	r4, r9
 8000430:	46c2      	mov	sl, r8
 8000432:	464b      	mov	r3, r9
 8000434:	d354      	bcc.n	80004e0 <__udivmoddi4+0x298>
 8000436:	d051      	beq.n	80004dc <__udivmoddi4+0x294>
 8000438:	2e00      	cmp	r6, #0
 800043a:	d069      	beq.n	8000510 <__udivmoddi4+0x2c8>
 800043c:	ebb1 050a 	subs.w	r5, r1, sl
 8000440:	eb64 0403 	sbc.w	r4, r4, r3
 8000444:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000448:	40fd      	lsrs	r5, r7
 800044a:	40fc      	lsrs	r4, r7
 800044c:	ea4c 0505 	orr.w	r5, ip, r5
 8000450:	e9c6 5400 	strd	r5, r4, [r6]
 8000454:	2700      	movs	r7, #0
 8000456:	e747      	b.n	80002e8 <__udivmoddi4+0xa0>
 8000458:	f1c2 0320 	rsb	r3, r2, #32
 800045c:	fa20 f703 	lsr.w	r7, r0, r3
 8000460:	4095      	lsls	r5, r2
 8000462:	fa01 f002 	lsl.w	r0, r1, r2
 8000466:	fa21 f303 	lsr.w	r3, r1, r3
 800046a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046e:	4338      	orrs	r0, r7
 8000470:	0c01      	lsrs	r1, r0, #16
 8000472:	fbb3 f7fe 	udiv	r7, r3, lr
 8000476:	fa1f f885 	uxth.w	r8, r5
 800047a:	fb0e 3317 	mls	r3, lr, r7, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb07 f308 	mul.w	r3, r7, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x256>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f107 3cff 	add.w	ip, r7, #4294967295
 8000494:	d22f      	bcs.n	80004f6 <__udivmoddi4+0x2ae>
 8000496:	428b      	cmp	r3, r1
 8000498:	d92d      	bls.n	80004f6 <__udivmoddi4+0x2ae>
 800049a:	3f02      	subs	r7, #2
 800049c:	4429      	add	r1, r5
 800049e:	1acb      	subs	r3, r1, r3
 80004a0:	b281      	uxth	r1, r0
 80004a2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ae:	fb00 f308 	mul.w	r3, r0, r8
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x27e>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004bc:	d217      	bcs.n	80004ee <__udivmoddi4+0x2a6>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d915      	bls.n	80004ee <__udivmoddi4+0x2a6>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xfe>
 80004ce:	4637      	mov	r7, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e709      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d4:	4607      	mov	r7, r0
 80004d6:	e6e7      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d8:	4618      	mov	r0, r3
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004dc:	4541      	cmp	r1, r8
 80004de:	d2ab      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e4:	eb69 020e 	sbc.w	r2, r9, lr
 80004e8:	3801      	subs	r0, #1
 80004ea:	4613      	mov	r3, r2
 80004ec:	e7a4      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004ee:	4660      	mov	r0, ip
 80004f0:	e7e9      	b.n	80004c6 <__udivmoddi4+0x27e>
 80004f2:	4618      	mov	r0, r3
 80004f4:	e795      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f6:	4667      	mov	r7, ip
 80004f8:	e7d1      	b.n	800049e <__udivmoddi4+0x256>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e77c      	b.n	80003f8 <__udivmoddi4+0x1b0>
 80004fe:	3802      	subs	r0, #2
 8000500:	442c      	add	r4, r5
 8000502:	e747      	b.n	8000394 <__udivmoddi4+0x14c>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	442b      	add	r3, r5
 800050a:	e72f      	b.n	800036c <__udivmoddi4+0x124>
 800050c:	4638      	mov	r0, r7
 800050e:	e708      	b.n	8000322 <__udivmoddi4+0xda>
 8000510:	4637      	mov	r7, r6
 8000512:	e6e9      	b.n	80002e8 <__udivmoddi4+0xa0>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <main>:

volatile uint8_t timer_IT = 0;


int main(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b08e      	sub	sp, #56	; 0x38
 800051c:	af00      	add	r7, sp, #0

  uint8_t i             = 0;
 800051e:	2300      	movs	r3, #0
 8000520:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint8_t PB_array[6]   = {0};
 8000524:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000528:	2200      	movs	r2, #0
 800052a:	601a      	str	r2, [r3, #0]
 800052c:	809a      	strh	r2, [r3, #4]
  uint8_t PB_array_z[6] = {0};
 800052e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000532:	2200      	movs	r2, #0
 8000534:	601a      	str	r2, [r3, #0]
 8000536:	809a      	strh	r2, [r3, #4]

  RGB_LED LED_array[9] =
 8000538:	f107 030c 	add.w	r3, r7, #12
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	605a      	str	r2, [r3, #4]
 8000542:	609a      	str	r2, [r3, #8]
 8000544:	60da      	str	r2, [r3, #12]
 8000546:	611a      	str	r2, [r3, #16]
 8000548:	615a      	str	r2, [r3, #20]
 800054a:	f8c3 2017 	str.w	r2, [r3, #23]


  // 0    = green
  // 64   = red
  // 128  = blue
  uint8_t LED_phase[9] = {0,0,0,64,64,64,128,128,128};
 800054e:	4ab4      	ldr	r2, [pc, #720]	; (8000820 <main+0x308>)
 8000550:	463b      	mov	r3, r7
 8000552:	ca07      	ldmia	r2, {r0, r1, r2}
 8000554:	c303      	stmia	r3!, {r0, r1}
 8000556:	701a      	strb	r2, [r3, #0]

  // -----------------
  // MCU configuration
  // -----------------
  // Reset of all peripherals, Initializes the Flash interface and the Systick.
  HAL_Init();
 8000558:	f000 ff59 	bl	800140e <HAL_Init>

  // Configure the system clock
  SystemClock_Config();
 800055c:	f000 f968 	bl	8000830 <SystemClock_Config>

  // Initialize all configured peripherals
  MX_GPIO_Init();
 8000560:	f000 fafe 	bl	8000b60 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000564:	f000 f9cc 	bl	8000900 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000568:	f000 fa0a 	bl	8000980 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 800056c:	f000 faac 	bl	8000ac8 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000570:	f000 fa46 	bl	8000a00 <MX_TIM2_Init>

  // Start the timer
  HAL_TIM_Base_Start_IT(&htim2);
 8000574:	48ab      	ldr	r0, [pc, #684]	; (8000824 <main+0x30c>)
 8000576:	f002 fe5f 	bl	8003238 <HAL_TIM_Base_Start_IT>

  // Initialise the LED panel
  HAL_Delay(1);
 800057a:	2001      	movs	r0, #1
 800057c:	f000 ffb8 	bl	80014f0 <HAL_Delay>
  LEDs_init();
 8000580:	f000 fb70 	bl	8000c64 <LEDs_init>
  // Main loop
  // --------------------------------------------------------------------------
  while (1)
  {

    if (timer_IT)
 8000584:	4ba8      	ldr	r3, [pc, #672]	; (8000828 <main+0x310>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	b2db      	uxtb	r3, r3
 800058a:	2b00      	cmp	r3, #0
 800058c:	d0fa      	beq.n	8000584 <main+0x6c>
    {
      timer_IT = 0;
 800058e:	4ba6      	ldr	r3, [pc, #664]	; (8000828 <main+0x310>)
 8000590:	2200      	movs	r2, #0
 8000592:	701a      	strb	r2, [r3, #0]

      // Sample the push button array
      PB_array[0] = 0;
 8000594:	2300      	movs	r3, #0
 8000596:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
      PB_array[0] |= (HAL_GPIO_ReadPin(PB_left_GPIO_Port, PB_left_Pin) == 0 ? 0x01 : 0x00);
 800059a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800059e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005a2:	f001 fa59 	bl	8001a58 <HAL_GPIO_ReadPin>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	bf0c      	ite	eq
 80005ac:	2301      	moveq	r3, #1
 80005ae:	2300      	movne	r3, #0
 80005b0:	b2db      	uxtb	r3, r3
 80005b2:	4619      	mov	r1, r3
 80005b4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80005b8:	b25a      	sxtb	r2, r3
 80005ba:	b24b      	sxtb	r3, r1
 80005bc:	4313      	orrs	r3, r2
 80005be:	b25b      	sxtb	r3, r3
 80005c0:	b2db      	uxtb	r3, r3
 80005c2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
      PB_array[0] |= (HAL_GPIO_ReadPin(PB_right_GPIO_Port, PB_right_Pin) == 0 ? 0x02 : 0x00);
 80005c6:	2120      	movs	r1, #32
 80005c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005cc:	f001 fa44 	bl	8001a58 <HAL_GPIO_ReadPin>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d101      	bne.n	80005da <main+0xc2>
 80005d6:	2302      	movs	r3, #2
 80005d8:	e000      	b.n	80005dc <main+0xc4>
 80005da:	2300      	movs	r3, #0
 80005dc:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80005e0:	b252      	sxtb	r2, r2
 80005e2:	b25b      	sxtb	r3, r3
 80005e4:	4313      	orrs	r3, r2
 80005e6:	b25b      	sxtb	r3, r3
 80005e8:	b2db      	uxtb	r3, r3
 80005ea:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
      PB_array[0] |= (HAL_GPIO_ReadPin(PB_up_GPIO_Port, PB_up_Pin) == 0 ? 0x04 : 0x00);
 80005ee:	2110      	movs	r1, #16
 80005f0:	488e      	ldr	r0, [pc, #568]	; (800082c <main+0x314>)
 80005f2:	f001 fa31 	bl	8001a58 <HAL_GPIO_ReadPin>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d101      	bne.n	8000600 <main+0xe8>
 80005fc:	2304      	movs	r3, #4
 80005fe:	e000      	b.n	8000602 <main+0xea>
 8000600:	2300      	movs	r3, #0
 8000602:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8000606:	b252      	sxtb	r2, r2
 8000608:	b25b      	sxtb	r3, r3
 800060a:	4313      	orrs	r3, r2
 800060c:	b25b      	sxtb	r3, r3
 800060e:	b2db      	uxtb	r3, r3
 8000610:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
      PB_array[0] |= (HAL_GPIO_ReadPin(PB_down_GPIO_Port, PB_down_Pin) == 0 ? 0x08 : 0x00);
 8000614:	2180      	movs	r1, #128	; 0x80
 8000616:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800061a:	f001 fa1d 	bl	8001a58 <HAL_GPIO_ReadPin>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d101      	bne.n	8000628 <main+0x110>
 8000624:	2308      	movs	r3, #8
 8000626:	e000      	b.n	800062a <main+0x112>
 8000628:	2300      	movs	r3, #0
 800062a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800062e:	b252      	sxtb	r2, r2
 8000630:	b25b      	sxtb	r3, r3
 8000632:	4313      	orrs	r3, r2
 8000634:	b25b      	sxtb	r3, r3
 8000636:	b2db      	uxtb	r3, r3
 8000638:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

      // Loop on the LEDs and update their state variable individually
      for (i = 0; i < 9; i++)
 800063c:	2300      	movs	r3, #0
 800063e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000642:	e0ce      	b.n	80007e2 <main+0x2ca>
      {
        if (LED_phase[i] < 64)
 8000644:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000648:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800064c:	4413      	add	r3, r2
 800064e:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 8000652:	2b3f      	cmp	r3, #63	; 0x3f
 8000654:	d832      	bhi.n	80006bc <main+0x1a4>
        {
          LED_array[i].R = LED_phase[i];
 8000656:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800065a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800065e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000662:	440b      	add	r3, r1
 8000664:	f813 1c38 	ldrb.w	r1, [r3, #-56]
 8000668:	4613      	mov	r3, r2
 800066a:	005b      	lsls	r3, r3, #1
 800066c:	4413      	add	r3, r2
 800066e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000672:	4413      	add	r3, r2
 8000674:	3b2c      	subs	r3, #44	; 0x2c
 8000676:	460a      	mov	r2, r1
 8000678:	701a      	strb	r2, [r3, #0]
          LED_array[i].G = 63-LED_phase[i];
 800067a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800067e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000682:	4413      	add	r3, r2
 8000684:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 8000688:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800068c:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8000690:	b2d9      	uxtb	r1, r3
 8000692:	4613      	mov	r3, r2
 8000694:	005b      	lsls	r3, r3, #1
 8000696:	4413      	add	r3, r2
 8000698:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800069c:	4413      	add	r3, r2
 800069e:	3b2b      	subs	r3, #43	; 0x2b
 80006a0:	460a      	mov	r2, r1
 80006a2:	701a      	strb	r2, [r3, #0]
          LED_array[i].B = 0;
 80006a4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80006a8:	4613      	mov	r3, r2
 80006aa:	005b      	lsls	r3, r3, #1
 80006ac:	4413      	add	r3, r2
 80006ae:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80006b2:	4413      	add	r3, r2
 80006b4:	3b2a      	subs	r3, #42	; 0x2a
 80006b6:	2200      	movs	r2, #0
 80006b8:	701a      	strb	r2, [r3, #0]
 80006ba:	e07c      	b.n	80007b6 <main+0x29e>
        }
        else if ((LED_phase[i] >= 64) && (LED_phase[i] < 128))
 80006bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80006c0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80006c4:	4413      	add	r3, r2
 80006c6:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 80006ca:	2b3f      	cmp	r3, #63	; 0x3f
 80006cc:	d93e      	bls.n	800074c <main+0x234>
 80006ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80006d2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80006d6:	4413      	add	r3, r2
 80006d8:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 80006dc:	b25b      	sxtb	r3, r3
 80006de:	2b00      	cmp	r3, #0
 80006e0:	db34      	blt.n	800074c <main+0x234>
        {
          LED_array[i].R = 63-(LED_phase[i]-64);
 80006e2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80006e6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80006ea:	4413      	add	r3, r2
 80006ec:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 80006f0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80006f4:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 80006f8:	b2d9      	uxtb	r1, r3
 80006fa:	4613      	mov	r3, r2
 80006fc:	005b      	lsls	r3, r3, #1
 80006fe:	4413      	add	r3, r2
 8000700:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000704:	4413      	add	r3, r2
 8000706:	3b2c      	subs	r3, #44	; 0x2c
 8000708:	460a      	mov	r2, r1
 800070a:	701a      	strb	r2, [r3, #0]
          LED_array[i].G = 0;
 800070c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000710:	4613      	mov	r3, r2
 8000712:	005b      	lsls	r3, r3, #1
 8000714:	4413      	add	r3, r2
 8000716:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800071a:	4413      	add	r3, r2
 800071c:	3b2b      	subs	r3, #43	; 0x2b
 800071e:	2200      	movs	r2, #0
 8000720:	701a      	strb	r2, [r3, #0]
          LED_array[i].B = (LED_phase[i]-64);
 8000722:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000726:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800072a:	4413      	add	r3, r2
 800072c:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 8000730:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000734:	3b40      	subs	r3, #64	; 0x40
 8000736:	b2d9      	uxtb	r1, r3
 8000738:	4613      	mov	r3, r2
 800073a:	005b      	lsls	r3, r3, #1
 800073c:	4413      	add	r3, r2
 800073e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000742:	4413      	add	r3, r2
 8000744:	3b2a      	subs	r3, #42	; 0x2a
 8000746:	460a      	mov	r2, r1
 8000748:	701a      	strb	r2, [r3, #0]
 800074a:	e034      	b.n	80007b6 <main+0x29e>
        }
        else
        {
          LED_array[i].R = 0;
 800074c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000750:	4613      	mov	r3, r2
 8000752:	005b      	lsls	r3, r3, #1
 8000754:	4413      	add	r3, r2
 8000756:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800075a:	4413      	add	r3, r2
 800075c:	3b2c      	subs	r3, #44	; 0x2c
 800075e:	2200      	movs	r2, #0
 8000760:	701a      	strb	r2, [r3, #0]
          LED_array[i].G = (LED_phase[i]-128);
 8000762:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000766:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800076a:	4413      	add	r3, r2
 800076c:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 8000770:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000774:	3b80      	subs	r3, #128	; 0x80
 8000776:	b2d9      	uxtb	r1, r3
 8000778:	4613      	mov	r3, r2
 800077a:	005b      	lsls	r3, r3, #1
 800077c:	4413      	add	r3, r2
 800077e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000782:	4413      	add	r3, r2
 8000784:	3b2b      	subs	r3, #43	; 0x2b
 8000786:	460a      	mov	r2, r1
 8000788:	701a      	strb	r2, [r3, #0]
          LED_array[i].B = 63-(LED_phase[i]-128);
 800078a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800078e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000792:	4413      	add	r3, r2
 8000794:	f813 1c38 	ldrb.w	r1, [r3, #-56]
 8000798:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800079c:	f06f 0340 	mvn.w	r3, #64	; 0x40
 80007a0:	1a5b      	subs	r3, r3, r1
 80007a2:	b2d9      	uxtb	r1, r3
 80007a4:	4613      	mov	r3, r2
 80007a6:	005b      	lsls	r3, r3, #1
 80007a8:	4413      	add	r3, r2
 80007aa:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80007ae:	4413      	add	r3, r2
 80007b0:	3b2a      	subs	r3, #42	; 0x2a
 80007b2:	460a      	mov	r2, r1
 80007b4:	701a      	strb	r2, [r3, #0]
        }

        // Detect overflow on the counter
        if ((LED_phase[i] == 191))
 80007b6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80007ba:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80007be:	4413      	add	r3, r2
 80007c0:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 80007c4:	2bbf      	cmp	r3, #191	; 0xbf
 80007c6:	d107      	bne.n	80007d8 <main+0x2c0>
        {
          LED_phase[i] = 0;
 80007c8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80007cc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80007d0:	4413      	add	r3, r2
 80007d2:	2200      	movs	r2, #0
 80007d4:	f803 2c38 	strb.w	r2, [r3, #-56]
      for (i = 0; i < 9; i++)
 80007d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80007dc:	3301      	adds	r3, #1
 80007de:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80007e2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80007e6:	2b08      	cmp	r3, #8
 80007e8:	f67f af2c 	bls.w	8000644 <main+0x12c>
          //LED_phase[i]++;
        }
      }

      // "Move" the LEDs according to the button pressed
      rubiks_move(LED_phase, PB_array[0] & (~PB_array_z[0]));
 80007ec:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80007f0:	b25a      	sxtb	r2, r3
 80007f2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80007f6:	b25b      	sxtb	r3, r3
 80007f8:	43db      	mvns	r3, r3
 80007fa:	b25b      	sxtb	r3, r3
 80007fc:	4013      	ands	r3, r2
 80007fe:	b25b      	sxtb	r3, r3
 8000800:	b2da      	uxtb	r2, r3
 8000802:	463b      	mov	r3, r7
 8000804:	4611      	mov	r1, r2
 8000806:	4618      	mov	r0, r3
 8000808:	f000 fbb8 	bl	8000f7c <rubiks_move>
      
      // Update the button state
      PB_array_z[0] = PB_array[0];
 800080c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000810:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

      // Show that!
      LEDs_update(LED_array);
 8000814:	f107 030c 	add.w	r3, r7, #12
 8000818:	4618      	mov	r0, r3
 800081a:	f000 fb0d 	bl	8000e38 <LEDs_update>
    if (timer_IT)
 800081e:	e6b1      	b.n	8000584 <main+0x6c>
 8000820:	08004758 	.word	0x08004758
 8000824:	20000150 	.word	0x20000150
 8000828:	20000028 	.word	0x20000028
 800082c:	48000400 	.word	0x48000400

08000830 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b0a4      	sub	sp, #144	; 0x90
 8000834:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000836:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800083a:	2238      	movs	r2, #56	; 0x38
 800083c:	2100      	movs	r1, #0
 800083e:	4618      	mov	r0, r3
 8000840:	f003 ff76 	bl	8004730 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000844:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	605a      	str	r2, [r3, #4]
 800084e:	609a      	str	r2, [r3, #8]
 8000850:	60da      	str	r2, [r3, #12]
 8000852:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000854:	463b      	mov	r3, r7
 8000856:	2244      	movs	r2, #68	; 0x44
 8000858:	2100      	movs	r1, #0
 800085a:	4618      	mov	r0, r3
 800085c:	f003 ff68 	bl	8004730 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000860:	2000      	movs	r0, #0
 8000862:	f001 fcb9 	bl	80021d8 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000866:	2302      	movs	r3, #2
 8000868:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800086a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800086e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000870:	2340      	movs	r3, #64	; 0x40
 8000872:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000874:	2302      	movs	r3, #2
 8000876:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000878:	2302      	movs	r3, #2
 800087a:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800087c:	2301      	movs	r3, #1
 800087e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000880:	2314      	movs	r3, #20
 8000882:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000886:	2302      	movs	r3, #2
 8000888:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800088c:	2302      	movs	r3, #2
 800088e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000892:	2302      	movs	r3, #2
 8000894:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000898:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800089c:	4618      	mov	r0, r3
 800089e:	f001 fd4f 	bl	8002340 <HAL_RCC_OscConfig>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80008a8:	f000 fbcf 	bl	800104a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ac:	230f      	movs	r3, #15
 80008ae:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008b0:	2303      	movs	r3, #3
 80008b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008b4:	2300      	movs	r3, #0
 80008b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008b8:	2300      	movs	r3, #0
 80008ba:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008bc:	2300      	movs	r3, #0
 80008be:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008c0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80008c4:	2104      	movs	r1, #4
 80008c6:	4618      	mov	r0, r3
 80008c8:	f002 f852 	bl	8002970 <HAL_RCC_ClockConfig>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80008d2:	f000 fbba 	bl	800104a <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 80008d6:	23c1      	movs	r3, #193	; 0xc1
 80008d8:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C2;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80008da:	2300      	movs	r3, #0
 80008dc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80008de:	2300      	movs	r3, #0
 80008e0:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80008e2:	2300      	movs	r3, #0
 80008e4:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008e6:	463b      	mov	r3, r7
 80008e8:	4618      	mov	r0, r3
 80008ea:	f002 fa5d 	bl	8002da8 <HAL_RCCEx_PeriphCLKConfig>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80008f4:	f000 fba9 	bl	800104a <Error_Handler>
  }
}
 80008f8:	bf00      	nop
 80008fa:	3790      	adds	r7, #144	; 0x90
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}

08000900 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000904:	4b1b      	ldr	r3, [pc, #108]	; (8000974 <MX_I2C1_Init+0x74>)
 8000906:	4a1c      	ldr	r2, [pc, #112]	; (8000978 <MX_I2C1_Init+0x78>)
 8000908:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00F07BFF;
 800090a:	4b1a      	ldr	r3, [pc, #104]	; (8000974 <MX_I2C1_Init+0x74>)
 800090c:	4a1b      	ldr	r2, [pc, #108]	; (800097c <MX_I2C1_Init+0x7c>)
 800090e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000910:	4b18      	ldr	r3, [pc, #96]	; (8000974 <MX_I2C1_Init+0x74>)
 8000912:	2200      	movs	r2, #0
 8000914:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000916:	4b17      	ldr	r3, [pc, #92]	; (8000974 <MX_I2C1_Init+0x74>)
 8000918:	2201      	movs	r2, #1
 800091a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800091c:	4b15      	ldr	r3, [pc, #84]	; (8000974 <MX_I2C1_Init+0x74>)
 800091e:	2200      	movs	r2, #0
 8000920:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000922:	4b14      	ldr	r3, [pc, #80]	; (8000974 <MX_I2C1_Init+0x74>)
 8000924:	2200      	movs	r2, #0
 8000926:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000928:	4b12      	ldr	r3, [pc, #72]	; (8000974 <MX_I2C1_Init+0x74>)
 800092a:	2200      	movs	r2, #0
 800092c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800092e:	4b11      	ldr	r3, [pc, #68]	; (8000974 <MX_I2C1_Init+0x74>)
 8000930:	2200      	movs	r2, #0
 8000932:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000934:	4b0f      	ldr	r3, [pc, #60]	; (8000974 <MX_I2C1_Init+0x74>)
 8000936:	2200      	movs	r2, #0
 8000938:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800093a:	480e      	ldr	r0, [pc, #56]	; (8000974 <MX_I2C1_Init+0x74>)
 800093c:	f001 f8bc 	bl	8001ab8 <HAL_I2C_Init>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000946:	f000 fb80 	bl	800104a <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800094a:	2100      	movs	r1, #0
 800094c:	4809      	ldr	r0, [pc, #36]	; (8000974 <MX_I2C1_Init+0x74>)
 800094e:	f001 fbab 	bl	80020a8 <HAL_I2CEx_ConfigAnalogFilter>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000958:	f000 fb77 	bl	800104a <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800095c:	2100      	movs	r1, #0
 800095e:	4805      	ldr	r0, [pc, #20]	; (8000974 <MX_I2C1_Init+0x74>)
 8000960:	f001 fbed 	bl	800213e <HAL_I2CEx_ConfigDigitalFilter>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800096a:	f000 fb6e 	bl	800104a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	2000002c 	.word	0x2000002c
 8000978:	40005400 	.word	0x40005400
 800097c:	00f07bff 	.word	0x00f07bff

08000980 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000984:	4b1b      	ldr	r3, [pc, #108]	; (80009f4 <MX_I2C2_Init+0x74>)
 8000986:	4a1c      	ldr	r2, [pc, #112]	; (80009f8 <MX_I2C2_Init+0x78>)
 8000988:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00F07BFF;
 800098a:	4b1a      	ldr	r3, [pc, #104]	; (80009f4 <MX_I2C2_Init+0x74>)
 800098c:	4a1b      	ldr	r2, [pc, #108]	; (80009fc <MX_I2C2_Init+0x7c>)
 800098e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000990:	4b18      	ldr	r3, [pc, #96]	; (80009f4 <MX_I2C2_Init+0x74>)
 8000992:	2200      	movs	r2, #0
 8000994:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000996:	4b17      	ldr	r3, [pc, #92]	; (80009f4 <MX_I2C2_Init+0x74>)
 8000998:	2201      	movs	r2, #1
 800099a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800099c:	4b15      	ldr	r3, [pc, #84]	; (80009f4 <MX_I2C2_Init+0x74>)
 800099e:	2200      	movs	r2, #0
 80009a0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80009a2:	4b14      	ldr	r3, [pc, #80]	; (80009f4 <MX_I2C2_Init+0x74>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009a8:	4b12      	ldr	r3, [pc, #72]	; (80009f4 <MX_I2C2_Init+0x74>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009ae:	4b11      	ldr	r3, [pc, #68]	; (80009f4 <MX_I2C2_Init+0x74>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009b4:	4b0f      	ldr	r3, [pc, #60]	; (80009f4 <MX_I2C2_Init+0x74>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80009ba:	480e      	ldr	r0, [pc, #56]	; (80009f4 <MX_I2C2_Init+0x74>)
 80009bc:	f001 f87c 	bl	8001ab8 <HAL_I2C_Init>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80009c6:	f000 fb40 	bl	800104a <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009ca:	2100      	movs	r1, #0
 80009cc:	4809      	ldr	r0, [pc, #36]	; (80009f4 <MX_I2C2_Init+0x74>)
 80009ce:	f001 fb6b 	bl	80020a8 <HAL_I2CEx_ConfigAnalogFilter>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80009d8:	f000 fb37 	bl	800104a <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80009dc:	2100      	movs	r1, #0
 80009de:	4805      	ldr	r0, [pc, #20]	; (80009f4 <MX_I2C2_Init+0x74>)
 80009e0:	f001 fbad 	bl	800213e <HAL_I2CEx_ConfigDigitalFilter>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80009ea:	f000 fb2e 	bl	800104a <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	20000078 	.word	0x20000078
 80009f8:	40005800 	.word	0x40005800
 80009fc:	00f07bff 	.word	0x00f07bff

08000a00 <MX_TIM2_Init>:

// ----------------------------------------------------------------------------
// Timer 2 initialisation 
// ----------------------------------------------------------------------------
static void MX_TIM2_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b088      	sub	sp, #32
 8000a04:	af00      	add	r7, sp, #0

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a06:	f107 0310 	add.w	r3, r7, #16
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
 8000a0e:	605a      	str	r2, [r3, #4]
 8000a10:	609a      	str	r2, [r3, #8]
 8000a12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a14:	1d3b      	adds	r3, r7, #4
 8000a16:	2200      	movs	r2, #0
 8000a18:	601a      	str	r2, [r3, #0]
 8000a1a:	605a      	str	r2, [r3, #4]
 8000a1c:	609a      	str	r2, [r3, #8]


  htim2.Instance = TIM2;
 8000a1e:	4b1e      	ldr	r3, [pc, #120]	; (8000a98 <MX_TIM2_Init+0x98>)
 8000a20:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a24:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 160-1;
 8000a26:	4b1c      	ldr	r3, [pc, #112]	; (8000a98 <MX_TIM2_Init+0x98>)
 8000a28:	229f      	movs	r2, #159	; 0x9f
 8000a2a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a2c:	4b1a      	ldr	r3, [pc, #104]	; (8000a98 <MX_TIM2_Init+0x98>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8000a32:	4b19      	ldr	r3, [pc, #100]	; (8000a98 <MX_TIM2_Init+0x98>)
 8000a34:	f242 720f 	movw	r2, #9999	; 0x270f
 8000a38:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a3a:	4b17      	ldr	r3, [pc, #92]	; (8000a98 <MX_TIM2_Init+0x98>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a40:	4b15      	ldr	r3, [pc, #84]	; (8000a98 <MX_TIM2_Init+0x98>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a46:	4814      	ldr	r0, [pc, #80]	; (8000a98 <MX_TIM2_Init+0x98>)
 8000a48:	f002 fb9e 	bl	8003188 <HAL_TIM_Base_Init>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000a52:	f000 fafa 	bl	800104a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a5a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a5c:	f107 0310 	add.w	r3, r7, #16
 8000a60:	4619      	mov	r1, r3
 8000a62:	480d      	ldr	r0, [pc, #52]	; (8000a98 <MX_TIM2_Init+0x98>)
 8000a64:	f002 fdd2 	bl	800360c <HAL_TIM_ConfigClockSource>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000a6e:	f000 faec 	bl	800104a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a72:	2300      	movs	r3, #0
 8000a74:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a76:	2300      	movs	r3, #0
 8000a78:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a7a:	1d3b      	adds	r3, r7, #4
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4806      	ldr	r0, [pc, #24]	; (8000a98 <MX_TIM2_Init+0x98>)
 8000a80:	f002 ffea 	bl	8003a58 <HAL_TIMEx_MasterConfigSynchronization>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000a8a:	f000 fade 	bl	800104a <Error_Handler>
  }
}
 8000a8e:	bf00      	nop
 8000a90:	3720      	adds	r7, #32
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	20000150 	.word	0x20000150

08000a9c <HAL_TIM_PeriodElapsedCallback>:

// ----------------------------------------------------------------------------
// Timer 2 callback function  
// ----------------------------------------------------------------------------
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  if (htim == &htim2)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	4a06      	ldr	r2, [pc, #24]	; (8000ac0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	d102      	bne.n	8000ab2 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    timer_IT = 1;
 8000aac:	4b05      	ldr	r3, [pc, #20]	; (8000ac4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000aae:	2201      	movs	r2, #1
 8000ab0:	701a      	strb	r2, [r3, #0]
  }
}
 8000ab2:	bf00      	nop
 8000ab4:	370c      	adds	r7, #12
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	20000150 	.word	0x20000150
 8000ac4:	20000028 	.word	0x20000028

08000ac8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 8000acc:	4b22      	ldr	r3, [pc, #136]	; (8000b58 <MX_USART1_UART_Init+0x90>)
 8000ace:	4a23      	ldr	r2, [pc, #140]	; (8000b5c <MX_USART1_UART_Init+0x94>)
 8000ad0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ad2:	4b21      	ldr	r3, [pc, #132]	; (8000b58 <MX_USART1_UART_Init+0x90>)
 8000ad4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ad8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ada:	4b1f      	ldr	r3, [pc, #124]	; (8000b58 <MX_USART1_UART_Init+0x90>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ae0:	4b1d      	ldr	r3, [pc, #116]	; (8000b58 <MX_USART1_UART_Init+0x90>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ae6:	4b1c      	ldr	r3, [pc, #112]	; (8000b58 <MX_USART1_UART_Init+0x90>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000aec:	4b1a      	ldr	r3, [pc, #104]	; (8000b58 <MX_USART1_UART_Init+0x90>)
 8000aee:	220c      	movs	r2, #12
 8000af0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000af2:	4b19      	ldr	r3, [pc, #100]	; (8000b58 <MX_USART1_UART_Init+0x90>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000af8:	4b17      	ldr	r3, [pc, #92]	; (8000b58 <MX_USART1_UART_Init+0x90>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000afe:	4b16      	ldr	r3, [pc, #88]	; (8000b58 <MX_USART1_UART_Init+0x90>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b04:	4b14      	ldr	r3, [pc, #80]	; (8000b58 <MX_USART1_UART_Init+0x90>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b0a:	4b13      	ldr	r3, [pc, #76]	; (8000b58 <MX_USART1_UART_Init+0x90>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b10:	4811      	ldr	r0, [pc, #68]	; (8000b58 <MX_USART1_UART_Init+0x90>)
 8000b12:	f003 f869 	bl	8003be8 <HAL_UART_Init>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000b1c:	f000 fa95 	bl	800104a <Error_Handler>
  }

  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b20:	2100      	movs	r1, #0
 8000b22:	480d      	ldr	r0, [pc, #52]	; (8000b58 <MX_USART1_UART_Init+0x90>)
 8000b24:	f003 fcfb 	bl	800451e <HAL_UARTEx_SetTxFifoThreshold>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000b2e:	f000 fa8c 	bl	800104a <Error_Handler>
  }

  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b32:	2100      	movs	r1, #0
 8000b34:	4808      	ldr	r0, [pc, #32]	; (8000b58 <MX_USART1_UART_Init+0x90>)
 8000b36:	f003 fd30 	bl	800459a <HAL_UARTEx_SetRxFifoThreshold>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000b40:	f000 fa83 	bl	800104a <Error_Handler>
  }

  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000b44:	4804      	ldr	r0, [pc, #16]	; (8000b58 <MX_USART1_UART_Init+0x90>)
 8000b46:	f003 fcb1 	bl	80044ac <HAL_UARTEx_DisableFifoMode>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000b50:	f000 fa7b 	bl	800104a <Error_Handler>
  }
}
 8000b54:	bf00      	nop
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	200000c4 	.word	0x200000c4
 8000b5c:	40013800 	.word	0x40013800

08000b60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b088      	sub	sp, #32
 8000b64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b66:	f107 030c 	add.w	r3, r7, #12
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	605a      	str	r2, [r3, #4]
 8000b70:	609a      	str	r2, [r3, #8]
 8000b72:	60da      	str	r2, [r3, #12]
 8000b74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b76:	4b39      	ldr	r3, [pc, #228]	; (8000c5c <MX_GPIO_Init+0xfc>)
 8000b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b7a:	4a38      	ldr	r2, [pc, #224]	; (8000c5c <MX_GPIO_Init+0xfc>)
 8000b7c:	f043 0320 	orr.w	r3, r3, #32
 8000b80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b82:	4b36      	ldr	r3, [pc, #216]	; (8000c5c <MX_GPIO_Init+0xfc>)
 8000b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b86:	f003 0320 	and.w	r3, r3, #32
 8000b8a:	60bb      	str	r3, [r7, #8]
 8000b8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8e:	4b33      	ldr	r3, [pc, #204]	; (8000c5c <MX_GPIO_Init+0xfc>)
 8000b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b92:	4a32      	ldr	r2, [pc, #200]	; (8000c5c <MX_GPIO_Init+0xfc>)
 8000b94:	f043 0301 	orr.w	r3, r3, #1
 8000b98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b9a:	4b30      	ldr	r3, [pc, #192]	; (8000c5c <MX_GPIO_Init+0xfc>)
 8000b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b9e:	f003 0301 	and.w	r3, r3, #1
 8000ba2:	607b      	str	r3, [r7, #4]
 8000ba4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba6:	4b2d      	ldr	r3, [pc, #180]	; (8000c5c <MX_GPIO_Init+0xfc>)
 8000ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000baa:	4a2c      	ldr	r2, [pc, #176]	; (8000c5c <MX_GPIO_Init+0xfc>)
 8000bac:	f043 0302 	orr.w	r3, r3, #2
 8000bb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bb2:	4b2a      	ldr	r3, [pc, #168]	; (8000c5c <MX_GPIO_Init+0xfc>)
 8000bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb6:	f003 0302 	and.w	r3, r3, #2
 8000bba:	603b      	str	r3, [r7, #0]
 8000bbc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DRIVER_0_RESET_Pin|DRIVER_1_RESET_Pin, GPIO_PIN_RESET);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	2103      	movs	r1, #3
 8000bc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bc6:	f000 ff5f 	bl	8001a88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DRIVER_0_OE_Pin|DRIVER_1_OE_Pin, GPIO_PIN_SET);
 8000bca:	2201      	movs	r2, #1
 8000bcc:	210c      	movs	r1, #12
 8000bce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bd2:	f000 ff59 	bl	8001a88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bdc:	4820      	ldr	r0, [pc, #128]	; (8000c60 <MX_GPIO_Init+0x100>)
 8000bde:	f000 ff53 	bl	8001a88 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRIVER_0_RESET_Pin DRIVER_1_RESET_Pin DRIVER_0_OE_Pin DRIVER_1_OE_Pin */
  GPIO_InitStruct.Pin = DRIVER_0_RESET_Pin|DRIVER_1_RESET_Pin|DRIVER_0_OE_Pin|DRIVER_1_OE_Pin;
 8000be2:	230f      	movs	r3, #15
 8000be4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be6:	2301      	movs	r3, #1
 8000be8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf2:	f107 030c 	add.w	r3, r7, #12
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bfc:	f000 fdaa 	bl	8001754 <HAL_GPIO_Init>

  /*Configure GPIO pins : BOARD_ID_0_Pin PB_right_Pin BOARD_ID_1_Pin PB_down_Pin
                           PB_left_Pin */
  GPIO_InitStruct.Pin = BOARD_ID_0_Pin|PB_right_Pin|BOARD_ID_1_Pin|PB_down_Pin
 8000c00:	f241 03f0 	movw	r3, #4336	; 0x10f0
 8000c04:	60fb      	str	r3, [r7, #12]
                          |PB_left_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c06:	2300      	movs	r3, #0
 8000c08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0e:	f107 030c 	add.w	r3, r7, #12
 8000c12:	4619      	mov	r1, r3
 8000c14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c18:	f000 fd9c 	bl	8001754 <HAL_GPIO_Init>

  /*Configure GPIO pins : BOARD_ID_2_Pin PB_up_Pin */
  GPIO_InitStruct.Pin = BOARD_ID_2_Pin|PB_up_Pin;
 8000c1c:	2311      	movs	r3, #17
 8000c1e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c20:	2300      	movs	r3, #0
 8000c22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c28:	f107 030c 	add.w	r3, r7, #12
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	480c      	ldr	r0, [pc, #48]	; (8000c60 <MX_GPIO_Init+0x100>)
 8000c30:	f000 fd90 	bl	8001754 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000c34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c38:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c42:	2300      	movs	r3, #0
 8000c44:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c46:	f107 030c 	add.w	r3, r7, #12
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4804      	ldr	r0, [pc, #16]	; (8000c60 <MX_GPIO_Init+0x100>)
 8000c4e:	f000 fd81 	bl	8001754 <HAL_GPIO_Init>
}
 8000c52:	bf00      	nop
 8000c54:	3720      	adds	r7, #32
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40021000 	.word	0x40021000
 8000c60:	48000400 	.word	0x48000400

08000c64 <LEDs_init>:

// ----------------------------------------------------------------------------
// LED panel initialisation 
// ----------------------------------------------------------------------------
void LEDs_init()
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b088      	sub	sp, #32
 8000c68:	af02      	add	r7, sp, #8
  uint8_t I2C_buff[17];
  HAL_StatusTypeDef I2C_stat;
  uint8_t LED = 0;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	75fb      	strb	r3, [r7, #23]
  uint8_t i = 0;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	75bb      	strb	r3, [r7, #22]

  // Release reset
  HAL_GPIO_WritePin(GPIOA, DRIVER_0_RESET_Pin | DRIVER_1_RESET_Pin, GPIO_PIN_SET);
 8000c72:	2201      	movs	r2, #1
 8000c74:	2103      	movs	r1, #3
 8000c76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c7a:	f000 ff05 	bl	8001a88 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, DRIVER_0_OE_Pin | DRIVER_1_OE_Pin, GPIO_PIN_RESET);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	210c      	movs	r1, #12
 8000c82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c86:	f000 feff 	bl	8001a88 <HAL_GPIO_WritePin>

  // Initialise configuration
  I2C_buff[0] = REG_MODE1;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	713b      	strb	r3, [r7, #4]
  I2C_buff[1] = 0x00;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	717b      	strb	r3, [r7, #5]
  I2C_stat = HAL_I2C_Master_Transmit(&hi2c1, ADDR_LED_DRV_0, I2C_buff, 2, HAL_MAX_DELAY);
 8000c92:	1d3a      	adds	r2, r7, #4
 8000c94:	f04f 33ff 	mov.w	r3, #4294967295
 8000c98:	9300      	str	r3, [sp, #0]
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	212a      	movs	r1, #42	; 0x2a
 8000c9e:	4865      	ldr	r0, [pc, #404]	; (8000e34 <LEDs_init+0x1d0>)
 8000ca0:	f000 ff9a 	bl	8001bd8 <HAL_I2C_Master_Transmit>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	757b      	strb	r3, [r7, #21]
  I2C_stat = HAL_I2C_Master_Transmit(&hi2c1, ADDR_LED_DRV_1, I2C_buff, 2, HAL_MAX_DELAY);
 8000ca8:	1d3a      	adds	r2, r7, #4
 8000caa:	f04f 33ff 	mov.w	r3, #4294967295
 8000cae:	9300      	str	r3, [sp, #0]
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	2132      	movs	r1, #50	; 0x32
 8000cb4:	485f      	ldr	r0, [pc, #380]	; (8000e34 <LEDs_init+0x1d0>)
 8000cb6:	f000 ff8f 	bl	8001bd8 <HAL_I2C_Master_Transmit>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	757b      	strb	r3, [r7, #21]
  
  // Set LEDs control to PWM drive
  I2C_buff[0] = REG_LEDOUT0 | AUTO_INC_OPT;
 8000cbe:	2382      	movs	r3, #130	; 0x82
 8000cc0:	713b      	strb	r3, [r7, #4]
  I2C_buff[1] = 0xAA;
 8000cc2:	23aa      	movs	r3, #170	; 0xaa
 8000cc4:	717b      	strb	r3, [r7, #5]
  I2C_buff[2] = 0xAA;
 8000cc6:	23aa      	movs	r3, #170	; 0xaa
 8000cc8:	71bb      	strb	r3, [r7, #6]
  I2C_buff[3] = 0xAA;
 8000cca:	23aa      	movs	r3, #170	; 0xaa
 8000ccc:	71fb      	strb	r3, [r7, #7]
  I2C_buff[4] = 0xAA;
 8000cce:	23aa      	movs	r3, #170	; 0xaa
 8000cd0:	723b      	strb	r3, [r7, #8]
  I2C_stat = HAL_I2C_Master_Transmit(&hi2c1, ADDR_LED_DRV_0, I2C_buff, 5, HAL_MAX_DELAY);
 8000cd2:	1d3a      	adds	r2, r7, #4
 8000cd4:	f04f 33ff 	mov.w	r3, #4294967295
 8000cd8:	9300      	str	r3, [sp, #0]
 8000cda:	2305      	movs	r3, #5
 8000cdc:	212a      	movs	r1, #42	; 0x2a
 8000cde:	4855      	ldr	r0, [pc, #340]	; (8000e34 <LEDs_init+0x1d0>)
 8000ce0:	f000 ff7a 	bl	8001bd8 <HAL_I2C_Master_Transmit>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	757b      	strb	r3, [r7, #21]
  I2C_stat = HAL_I2C_Master_Transmit(&hi2c1, ADDR_LED_DRV_1, I2C_buff, 5, HAL_MAX_DELAY);
 8000ce8:	1d3a      	adds	r2, r7, #4
 8000cea:	f04f 33ff 	mov.w	r3, #4294967295
 8000cee:	9300      	str	r3, [sp, #0]
 8000cf0:	2305      	movs	r3, #5
 8000cf2:	2132      	movs	r1, #50	; 0x32
 8000cf4:	484f      	ldr	r0, [pc, #316]	; (8000e34 <LEDs_init+0x1d0>)
 8000cf6:	f000 ff6f 	bl	8001bd8 <HAL_I2C_Master_Transmit>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	757b      	strb	r3, [r7, #21]

  // GRPFREQ
  // Not applicable with LEDOUT = 0b01

  // Individual LED PWM value
  I2C_buff[0] = REG_PWM0 | AUTO_INC_OPT;
 8000cfe:	2388      	movs	r3, #136	; 0x88
 8000d00:	713b      	strb	r3, [r7, #4]
  for (LED = 0; LED < 5; LED++)
 8000d02:	2300      	movs	r3, #0
 8000d04:	75fb      	strb	r3, [r7, #23]
 8000d06:	e023      	b.n	8000d50 <LEDs_init+0xec>
  {
    I2C_buff[1 + (LED*3) + 0] = LED_PINK.R; // red channel
 8000d08:	7dfa      	ldrb	r2, [r7, #23]
 8000d0a:	4613      	mov	r3, r2
 8000d0c:	005b      	lsls	r3, r3, #1
 8000d0e:	4413      	add	r3, r2
 8000d10:	3301      	adds	r3, #1
 8000d12:	22ec      	movs	r2, #236	; 0xec
 8000d14:	f107 0118 	add.w	r1, r7, #24
 8000d18:	440b      	add	r3, r1
 8000d1a:	f803 2c14 	strb.w	r2, [r3, #-20]
    I2C_buff[1 + (LED*3) + 1] = LED_PINK.B; // blue channel
 8000d1e:	7dfa      	ldrb	r2, [r7, #23]
 8000d20:	4613      	mov	r3, r2
 8000d22:	005b      	lsls	r3, r3, #1
 8000d24:	4413      	add	r3, r2
 8000d26:	3302      	adds	r3, #2
 8000d28:	22e9      	movs	r2, #233	; 0xe9
 8000d2a:	f107 0118 	add.w	r1, r7, #24
 8000d2e:	440b      	add	r3, r1
 8000d30:	f803 2c14 	strb.w	r2, [r3, #-20]
    I2C_buff[1 + (LED*3) + 2] = LED_PINK.G; // green channel
 8000d34:	7dfb      	ldrb	r3, [r7, #23]
 8000d36:	1c5a      	adds	r2, r3, #1
 8000d38:	4613      	mov	r3, r2
 8000d3a:	005b      	lsls	r3, r3, #1
 8000d3c:	4413      	add	r3, r2
 8000d3e:	2212      	movs	r2, #18
 8000d40:	f107 0118 	add.w	r1, r7, #24
 8000d44:	440b      	add	r3, r1
 8000d46:	f803 2c14 	strb.w	r2, [r3, #-20]
  for (LED = 0; LED < 5; LED++)
 8000d4a:	7dfb      	ldrb	r3, [r7, #23]
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	75fb      	strb	r3, [r7, #23]
 8000d50:	7dfb      	ldrb	r3, [r7, #23]
 8000d52:	2b04      	cmp	r3, #4
 8000d54:	d9d8      	bls.n	8000d08 <LEDs_init+0xa4>
  }
  I2C_stat = HAL_I2C_Master_Transmit(&hi2c1, ADDR_LED_DRV_0, I2C_buff, 15+1, HAL_MAX_DELAY);
 8000d56:	1d3a      	adds	r2, r7, #4
 8000d58:	f04f 33ff 	mov.w	r3, #4294967295
 8000d5c:	9300      	str	r3, [sp, #0]
 8000d5e:	2310      	movs	r3, #16
 8000d60:	212a      	movs	r1, #42	; 0x2a
 8000d62:	4834      	ldr	r0, [pc, #208]	; (8000e34 <LEDs_init+0x1d0>)
 8000d64:	f000 ff38 	bl	8001bd8 <HAL_I2C_Master_Transmit>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	757b      	strb	r3, [r7, #21]

  I2C_buff[0] = REG_PWM0 | AUTO_INC_OPT;
 8000d6c:	2388      	movs	r3, #136	; 0x88
 8000d6e:	713b      	strb	r3, [r7, #4]
  for (LED = 0; LED < 4; LED++)
 8000d70:	2300      	movs	r3, #0
 8000d72:	75fb      	strb	r3, [r7, #23]
 8000d74:	e023      	b.n	8000dbe <LEDs_init+0x15a>
  {
    I2C_buff[1 + (LED*3) + 0] = LED_PINK.R; // red channel
 8000d76:	7dfa      	ldrb	r2, [r7, #23]
 8000d78:	4613      	mov	r3, r2
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	4413      	add	r3, r2
 8000d7e:	3301      	adds	r3, #1
 8000d80:	22ec      	movs	r2, #236	; 0xec
 8000d82:	f107 0118 	add.w	r1, r7, #24
 8000d86:	440b      	add	r3, r1
 8000d88:	f803 2c14 	strb.w	r2, [r3, #-20]
    I2C_buff[1 + (LED*3) + 1] = LED_PINK.B; // blue channel
 8000d8c:	7dfa      	ldrb	r2, [r7, #23]
 8000d8e:	4613      	mov	r3, r2
 8000d90:	005b      	lsls	r3, r3, #1
 8000d92:	4413      	add	r3, r2
 8000d94:	3302      	adds	r3, #2
 8000d96:	22e9      	movs	r2, #233	; 0xe9
 8000d98:	f107 0118 	add.w	r1, r7, #24
 8000d9c:	440b      	add	r3, r1
 8000d9e:	f803 2c14 	strb.w	r2, [r3, #-20]
    I2C_buff[1 + (LED*3) + 2] = LED_PINK.G; // green channel
 8000da2:	7dfb      	ldrb	r3, [r7, #23]
 8000da4:	1c5a      	adds	r2, r3, #1
 8000da6:	4613      	mov	r3, r2
 8000da8:	005b      	lsls	r3, r3, #1
 8000daa:	4413      	add	r3, r2
 8000dac:	2212      	movs	r2, #18
 8000dae:	f107 0118 	add.w	r1, r7, #24
 8000db2:	440b      	add	r3, r1
 8000db4:	f803 2c14 	strb.w	r2, [r3, #-20]
  for (LED = 0; LED < 4; LED++)
 8000db8:	7dfb      	ldrb	r3, [r7, #23]
 8000dba:	3301      	adds	r3, #1
 8000dbc:	75fb      	strb	r3, [r7, #23]
 8000dbe:	7dfb      	ldrb	r3, [r7, #23]
 8000dc0:	2b03      	cmp	r3, #3
 8000dc2:	d9d8      	bls.n	8000d76 <LEDs_init+0x112>
  }
  I2C_stat = HAL_I2C_Master_Transmit(&hi2c1, ADDR_LED_DRV_1, I2C_buff, 12+1, HAL_MAX_DELAY);
 8000dc4:	1d3a      	adds	r2, r7, #4
 8000dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dca:	9300      	str	r3, [sp, #0]
 8000dcc:	230d      	movs	r3, #13
 8000dce:	2132      	movs	r1, #50	; 0x32
 8000dd0:	4818      	ldr	r0, [pc, #96]	; (8000e34 <LEDs_init+0x1d0>)
 8000dd2:	f000 ff01 	bl	8001bd8 <HAL_I2C_Master_Transmit>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	757b      	strb	r3, [r7, #21]

  // Individual LED reference current
  I2C_buff[0] = REG_IREF0 | AUTO_INC_OPT;
 8000dda:	2398      	movs	r3, #152	; 0x98
 8000ddc:	713b      	strb	r3, [r7, #4]
  for (i = 0; i < 16; i++)
 8000dde:	2300      	movs	r3, #0
 8000de0:	75bb      	strb	r3, [r7, #22]
 8000de2:	e00a      	b.n	8000dfa <LEDs_init+0x196>
  {
    I2C_buff[i+1] = 0x08;
 8000de4:	7dbb      	ldrb	r3, [r7, #22]
 8000de6:	3301      	adds	r3, #1
 8000de8:	f107 0218 	add.w	r2, r7, #24
 8000dec:	4413      	add	r3, r2
 8000dee:	2208      	movs	r2, #8
 8000df0:	f803 2c14 	strb.w	r2, [r3, #-20]
  for (i = 0; i < 16; i++)
 8000df4:	7dbb      	ldrb	r3, [r7, #22]
 8000df6:	3301      	adds	r3, #1
 8000df8:	75bb      	strb	r3, [r7, #22]
 8000dfa:	7dbb      	ldrb	r3, [r7, #22]
 8000dfc:	2b0f      	cmp	r3, #15
 8000dfe:	d9f1      	bls.n	8000de4 <LEDs_init+0x180>
  }
  I2C_stat = HAL_I2C_Master_Transmit(&hi2c1, ADDR_LED_DRV_0, I2C_buff, 17, HAL_MAX_DELAY);
 8000e00:	1d3a      	adds	r2, r7, #4
 8000e02:	f04f 33ff 	mov.w	r3, #4294967295
 8000e06:	9300      	str	r3, [sp, #0]
 8000e08:	2311      	movs	r3, #17
 8000e0a:	212a      	movs	r1, #42	; 0x2a
 8000e0c:	4809      	ldr	r0, [pc, #36]	; (8000e34 <LEDs_init+0x1d0>)
 8000e0e:	f000 fee3 	bl	8001bd8 <HAL_I2C_Master_Transmit>
 8000e12:	4603      	mov	r3, r0
 8000e14:	757b      	strb	r3, [r7, #21]
  I2C_stat = HAL_I2C_Master_Transmit(&hi2c1, ADDR_LED_DRV_1, I2C_buff, 17, HAL_MAX_DELAY);
 8000e16:	1d3a      	adds	r2, r7, #4
 8000e18:	f04f 33ff 	mov.w	r3, #4294967295
 8000e1c:	9300      	str	r3, [sp, #0]
 8000e1e:	2311      	movs	r3, #17
 8000e20:	2132      	movs	r1, #50	; 0x32
 8000e22:	4804      	ldr	r0, [pc, #16]	; (8000e34 <LEDs_init+0x1d0>)
 8000e24:	f000 fed8 	bl	8001bd8 <HAL_I2C_Master_Transmit>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	757b      	strb	r3, [r7, #21]
}
 8000e2c:	bf00      	nop
 8000e2e:	3718      	adds	r7, #24
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	2000002c 	.word	0x2000002c

08000e38 <LEDs_update>:

// ----------------------------------------------------------------------------
// LED panel update function
// ----------------------------------------------------------------------------
void LEDs_update(RGB_LED *ptr_RGB_LED_array)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b08e      	sub	sp, #56	; 0x38
 8000e3c:	af02      	add	r7, sp, #8
 8000e3e:	6078      	str	r0, [r7, #4]
  uint8_t LED_drv_1_buff[17];

  // --------------------------------------------------------------------------
  // Fill in the buffer for the first LED driver
  // --------------------------------------------------------------------------
  LED_drv_0_buff[0] = REG_PWM0 | AUTO_INC_OPT;
 8000e40:	2388      	movs	r3, #136	; 0x88
 8000e42:	773b      	strb	r3, [r7, #28]

  LED_drv_0_buff[1] = ptr_RGB_LED_array[6].R;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	3312      	adds	r3, #18
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	777b      	strb	r3, [r7, #29]
  LED_drv_0_buff[2] = ptr_RGB_LED_array[6].B;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	3312      	adds	r3, #18
 8000e50:	789b      	ldrb	r3, [r3, #2]
 8000e52:	77bb      	strb	r3, [r7, #30]
  LED_drv_0_buff[3] = ptr_RGB_LED_array[6].G;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	3312      	adds	r3, #18
 8000e58:	785b      	ldrb	r3, [r3, #1]
 8000e5a:	77fb      	strb	r3, [r7, #31]

  LED_drv_0_buff[4] = ptr_RGB_LED_array[4].R;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	330c      	adds	r3, #12
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	f887 3020 	strb.w	r3, [r7, #32]
  LED_drv_0_buff[5] = ptr_RGB_LED_array[4].B;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	330c      	adds	r3, #12
 8000e6a:	789b      	ldrb	r3, [r3, #2]
 8000e6c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  LED_drv_0_buff[6] = ptr_RGB_LED_array[4].G;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	330c      	adds	r3, #12
 8000e74:	785b      	ldrb	r3, [r3, #1]
 8000e76:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  LED_drv_0_buff[7] = ptr_RGB_LED_array[1].R;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	3303      	adds	r3, #3
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  LED_drv_0_buff[8] = ptr_RGB_LED_array[1].B;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	3303      	adds	r3, #3
 8000e88:	789b      	ldrb	r3, [r3, #2]
 8000e8a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  LED_drv_0_buff[9] = ptr_RGB_LED_array[1].G;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	3303      	adds	r3, #3
 8000e92:	785b      	ldrb	r3, [r3, #1]
 8000e94:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  LED_drv_0_buff[10] = ptr_RGB_LED_array[3].R;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	3309      	adds	r3, #9
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LED_drv_0_buff[11] = ptr_RGB_LED_array[3].B;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	3309      	adds	r3, #9
 8000ea6:	789b      	ldrb	r3, [r3, #2]
 8000ea8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  LED_drv_0_buff[12] = ptr_RGB_LED_array[3].G;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	3309      	adds	r3, #9
 8000eb0:	785b      	ldrb	r3, [r3, #1]
 8000eb2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

  LED_drv_0_buff[13] = ptr_RGB_LED_array[0].R;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  LED_drv_0_buff[14] = ptr_RGB_LED_array[0].B;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	789b      	ldrb	r3, [r3, #2]
 8000ec2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  LED_drv_0_buff[15] = ptr_RGB_LED_array[0].G;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	785b      	ldrb	r3, [r3, #1]
 8000eca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  // Last LED is not connected.
  LED_drv_0_buff[16] = 0x00;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

  // --------------------------------------------------------------------------
  // Fill in the buffer for the second LED driver
  // --------------------------------------------------------------------------
  LED_drv_1_buff[0] = REG_PWM0 | AUTO_INC_OPT;
 8000ed4:	2388      	movs	r3, #136	; 0x88
 8000ed6:	723b      	strb	r3, [r7, #8]

  LED_drv_1_buff[1] = ptr_RGB_LED_array[2].R;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	3306      	adds	r3, #6
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	727b      	strb	r3, [r7, #9]
  LED_drv_1_buff[2] = ptr_RGB_LED_array[2].B;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	3306      	adds	r3, #6
 8000ee4:	789b      	ldrb	r3, [r3, #2]
 8000ee6:	72bb      	strb	r3, [r7, #10]
  LED_drv_1_buff[3] = ptr_RGB_LED_array[2].G;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	3306      	adds	r3, #6
 8000eec:	785b      	ldrb	r3, [r3, #1]
 8000eee:	72fb      	strb	r3, [r7, #11]

  LED_drv_1_buff[4] = ptr_RGB_LED_array[7].R;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	3315      	adds	r3, #21
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	733b      	strb	r3, [r7, #12]
  LED_drv_1_buff[5] = ptr_RGB_LED_array[7].B;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	3315      	adds	r3, #21
 8000efc:	789b      	ldrb	r3, [r3, #2]
 8000efe:	737b      	strb	r3, [r7, #13]
  LED_drv_1_buff[6] = ptr_RGB_LED_array[7].G;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	3315      	adds	r3, #21
 8000f04:	785b      	ldrb	r3, [r3, #1]
 8000f06:	73bb      	strb	r3, [r7, #14]

  LED_drv_1_buff[7] = ptr_RGB_LED_array[5].R;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	330f      	adds	r3, #15
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	73fb      	strb	r3, [r7, #15]
  LED_drv_1_buff[8] = ptr_RGB_LED_array[5].B;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	330f      	adds	r3, #15
 8000f14:	789b      	ldrb	r3, [r3, #2]
 8000f16:	743b      	strb	r3, [r7, #16]
  LED_drv_1_buff[9] = ptr_RGB_LED_array[5].G;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	330f      	adds	r3, #15
 8000f1c:	785b      	ldrb	r3, [r3, #1]
 8000f1e:	747b      	strb	r3, [r7, #17]

  LED_drv_1_buff[10] = ptr_RGB_LED_array[8].R;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	3318      	adds	r3, #24
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	74bb      	strb	r3, [r7, #18]
  LED_drv_1_buff[11] = ptr_RGB_LED_array[8].B;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	3318      	adds	r3, #24
 8000f2c:	789b      	ldrb	r3, [r3, #2]
 8000f2e:	74fb      	strb	r3, [r7, #19]
  LED_drv_1_buff[12] = ptr_RGB_LED_array[8].G;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	3318      	adds	r3, #24
 8000f34:	785b      	ldrb	r3, [r3, #1]
 8000f36:	753b      	strb	r3, [r7, #20]

  // Last LEDs are not connected.
  LED_drv_1_buff[13] = 0x00;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	757b      	strb	r3, [r7, #21]
  LED_drv_1_buff[14] = 0x00;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	75bb      	strb	r3, [r7, #22]
  LED_drv_1_buff[15] = 0x00;
 8000f40:	2300      	movs	r3, #0
 8000f42:	75fb      	strb	r3, [r7, #23]
  LED_drv_1_buff[16] = 0x00;
 8000f44:	2300      	movs	r3, #0
 8000f46:	763b      	strb	r3, [r7, #24]

  HAL_I2C_Master_Transmit(&hi2c1, ADDR_LED_DRV_0, LED_drv_0_buff, 17, HAL_MAX_DELAY);
 8000f48:	f107 021c 	add.w	r2, r7, #28
 8000f4c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f50:	9300      	str	r3, [sp, #0]
 8000f52:	2311      	movs	r3, #17
 8000f54:	212a      	movs	r1, #42	; 0x2a
 8000f56:	4808      	ldr	r0, [pc, #32]	; (8000f78 <LEDs_update+0x140>)
 8000f58:	f000 fe3e 	bl	8001bd8 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Transmit(&hi2c1, ADDR_LED_DRV_1, LED_drv_1_buff, 17, HAL_MAX_DELAY);
 8000f5c:	f107 0208 	add.w	r2, r7, #8
 8000f60:	f04f 33ff 	mov.w	r3, #4294967295
 8000f64:	9300      	str	r3, [sp, #0]
 8000f66:	2311      	movs	r3, #17
 8000f68:	2132      	movs	r1, #50	; 0x32
 8000f6a:	4803      	ldr	r0, [pc, #12]	; (8000f78 <LEDs_update+0x140>)
 8000f6c:	f000 fe34 	bl	8001bd8 <HAL_I2C_Master_Transmit>
}
 8000f70:	bf00      	nop
 8000f72:	3730      	adds	r7, #48	; 0x30
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	2000002c 	.word	0x2000002c

08000f7c <rubiks_move>:

// ----------------------------------------------------------------------------
// Rubik's cube move function
// ----------------------------------------------------------------------------
void rubiks_move(uint8_t *LED_phase, uint8_t PB_move)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b085      	sub	sp, #20
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	460b      	mov	r3, r1
 8000f86:	70fb      	strb	r3, [r7, #3]

  uint8_t LED_phase_tmp;

  if (PB_move & PB_MOVE_LEFT)
 8000f88:	78fb      	ldrb	r3, [r7, #3]
 8000f8a:	f003 0301 	and.w	r3, r3, #1
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d011      	beq.n	8000fb6 <rubiks_move+0x3a>
  {
    LED_phase_tmp = LED_phase[1];
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	785b      	ldrb	r3, [r3, #1]
 8000f96:	73fb      	strb	r3, [r7, #15]
    LED_phase[1] = LED_phase[4];
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	687a      	ldr	r2, [r7, #4]
 8000f9e:	7912      	ldrb	r2, [r2, #4]
 8000fa0:	701a      	strb	r2, [r3, #0]
    LED_phase[4] = LED_phase[7];
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	3304      	adds	r3, #4
 8000fa6:	687a      	ldr	r2, [r7, #4]
 8000fa8:	79d2      	ldrb	r2, [r2, #7]
 8000faa:	701a      	strb	r2, [r3, #0]
    LED_phase[7] = LED_phase_tmp;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	3307      	adds	r3, #7
 8000fb0:	7bfa      	ldrb	r2, [r7, #15]
 8000fb2:	701a      	strb	r2, [r3, #0]
  }
  else
  {

  }
}
 8000fb4:	e043      	b.n	800103e <rubiks_move+0xc2>
  else if (PB_move & PB_MOVE_RIGHT)
 8000fb6:	78fb      	ldrb	r3, [r7, #3]
 8000fb8:	f003 0302 	and.w	r3, r3, #2
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d011      	beq.n	8000fe4 <rubiks_move+0x68>
    LED_phase_tmp = LED_phase[7];
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	79db      	ldrb	r3, [r3, #7]
 8000fc4:	73fb      	strb	r3, [r7, #15]
    LED_phase[7] = LED_phase[4];
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	3307      	adds	r3, #7
 8000fca:	687a      	ldr	r2, [r7, #4]
 8000fcc:	7912      	ldrb	r2, [r2, #4]
 8000fce:	701a      	strb	r2, [r3, #0]
    LED_phase[4] = LED_phase[1];
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	3304      	adds	r3, #4
 8000fd4:	687a      	ldr	r2, [r7, #4]
 8000fd6:	7852      	ldrb	r2, [r2, #1]
 8000fd8:	701a      	strb	r2, [r3, #0]
    LED_phase[1] = LED_phase_tmp;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	3301      	adds	r3, #1
 8000fde:	7bfa      	ldrb	r2, [r7, #15]
 8000fe0:	701a      	strb	r2, [r3, #0]
}
 8000fe2:	e02c      	b.n	800103e <rubiks_move+0xc2>
  else if (PB_move & PB_MOVE_UP)
 8000fe4:	78fb      	ldrb	r3, [r7, #3]
 8000fe6:	f003 0304 	and.w	r3, r3, #4
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d011      	beq.n	8001012 <rubiks_move+0x96>
    LED_phase_tmp = LED_phase[3];
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	78db      	ldrb	r3, [r3, #3]
 8000ff2:	73fb      	strb	r3, [r7, #15]
    LED_phase[3] = LED_phase[4];
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	3303      	adds	r3, #3
 8000ff8:	687a      	ldr	r2, [r7, #4]
 8000ffa:	7912      	ldrb	r2, [r2, #4]
 8000ffc:	701a      	strb	r2, [r3, #0]
    LED_phase[4] = LED_phase[5];
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	3304      	adds	r3, #4
 8001002:	687a      	ldr	r2, [r7, #4]
 8001004:	7952      	ldrb	r2, [r2, #5]
 8001006:	701a      	strb	r2, [r3, #0]
    LED_phase[5] = LED_phase_tmp;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	3305      	adds	r3, #5
 800100c:	7bfa      	ldrb	r2, [r7, #15]
 800100e:	701a      	strb	r2, [r3, #0]
}
 8001010:	e015      	b.n	800103e <rubiks_move+0xc2>
  else if (PB_move & PB_MOVE_DOWN)
 8001012:	78fb      	ldrb	r3, [r7, #3]
 8001014:	f003 0308 	and.w	r3, r3, #8
 8001018:	2b00      	cmp	r3, #0
 800101a:	d010      	beq.n	800103e <rubiks_move+0xc2>
    LED_phase_tmp = LED_phase[5];
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	795b      	ldrb	r3, [r3, #5]
 8001020:	73fb      	strb	r3, [r7, #15]
    LED_phase[5] = LED_phase[4];
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	3305      	adds	r3, #5
 8001026:	687a      	ldr	r2, [r7, #4]
 8001028:	7912      	ldrb	r2, [r2, #4]
 800102a:	701a      	strb	r2, [r3, #0]
    LED_phase[4] = LED_phase[3];
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	3304      	adds	r3, #4
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	78d2      	ldrb	r2, [r2, #3]
 8001034:	701a      	strb	r2, [r3, #0]
    LED_phase[3] = LED_phase_tmp;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	3303      	adds	r3, #3
 800103a:	7bfa      	ldrb	r2, [r7, #15]
 800103c:	701a      	strb	r2, [r3, #0]
}
 800103e:	bf00      	nop
 8001040:	3714      	adds	r7, #20
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr

0800104a <Error_Handler>:

// ----------------------------------------------------------------------------
// Error handler
// ----------------------------------------------------------------------------
void Error_Handler(void)
{
 800104a:	b480      	push	{r7}
 800104c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800104e:	bf00      	nop
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800105e:	4b0f      	ldr	r3, [pc, #60]	; (800109c <HAL_MspInit+0x44>)
 8001060:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001062:	4a0e      	ldr	r2, [pc, #56]	; (800109c <HAL_MspInit+0x44>)
 8001064:	f043 0301 	orr.w	r3, r3, #1
 8001068:	6613      	str	r3, [r2, #96]	; 0x60
 800106a:	4b0c      	ldr	r3, [pc, #48]	; (800109c <HAL_MspInit+0x44>)
 800106c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	607b      	str	r3, [r7, #4]
 8001074:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001076:	4b09      	ldr	r3, [pc, #36]	; (800109c <HAL_MspInit+0x44>)
 8001078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800107a:	4a08      	ldr	r2, [pc, #32]	; (800109c <HAL_MspInit+0x44>)
 800107c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001080:	6593      	str	r3, [r2, #88]	; 0x58
 8001082:	4b06      	ldr	r3, [pc, #24]	; (800109c <HAL_MspInit+0x44>)
 8001084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800108a:	603b      	str	r3, [r7, #0]
 800108c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800108e:	f001 f947 	bl	8002320 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001092:	bf00      	nop
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40021000 	.word	0x40021000

080010a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b08e      	sub	sp, #56	; 0x38
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
 80010b6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a4f      	ldr	r2, [pc, #316]	; (80011fc <HAL_I2C_MspInit+0x15c>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d14c      	bne.n	800115c <HAL_I2C_MspInit+0xbc>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c2:	4b4f      	ldr	r3, [pc, #316]	; (8001200 <HAL_I2C_MspInit+0x160>)
 80010c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c6:	4a4e      	ldr	r2, [pc, #312]	; (8001200 <HAL_I2C_MspInit+0x160>)
 80010c8:	f043 0301 	orr.w	r3, r3, #1
 80010cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ce:	4b4c      	ldr	r3, [pc, #304]	; (8001200 <HAL_I2C_MspInit+0x160>)
 80010d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d2:	f003 0301 	and.w	r3, r3, #1
 80010d6:	623b      	str	r3, [r7, #32]
 80010d8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010da:	4b49      	ldr	r3, [pc, #292]	; (8001200 <HAL_I2C_MspInit+0x160>)
 80010dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010de:	4a48      	ldr	r2, [pc, #288]	; (8001200 <HAL_I2C_MspInit+0x160>)
 80010e0:	f043 0302 	orr.w	r3, r3, #2
 80010e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010e6:	4b46      	ldr	r3, [pc, #280]	; (8001200 <HAL_I2C_MspInit+0x160>)
 80010e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ea:	f003 0302 	and.w	r3, r3, #2
 80010ee:	61fb      	str	r3, [r7, #28]
 80010f0:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_LED_DRV_SCL_Pin;
 80010f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010f8:	2312      	movs	r3, #18
 80010fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fc:	2300      	movs	r3, #0
 80010fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001100:	2300      	movs	r3, #0
 8001102:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001104:	2304      	movs	r3, #4
 8001106:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2C1_LED_DRV_SCL_GPIO_Port, &GPIO_InitStruct);
 8001108:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800110c:	4619      	mov	r1, r3
 800110e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001112:	f000 fb1f 	bl	8001754 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C1_LED_DRV_SDA_Pin;
 8001116:	2380      	movs	r3, #128	; 0x80
 8001118:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800111a:	2312      	movs	r3, #18
 800111c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111e:	2300      	movs	r3, #0
 8001120:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001122:	2300      	movs	r3, #0
 8001124:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001126:	2304      	movs	r3, #4
 8001128:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2C1_LED_DRV_SDA_GPIO_Port, &GPIO_InitStruct);
 800112a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800112e:	4619      	mov	r1, r3
 8001130:	4834      	ldr	r0, [pc, #208]	; (8001204 <HAL_I2C_MspInit+0x164>)
 8001132:	f000 fb0f 	bl	8001754 <HAL_GPIO_Init>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB7);
 8001136:	4b34      	ldr	r3, [pc, #208]	; (8001208 <HAL_I2C_MspInit+0x168>)
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	4a33      	ldr	r2, [pc, #204]	; (8001208 <HAL_I2C_MspInit+0x168>)
 800113c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001140:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001142:	4b2f      	ldr	r3, [pc, #188]	; (8001200 <HAL_I2C_MspInit+0x160>)
 8001144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001146:	4a2e      	ldr	r2, [pc, #184]	; (8001200 <HAL_I2C_MspInit+0x160>)
 8001148:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800114c:	6593      	str	r3, [r2, #88]	; 0x58
 800114e:	4b2c      	ldr	r3, [pc, #176]	; (8001200 <HAL_I2C_MspInit+0x160>)
 8001150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001152:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001156:	61bb      	str	r3, [r7, #24]
 8001158:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800115a:	e04a      	b.n	80011f2 <HAL_I2C_MspInit+0x152>
  else if(hi2c->Instance==I2C2)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a2a      	ldr	r2, [pc, #168]	; (800120c <HAL_I2C_MspInit+0x16c>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d145      	bne.n	80011f2 <HAL_I2C_MspInit+0x152>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001166:	4b26      	ldr	r3, [pc, #152]	; (8001200 <HAL_I2C_MspInit+0x160>)
 8001168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800116a:	4a25      	ldr	r2, [pc, #148]	; (8001200 <HAL_I2C_MspInit+0x160>)
 800116c:	f043 0320 	orr.w	r3, r3, #32
 8001170:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001172:	4b23      	ldr	r3, [pc, #140]	; (8001200 <HAL_I2C_MspInit+0x160>)
 8001174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001176:	f003 0320 	and.w	r3, r3, #32
 800117a:	617b      	str	r3, [r7, #20]
 800117c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800117e:	4b20      	ldr	r3, [pc, #128]	; (8001200 <HAL_I2C_MspInit+0x160>)
 8001180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001182:	4a1f      	ldr	r2, [pc, #124]	; (8001200 <HAL_I2C_MspInit+0x160>)
 8001184:	f043 0301 	orr.w	r3, r3, #1
 8001188:	64d3      	str	r3, [r2, #76]	; 0x4c
 800118a:	4b1d      	ldr	r3, [pc, #116]	; (8001200 <HAL_I2C_MspInit+0x160>)
 800118c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118e:	f003 0301 	and.w	r3, r3, #1
 8001192:	613b      	str	r3, [r7, #16]
 8001194:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C2_COMM_SDA_Pin;
 8001196:	2301      	movs	r3, #1
 8001198:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800119a:	2312      	movs	r3, #18
 800119c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800119e:	2301      	movs	r3, #1
 80011a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a2:	2300      	movs	r3, #0
 80011a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80011a6:	2304      	movs	r3, #4
 80011a8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2C2_COMM_SDA_GPIO_Port, &GPIO_InitStruct);
 80011aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ae:	4619      	mov	r1, r3
 80011b0:	4817      	ldr	r0, [pc, #92]	; (8001210 <HAL_I2C_MspInit+0x170>)
 80011b2:	f000 facf 	bl	8001754 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2C2_COMM_SCL_Pin;
 80011b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011bc:	2312      	movs	r3, #18
 80011be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011c0:	2301      	movs	r3, #1
 80011c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c4:	2300      	movs	r3, #0
 80011c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80011c8:	2304      	movs	r3, #4
 80011ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2C2_COMM_SCL_GPIO_Port, &GPIO_InitStruct);
 80011cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011d0:	4619      	mov	r1, r3
 80011d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011d6:	f000 fabd 	bl	8001754 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80011da:	4b09      	ldr	r3, [pc, #36]	; (8001200 <HAL_I2C_MspInit+0x160>)
 80011dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011de:	4a08      	ldr	r2, [pc, #32]	; (8001200 <HAL_I2C_MspInit+0x160>)
 80011e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011e4:	6593      	str	r3, [r2, #88]	; 0x58
 80011e6:	4b06      	ldr	r3, [pc, #24]	; (8001200 <HAL_I2C_MspInit+0x160>)
 80011e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	68fb      	ldr	r3, [r7, #12]
}
 80011f2:	bf00      	nop
 80011f4:	3738      	adds	r7, #56	; 0x38
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40005400 	.word	0x40005400
 8001200:	40021000 	.word	0x40021000
 8001204:	48000400 	.word	0x48000400
 8001208:	40010000 	.word	0x40010000
 800120c:	40005800 	.word	0x40005800
 8001210:	48001400 	.word	0x48001400

08001214 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001224:	d113      	bne.n	800124e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001226:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <HAL_TIM_Base_MspInit+0x44>)
 8001228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800122a:	4a0b      	ldr	r2, [pc, #44]	; (8001258 <HAL_TIM_Base_MspInit+0x44>)
 800122c:	f043 0301 	orr.w	r3, r3, #1
 8001230:	6593      	str	r3, [r2, #88]	; 0x58
 8001232:	4b09      	ldr	r3, [pc, #36]	; (8001258 <HAL_TIM_Base_MspInit+0x44>)
 8001234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001236:	f003 0301 	and.w	r3, r3, #1
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800123e:	2200      	movs	r2, #0
 8001240:	2100      	movs	r1, #0
 8001242:	201c      	movs	r0, #28
 8001244:	f000 fa51 	bl	80016ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001248:	201c      	movs	r0, #28
 800124a:	f000 fa68 	bl	800171e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800124e:	bf00      	nop
 8001250:	3710      	adds	r7, #16
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40021000 	.word	0x40021000

0800125c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b08a      	sub	sp, #40	; 0x28
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001264:	f107 0314 	add.w	r3, r7, #20
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	605a      	str	r2, [r3, #4]
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	60da      	str	r2, [r3, #12]
 8001272:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a26      	ldr	r2, [pc, #152]	; (8001314 <HAL_UART_MspInit+0xb8>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d145      	bne.n	800130a <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800127e:	4b26      	ldr	r3, [pc, #152]	; (8001318 <HAL_UART_MspInit+0xbc>)
 8001280:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001282:	4a25      	ldr	r2, [pc, #148]	; (8001318 <HAL_UART_MspInit+0xbc>)
 8001284:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001288:	6613      	str	r3, [r2, #96]	; 0x60
 800128a:	4b23      	ldr	r3, [pc, #140]	; (8001318 <HAL_UART_MspInit+0xbc>)
 800128c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800128e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001292:	613b      	str	r3, [r7, #16]
 8001294:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001296:	4b20      	ldr	r3, [pc, #128]	; (8001318 <HAL_UART_MspInit+0xbc>)
 8001298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800129a:	4a1f      	ldr	r2, [pc, #124]	; (8001318 <HAL_UART_MspInit+0xbc>)
 800129c:	f043 0301 	orr.w	r3, r3, #1
 80012a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012a2:	4b1d      	ldr	r3, [pc, #116]	; (8001318 <HAL_UART_MspInit+0xbc>)
 80012a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ae:	4b1a      	ldr	r3, [pc, #104]	; (8001318 <HAL_UART_MspInit+0xbc>)
 80012b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b2:	4a19      	ldr	r2, [pc, #100]	; (8001318 <HAL_UART_MspInit+0xbc>)
 80012b4:	f043 0302 	orr.w	r3, r3, #2
 80012b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ba:	4b17      	ldr	r3, [pc, #92]	; (8001318 <HAL_UART_MspInit+0xbc>)
 80012bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012be:	f003 0302 	and.w	r3, r3, #2
 80012c2:	60bb      	str	r3, [r7, #8]
 80012c4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80012c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012cc:	2302      	movs	r3, #2
 80012ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d4:	2300      	movs	r3, #0
 80012d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012d8:	2307      	movs	r3, #7
 80012da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012dc:	f107 0314 	add.w	r3, r7, #20
 80012e0:	4619      	mov	r1, r3
 80012e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012e6:	f000 fa35 	bl	8001754 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80012ea:	2340      	movs	r3, #64	; 0x40
 80012ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ee:	2302      	movs	r3, #2
 80012f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f6:	2300      	movs	r3, #0
 80012f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012fa:	2307      	movs	r3, #7
 80012fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012fe:	f107 0314 	add.w	r3, r7, #20
 8001302:	4619      	mov	r1, r3
 8001304:	4805      	ldr	r0, [pc, #20]	; (800131c <HAL_UART_MspInit+0xc0>)
 8001306:	f000 fa25 	bl	8001754 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800130a:	bf00      	nop
 800130c:	3728      	adds	r7, #40	; 0x28
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40013800 	.word	0x40013800
 8001318:	40021000 	.word	0x40021000
 800131c:	48000400 	.word	0x48000400

08001320 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001324:	bf00      	nop
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr

0800132e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800132e:	b480      	push	{r7}
 8001330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001332:	e7fe      	b.n	8001332 <HardFault_Handler+0x4>

08001334 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001338:	e7fe      	b.n	8001338 <MemManage_Handler+0x4>

0800133a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800133a:	b480      	push	{r7}
 800133c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800133e:	e7fe      	b.n	800133e <BusFault_Handler+0x4>

08001340 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001344:	e7fe      	b.n	8001344 <UsageFault_Handler+0x4>

08001346 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001346:	b480      	push	{r7}
 8001348:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800134a:	bf00      	nop
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001358:	bf00      	nop
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr

08001362 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001362:	b480      	push	{r7}
 8001364:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001366:	bf00      	nop
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001374:	f000 f89e 	bl	80014b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001378:	bf00      	nop
 800137a:	bd80      	pop	{r7, pc}

0800137c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001380:	4802      	ldr	r0, [pc, #8]	; (800138c <TIM2_IRQHandler+0x10>)
 8001382:	f001 ffc3 	bl	800330c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	20000150 	.word	0x20000150

08001390 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001394:	4b08      	ldr	r3, [pc, #32]	; (80013b8 <SystemInit+0x28>)
 8001396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800139a:	4a07      	ldr	r2, [pc, #28]	; (80013b8 <SystemInit+0x28>)
 800139c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80013a4:	4b04      	ldr	r3, [pc, #16]	; (80013b8 <SystemInit+0x28>)
 80013a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013aa:	609a      	str	r2, [r3, #8]
#endif
}
 80013ac:	bf00      	nop
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	e000ed00 	.word	0xe000ed00

080013bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80013bc:	480d      	ldr	r0, [pc, #52]	; (80013f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80013be:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013c0:	480d      	ldr	r0, [pc, #52]	; (80013f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80013c2:	490e      	ldr	r1, [pc, #56]	; (80013fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80013c4:	4a0e      	ldr	r2, [pc, #56]	; (8001400 <LoopForever+0xe>)
  movs r3, #0
 80013c6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80013c8:	e002      	b.n	80013d0 <LoopCopyDataInit>

080013ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ce:	3304      	adds	r3, #4

080013d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013d4:	d3f9      	bcc.n	80013ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013d6:	4a0b      	ldr	r2, [pc, #44]	; (8001404 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013d8:	4c0b      	ldr	r4, [pc, #44]	; (8001408 <LoopForever+0x16>)
  movs r3, #0
 80013da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013dc:	e001      	b.n	80013e2 <LoopFillZerobss>

080013de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013e0:	3204      	adds	r2, #4

080013e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013e4:	d3fb      	bcc.n	80013de <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013e6:	f7ff ffd3 	bl	8001390 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013ea:	f003 f97d 	bl	80046e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013ee:	f7ff f893 	bl	8000518 <main>

080013f2 <LoopForever>:

LoopForever:
    b LoopForever
 80013f2:	e7fe      	b.n	80013f2 <LoopForever>
  ldr   r0, =_estack
 80013f4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80013f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013fc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001400:	080047b4 	.word	0x080047b4
  ldr r2, =_sbss
 8001404:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001408:	200001a0 	.word	0x200001a0

0800140c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800140c:	e7fe      	b.n	800140c <ADC1_2_IRQHandler>

0800140e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800140e:	b580      	push	{r7, lr}
 8001410:	b082      	sub	sp, #8
 8001412:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001414:	2300      	movs	r3, #0
 8001416:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001418:	2003      	movs	r0, #3
 800141a:	f000 f95b 	bl	80016d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800141e:	2000      	movs	r0, #0
 8001420:	f000 f80e 	bl	8001440 <HAL_InitTick>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d002      	beq.n	8001430 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	71fb      	strb	r3, [r7, #7]
 800142e:	e001      	b.n	8001434 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001430:	f7ff fe12 	bl	8001058 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001434:	79fb      	ldrb	r3, [r7, #7]

}
 8001436:	4618      	mov	r0, r3
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
	...

08001440 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001448:	2300      	movs	r3, #0
 800144a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800144c:	4b16      	ldr	r3, [pc, #88]	; (80014a8 <HAL_InitTick+0x68>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d022      	beq.n	800149a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001454:	4b15      	ldr	r3, [pc, #84]	; (80014ac <HAL_InitTick+0x6c>)
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	4b13      	ldr	r3, [pc, #76]	; (80014a8 <HAL_InitTick+0x68>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001460:	fbb1 f3f3 	udiv	r3, r1, r3
 8001464:	fbb2 f3f3 	udiv	r3, r2, r3
 8001468:	4618      	mov	r0, r3
 800146a:	f000 f966 	bl	800173a <HAL_SYSTICK_Config>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d10f      	bne.n	8001494 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2b0f      	cmp	r3, #15
 8001478:	d809      	bhi.n	800148e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800147a:	2200      	movs	r2, #0
 800147c:	6879      	ldr	r1, [r7, #4]
 800147e:	f04f 30ff 	mov.w	r0, #4294967295
 8001482:	f000 f932 	bl	80016ea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001486:	4a0a      	ldr	r2, [pc, #40]	; (80014b0 <HAL_InitTick+0x70>)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6013      	str	r3, [r2, #0]
 800148c:	e007      	b.n	800149e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	73fb      	strb	r3, [r7, #15]
 8001492:	e004      	b.n	800149e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	73fb      	strb	r3, [r7, #15]
 8001498:	e001      	b.n	800149e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800149e:	7bfb      	ldrb	r3, [r7, #15]
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3710      	adds	r7, #16
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	20000008 	.word	0x20000008
 80014ac:	20000000 	.word	0x20000000
 80014b0:	20000004 	.word	0x20000004

080014b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014b8:	4b05      	ldr	r3, [pc, #20]	; (80014d0 <HAL_IncTick+0x1c>)
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	4b05      	ldr	r3, [pc, #20]	; (80014d4 <HAL_IncTick+0x20>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4413      	add	r3, r2
 80014c2:	4a03      	ldr	r2, [pc, #12]	; (80014d0 <HAL_IncTick+0x1c>)
 80014c4:	6013      	str	r3, [r2, #0]
}
 80014c6:	bf00      	nop
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	2000019c 	.word	0x2000019c
 80014d4:	20000008 	.word	0x20000008

080014d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  return uwTick;
 80014dc:	4b03      	ldr	r3, [pc, #12]	; (80014ec <HAL_GetTick+0x14>)
 80014de:	681b      	ldr	r3, [r3, #0]
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	2000019c 	.word	0x2000019c

080014f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014f8:	f7ff ffee 	bl	80014d8 <HAL_GetTick>
 80014fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001508:	d004      	beq.n	8001514 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800150a:	4b09      	ldr	r3, [pc, #36]	; (8001530 <HAL_Delay+0x40>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	68fa      	ldr	r2, [r7, #12]
 8001510:	4413      	add	r3, r2
 8001512:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001514:	bf00      	nop
 8001516:	f7ff ffdf 	bl	80014d8 <HAL_GetTick>
 800151a:	4602      	mov	r2, r0
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	68fa      	ldr	r2, [r7, #12]
 8001522:	429a      	cmp	r2, r3
 8001524:	d8f7      	bhi.n	8001516 <HAL_Delay+0x26>
  {
  }
}
 8001526:	bf00      	nop
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	20000008 	.word	0x20000008

08001534 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001534:	b480      	push	{r7}
 8001536:	b085      	sub	sp, #20
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	f003 0307 	and.w	r3, r3, #7
 8001542:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001544:	4b0c      	ldr	r3, [pc, #48]	; (8001578 <__NVIC_SetPriorityGrouping+0x44>)
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800154a:	68ba      	ldr	r2, [r7, #8]
 800154c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001550:	4013      	ands	r3, r2
 8001552:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800155c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001560:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001564:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001566:	4a04      	ldr	r2, [pc, #16]	; (8001578 <__NVIC_SetPriorityGrouping+0x44>)
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	60d3      	str	r3, [r2, #12]
}
 800156c:	bf00      	nop
 800156e:	3714      	adds	r7, #20
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr
 8001578:	e000ed00 	.word	0xe000ed00

0800157c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001580:	4b04      	ldr	r3, [pc, #16]	; (8001594 <__NVIC_GetPriorityGrouping+0x18>)
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	0a1b      	lsrs	r3, r3, #8
 8001586:	f003 0307 	and.w	r3, r3, #7
}
 800158a:	4618      	mov	r0, r3
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr
 8001594:	e000ed00 	.word	0xe000ed00

08001598 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	4603      	mov	r3, r0
 80015a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	db0b      	blt.n	80015c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015aa:	79fb      	ldrb	r3, [r7, #7]
 80015ac:	f003 021f 	and.w	r2, r3, #31
 80015b0:	4907      	ldr	r1, [pc, #28]	; (80015d0 <__NVIC_EnableIRQ+0x38>)
 80015b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b6:	095b      	lsrs	r3, r3, #5
 80015b8:	2001      	movs	r0, #1
 80015ba:	fa00 f202 	lsl.w	r2, r0, r2
 80015be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015c2:	bf00      	nop
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	e000e100 	.word	0xe000e100

080015d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	4603      	mov	r3, r0
 80015dc:	6039      	str	r1, [r7, #0]
 80015de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	db0a      	blt.n	80015fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	b2da      	uxtb	r2, r3
 80015ec:	490c      	ldr	r1, [pc, #48]	; (8001620 <__NVIC_SetPriority+0x4c>)
 80015ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f2:	0112      	lsls	r2, r2, #4
 80015f4:	b2d2      	uxtb	r2, r2
 80015f6:	440b      	add	r3, r1
 80015f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015fc:	e00a      	b.n	8001614 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	b2da      	uxtb	r2, r3
 8001602:	4908      	ldr	r1, [pc, #32]	; (8001624 <__NVIC_SetPriority+0x50>)
 8001604:	79fb      	ldrb	r3, [r7, #7]
 8001606:	f003 030f 	and.w	r3, r3, #15
 800160a:	3b04      	subs	r3, #4
 800160c:	0112      	lsls	r2, r2, #4
 800160e:	b2d2      	uxtb	r2, r2
 8001610:	440b      	add	r3, r1
 8001612:	761a      	strb	r2, [r3, #24]
}
 8001614:	bf00      	nop
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr
 8001620:	e000e100 	.word	0xe000e100
 8001624:	e000ed00 	.word	0xe000ed00

08001628 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001628:	b480      	push	{r7}
 800162a:	b089      	sub	sp, #36	; 0x24
 800162c:	af00      	add	r7, sp, #0
 800162e:	60f8      	str	r0, [r7, #12]
 8001630:	60b9      	str	r1, [r7, #8]
 8001632:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	f003 0307 	and.w	r3, r3, #7
 800163a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	f1c3 0307 	rsb	r3, r3, #7
 8001642:	2b04      	cmp	r3, #4
 8001644:	bf28      	it	cs
 8001646:	2304      	movcs	r3, #4
 8001648:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	3304      	adds	r3, #4
 800164e:	2b06      	cmp	r3, #6
 8001650:	d902      	bls.n	8001658 <NVIC_EncodePriority+0x30>
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	3b03      	subs	r3, #3
 8001656:	e000      	b.n	800165a <NVIC_EncodePriority+0x32>
 8001658:	2300      	movs	r3, #0
 800165a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800165c:	f04f 32ff 	mov.w	r2, #4294967295
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	fa02 f303 	lsl.w	r3, r2, r3
 8001666:	43da      	mvns	r2, r3
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	401a      	ands	r2, r3
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001670:	f04f 31ff 	mov.w	r1, #4294967295
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	fa01 f303 	lsl.w	r3, r1, r3
 800167a:	43d9      	mvns	r1, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001680:	4313      	orrs	r3, r2
         );
}
 8001682:	4618      	mov	r0, r3
 8001684:	3724      	adds	r7, #36	; 0x24
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
	...

08001690 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	3b01      	subs	r3, #1
 800169c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016a0:	d301      	bcc.n	80016a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016a2:	2301      	movs	r3, #1
 80016a4:	e00f      	b.n	80016c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016a6:	4a0a      	ldr	r2, [pc, #40]	; (80016d0 <SysTick_Config+0x40>)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	3b01      	subs	r3, #1
 80016ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016ae:	210f      	movs	r1, #15
 80016b0:	f04f 30ff 	mov.w	r0, #4294967295
 80016b4:	f7ff ff8e 	bl	80015d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016b8:	4b05      	ldr	r3, [pc, #20]	; (80016d0 <SysTick_Config+0x40>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016be:	4b04      	ldr	r3, [pc, #16]	; (80016d0 <SysTick_Config+0x40>)
 80016c0:	2207      	movs	r2, #7
 80016c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016c4:	2300      	movs	r3, #0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	e000e010 	.word	0xe000e010

080016d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f7ff ff29 	bl	8001534 <__NVIC_SetPriorityGrouping>
}
 80016e2:	bf00      	nop
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b086      	sub	sp, #24
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	4603      	mov	r3, r0
 80016f2:	60b9      	str	r1, [r7, #8]
 80016f4:	607a      	str	r2, [r7, #4]
 80016f6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016f8:	f7ff ff40 	bl	800157c <__NVIC_GetPriorityGrouping>
 80016fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	68b9      	ldr	r1, [r7, #8]
 8001702:	6978      	ldr	r0, [r7, #20]
 8001704:	f7ff ff90 	bl	8001628 <NVIC_EncodePriority>
 8001708:	4602      	mov	r2, r0
 800170a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800170e:	4611      	mov	r1, r2
 8001710:	4618      	mov	r0, r3
 8001712:	f7ff ff5f 	bl	80015d4 <__NVIC_SetPriority>
}
 8001716:	bf00      	nop
 8001718:	3718      	adds	r7, #24
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800171e:	b580      	push	{r7, lr}
 8001720:	b082      	sub	sp, #8
 8001722:	af00      	add	r7, sp, #0
 8001724:	4603      	mov	r3, r0
 8001726:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001728:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff ff33 	bl	8001598 <__NVIC_EnableIRQ>
}
 8001732:	bf00      	nop
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	b082      	sub	sp, #8
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f7ff ffa4 	bl	8001690 <SysTick_Config>
 8001748:	4603      	mov	r3, r0
}
 800174a:	4618      	mov	r0, r3
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
	...

08001754 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001754:	b480      	push	{r7}
 8001756:	b087      	sub	sp, #28
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800175e:	2300      	movs	r3, #0
 8001760:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001762:	e15a      	b.n	8001a1a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	2101      	movs	r1, #1
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	fa01 f303 	lsl.w	r3, r1, r3
 8001770:	4013      	ands	r3, r2
 8001772:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	2b00      	cmp	r3, #0
 8001778:	f000 814c 	beq.w	8001a14 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	2b01      	cmp	r3, #1
 8001782:	d00b      	beq.n	800179c <HAL_GPIO_Init+0x48>
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	2b02      	cmp	r3, #2
 800178a:	d007      	beq.n	800179c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001790:	2b11      	cmp	r3, #17
 8001792:	d003      	beq.n	800179c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	2b12      	cmp	r3, #18
 800179a:	d130      	bne.n	80017fe <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	2203      	movs	r2, #3
 80017a8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ac:	43db      	mvns	r3, r3
 80017ae:	693a      	ldr	r2, [r7, #16]
 80017b0:	4013      	ands	r3, r2
 80017b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	68da      	ldr	r2, [r3, #12]
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	693a      	ldr	r2, [r7, #16]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	693a      	ldr	r2, [r7, #16]
 80017ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017d2:	2201      	movs	r2, #1
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	fa02 f303 	lsl.w	r3, r2, r3
 80017da:	43db      	mvns	r3, r3
 80017dc:	693a      	ldr	r2, [r7, #16]
 80017de:	4013      	ands	r3, r2
 80017e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	091b      	lsrs	r3, r3, #4
 80017e8:	f003 0201 	and.w	r2, r3, #1
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	fa02 f303 	lsl.w	r3, r2, r3
 80017f2:	693a      	ldr	r2, [r7, #16]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	68db      	ldr	r3, [r3, #12]
 8001802:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	2203      	movs	r2, #3
 800180a:	fa02 f303 	lsl.w	r3, r2, r3
 800180e:	43db      	mvns	r3, r3
 8001810:	693a      	ldr	r2, [r7, #16]
 8001812:	4013      	ands	r3, r2
 8001814:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	689a      	ldr	r2, [r3, #8]
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	fa02 f303 	lsl.w	r3, r2, r3
 8001822:	693a      	ldr	r2, [r7, #16]
 8001824:	4313      	orrs	r3, r2
 8001826:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	2b02      	cmp	r3, #2
 8001834:	d003      	beq.n	800183e <HAL_GPIO_Init+0xea>
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	2b12      	cmp	r3, #18
 800183c:	d123      	bne.n	8001886 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	08da      	lsrs	r2, r3, #3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	3208      	adds	r2, #8
 8001846:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800184a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	f003 0307 	and.w	r3, r3, #7
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	220f      	movs	r2, #15
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	43db      	mvns	r3, r3
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	4013      	ands	r3, r2
 8001860:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	691a      	ldr	r2, [r3, #16]
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	f003 0307 	and.w	r3, r3, #7
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	4313      	orrs	r3, r2
 8001876:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	08da      	lsrs	r2, r3, #3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	3208      	adds	r2, #8
 8001880:	6939      	ldr	r1, [r7, #16]
 8001882:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	2203      	movs	r2, #3
 8001892:	fa02 f303 	lsl.w	r3, r2, r3
 8001896:	43db      	mvns	r3, r3
 8001898:	693a      	ldr	r2, [r7, #16]
 800189a:	4013      	ands	r3, r2
 800189c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f003 0203 	and.w	r2, r3, #3
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	fa02 f303 	lsl.w	r3, r2, r3
 80018ae:	693a      	ldr	r2, [r7, #16]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	f000 80a6 	beq.w	8001a14 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018c8:	4b5b      	ldr	r3, [pc, #364]	; (8001a38 <HAL_GPIO_Init+0x2e4>)
 80018ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018cc:	4a5a      	ldr	r2, [pc, #360]	; (8001a38 <HAL_GPIO_Init+0x2e4>)
 80018ce:	f043 0301 	orr.w	r3, r3, #1
 80018d2:	6613      	str	r3, [r2, #96]	; 0x60
 80018d4:	4b58      	ldr	r3, [pc, #352]	; (8001a38 <HAL_GPIO_Init+0x2e4>)
 80018d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018d8:	f003 0301 	and.w	r3, r3, #1
 80018dc:	60bb      	str	r3, [r7, #8]
 80018de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018e0:	4a56      	ldr	r2, [pc, #344]	; (8001a3c <HAL_GPIO_Init+0x2e8>)
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	089b      	lsrs	r3, r3, #2
 80018e6:	3302      	adds	r3, #2
 80018e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	f003 0303 	and.w	r3, r3, #3
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	220f      	movs	r2, #15
 80018f8:	fa02 f303 	lsl.w	r3, r2, r3
 80018fc:	43db      	mvns	r3, r3
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	4013      	ands	r3, r2
 8001902:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800190a:	d01f      	beq.n	800194c <HAL_GPIO_Init+0x1f8>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4a4c      	ldr	r2, [pc, #304]	; (8001a40 <HAL_GPIO_Init+0x2ec>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d019      	beq.n	8001948 <HAL_GPIO_Init+0x1f4>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	4a4b      	ldr	r2, [pc, #300]	; (8001a44 <HAL_GPIO_Init+0x2f0>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d013      	beq.n	8001944 <HAL_GPIO_Init+0x1f0>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	4a4a      	ldr	r2, [pc, #296]	; (8001a48 <HAL_GPIO_Init+0x2f4>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d00d      	beq.n	8001940 <HAL_GPIO_Init+0x1ec>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	4a49      	ldr	r2, [pc, #292]	; (8001a4c <HAL_GPIO_Init+0x2f8>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d007      	beq.n	800193c <HAL_GPIO_Init+0x1e8>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	4a48      	ldr	r2, [pc, #288]	; (8001a50 <HAL_GPIO_Init+0x2fc>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d101      	bne.n	8001938 <HAL_GPIO_Init+0x1e4>
 8001934:	2305      	movs	r3, #5
 8001936:	e00a      	b.n	800194e <HAL_GPIO_Init+0x1fa>
 8001938:	2306      	movs	r3, #6
 800193a:	e008      	b.n	800194e <HAL_GPIO_Init+0x1fa>
 800193c:	2304      	movs	r3, #4
 800193e:	e006      	b.n	800194e <HAL_GPIO_Init+0x1fa>
 8001940:	2303      	movs	r3, #3
 8001942:	e004      	b.n	800194e <HAL_GPIO_Init+0x1fa>
 8001944:	2302      	movs	r3, #2
 8001946:	e002      	b.n	800194e <HAL_GPIO_Init+0x1fa>
 8001948:	2301      	movs	r3, #1
 800194a:	e000      	b.n	800194e <HAL_GPIO_Init+0x1fa>
 800194c:	2300      	movs	r3, #0
 800194e:	697a      	ldr	r2, [r7, #20]
 8001950:	f002 0203 	and.w	r2, r2, #3
 8001954:	0092      	lsls	r2, r2, #2
 8001956:	4093      	lsls	r3, r2
 8001958:	693a      	ldr	r2, [r7, #16]
 800195a:	4313      	orrs	r3, r2
 800195c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800195e:	4937      	ldr	r1, [pc, #220]	; (8001a3c <HAL_GPIO_Init+0x2e8>)
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	089b      	lsrs	r3, r3, #2
 8001964:	3302      	adds	r3, #2
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800196c:	4b39      	ldr	r3, [pc, #228]	; (8001a54 <HAL_GPIO_Init+0x300>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	43db      	mvns	r3, r3
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	4013      	ands	r3, r2
 800197a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001984:	2b00      	cmp	r3, #0
 8001986:	d003      	beq.n	8001990 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001988:	693a      	ldr	r2, [r7, #16]
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	4313      	orrs	r3, r2
 800198e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001990:	4a30      	ldr	r2, [pc, #192]	; (8001a54 <HAL_GPIO_Init+0x300>)
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001996:	4b2f      	ldr	r3, [pc, #188]	; (8001a54 <HAL_GPIO_Init+0x300>)
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	43db      	mvns	r3, r3
 80019a0:	693a      	ldr	r2, [r7, #16]
 80019a2:	4013      	ands	r3, r2
 80019a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d003      	beq.n	80019ba <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80019ba:	4a26      	ldr	r2, [pc, #152]	; (8001a54 <HAL_GPIO_Init+0x300>)
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80019c0:	4b24      	ldr	r3, [pc, #144]	; (8001a54 <HAL_GPIO_Init+0x300>)
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	43db      	mvns	r3, r3
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	4013      	ands	r3, r2
 80019ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d003      	beq.n	80019e4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80019dc:	693a      	ldr	r2, [r7, #16]
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80019e4:	4a1b      	ldr	r2, [pc, #108]	; (8001a54 <HAL_GPIO_Init+0x300>)
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80019ea:	4b1a      	ldr	r3, [pc, #104]	; (8001a54 <HAL_GPIO_Init+0x300>)
 80019ec:	68db      	ldr	r3, [r3, #12]
 80019ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	43db      	mvns	r3, r3
 80019f4:	693a      	ldr	r2, [r7, #16]
 80019f6:	4013      	ands	r3, r2
 80019f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d003      	beq.n	8001a0e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a0e:	4a11      	ldr	r2, [pc, #68]	; (8001a54 <HAL_GPIO_Init+0x300>)
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	3301      	adds	r3, #1
 8001a18:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	fa22 f303 	lsr.w	r3, r2, r3
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	f47f ae9d 	bne.w	8001764 <HAL_GPIO_Init+0x10>
  }
}
 8001a2a:	bf00      	nop
 8001a2c:	371c      	adds	r7, #28
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	40010000 	.word	0x40010000
 8001a40:	48000400 	.word	0x48000400
 8001a44:	48000800 	.word	0x48000800
 8001a48:	48000c00 	.word	0x48000c00
 8001a4c:	48001000 	.word	0x48001000
 8001a50:	48001400 	.word	0x48001400
 8001a54:	40010400 	.word	0x40010400

08001a58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	460b      	mov	r3, r1
 8001a62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	691a      	ldr	r2, [r3, #16]
 8001a68:	887b      	ldrh	r3, [r7, #2]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d002      	beq.n	8001a76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a70:	2301      	movs	r3, #1
 8001a72:	73fb      	strb	r3, [r7, #15]
 8001a74:	e001      	b.n	8001a7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a76:	2300      	movs	r3, #0
 8001a78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3714      	adds	r7, #20
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	460b      	mov	r3, r1
 8001a92:	807b      	strh	r3, [r7, #2]
 8001a94:	4613      	mov	r3, r2
 8001a96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a98:	787b      	ldrb	r3, [r7, #1]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d003      	beq.n	8001aa6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a9e:	887a      	ldrh	r2, [r7, #2]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001aa4:	e002      	b.n	8001aac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001aa6:	887a      	ldrh	r2, [r7, #2]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001aac:	bf00      	nop
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d101      	bne.n	8001aca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e081      	b.n	8001bce <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d106      	bne.n	8001ae4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f7ff fade 	bl	80010a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2224      	movs	r2, #36	; 0x24
 8001ae8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f022 0201 	bic.w	r2, r2, #1
 8001afa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	685a      	ldr	r2, [r3, #4]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b08:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	689a      	ldr	r2, [r3, #8]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b18:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d107      	bne.n	8001b32 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	689a      	ldr	r2, [r3, #8]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b2e:	609a      	str	r2, [r3, #8]
 8001b30:	e006      	b.n	8001b40 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	689a      	ldr	r2, [r3, #8]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001b3e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d104      	bne.n	8001b52 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b50:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	6812      	ldr	r2, [r2, #0]
 8001b5c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b64:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	68da      	ldr	r2, [r3, #12]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b74:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	691a      	ldr	r2, [r3, #16]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	695b      	ldr	r3, [r3, #20]
 8001b7e:	ea42 0103 	orr.w	r1, r2, r3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	699b      	ldr	r3, [r3, #24]
 8001b86:	021a      	lsls	r2, r3, #8
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	430a      	orrs	r2, r1
 8001b8e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	69d9      	ldr	r1, [r3, #28]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6a1a      	ldr	r2, [r3, #32]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	430a      	orrs	r2, r1
 8001b9e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f042 0201 	orr.w	r2, r2, #1
 8001bae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2220      	movs	r2, #32
 8001bba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
	...

08001bd8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b088      	sub	sp, #32
 8001bdc:	af02      	add	r7, sp, #8
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	607a      	str	r2, [r7, #4]
 8001be2:	461a      	mov	r2, r3
 8001be4:	460b      	mov	r3, r1
 8001be6:	817b      	strh	r3, [r7, #10]
 8001be8:	4613      	mov	r3, r2
 8001bea:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	2b20      	cmp	r3, #32
 8001bf6:	f040 80da 	bne.w	8001dae <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d101      	bne.n	8001c08 <HAL_I2C_Master_Transmit+0x30>
 8001c04:	2302      	movs	r3, #2
 8001c06:	e0d3      	b.n	8001db0 <HAL_I2C_Master_Transmit+0x1d8>
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001c10:	f7ff fc62 	bl	80014d8 <HAL_GetTick>
 8001c14:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	9300      	str	r3, [sp, #0]
 8001c1a:	2319      	movs	r3, #25
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c22:	68f8      	ldr	r0, [r7, #12]
 8001c24:	f000 f8f0 	bl	8001e08 <I2C_WaitOnFlagUntilTimeout>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e0be      	b.n	8001db0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2221      	movs	r2, #33	; 0x21
 8001c36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2210      	movs	r2, #16
 8001c3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2200      	movs	r2, #0
 8001c46:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	893a      	ldrh	r2, [r7, #8]
 8001c52:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2200      	movs	r2, #0
 8001c58:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c5e:	b29b      	uxth	r3, r3
 8001c60:	2bff      	cmp	r3, #255	; 0xff
 8001c62:	d90e      	bls.n	8001c82 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	22ff      	movs	r2, #255	; 0xff
 8001c68:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c6e:	b2da      	uxtb	r2, r3
 8001c70:	8979      	ldrh	r1, [r7, #10]
 8001c72:	4b51      	ldr	r3, [pc, #324]	; (8001db8 <HAL_I2C_Master_Transmit+0x1e0>)
 8001c74:	9300      	str	r3, [sp, #0]
 8001c76:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c7a:	68f8      	ldr	r0, [r7, #12]
 8001c7c:	f000 f9e6 	bl	800204c <I2C_TransferConfig>
 8001c80:	e06c      	b.n	8001d5c <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c86:	b29a      	uxth	r2, r3
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c90:	b2da      	uxtb	r2, r3
 8001c92:	8979      	ldrh	r1, [r7, #10]
 8001c94:	4b48      	ldr	r3, [pc, #288]	; (8001db8 <HAL_I2C_Master_Transmit+0x1e0>)
 8001c96:	9300      	str	r3, [sp, #0]
 8001c98:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c9c:	68f8      	ldr	r0, [r7, #12]
 8001c9e:	f000 f9d5 	bl	800204c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001ca2:	e05b      	b.n	8001d5c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ca4:	697a      	ldr	r2, [r7, #20]
 8001ca6:	6a39      	ldr	r1, [r7, #32]
 8001ca8:	68f8      	ldr	r0, [r7, #12]
 8001caa:	f000 f8ed 	bl	8001e88 <I2C_WaitOnTXISFlagUntilTimeout>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e07b      	b.n	8001db0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cbc:	781a      	ldrb	r2, [r3, #0]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc8:	1c5a      	adds	r2, r3, #1
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	3b01      	subs	r3, #1
 8001cd6:	b29a      	uxth	r2, r3
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ce0:	3b01      	subs	r3, #1
 8001ce2:	b29a      	uxth	r2, r3
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d034      	beq.n	8001d5c <HAL_I2C_Master_Transmit+0x184>
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d130      	bne.n	8001d5c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	9300      	str	r3, [sp, #0]
 8001cfe:	6a3b      	ldr	r3, [r7, #32]
 8001d00:	2200      	movs	r2, #0
 8001d02:	2180      	movs	r1, #128	; 0x80
 8001d04:	68f8      	ldr	r0, [r7, #12]
 8001d06:	f000 f87f 	bl	8001e08 <I2C_WaitOnFlagUntilTimeout>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e04d      	b.n	8001db0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	2bff      	cmp	r3, #255	; 0xff
 8001d1c:	d90e      	bls.n	8001d3c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	22ff      	movs	r2, #255	; 0xff
 8001d22:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d28:	b2da      	uxtb	r2, r3
 8001d2a:	8979      	ldrh	r1, [r7, #10]
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	9300      	str	r3, [sp, #0]
 8001d30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d34:	68f8      	ldr	r0, [r7, #12]
 8001d36:	f000 f989 	bl	800204c <I2C_TransferConfig>
 8001d3a:	e00f      	b.n	8001d5c <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d40:	b29a      	uxth	r2, r3
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d4a:	b2da      	uxtb	r2, r3
 8001d4c:	8979      	ldrh	r1, [r7, #10]
 8001d4e:	2300      	movs	r3, #0
 8001d50:	9300      	str	r3, [sp, #0]
 8001d52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d56:	68f8      	ldr	r0, [r7, #12]
 8001d58:	f000 f978 	bl	800204c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d19e      	bne.n	8001ca4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d66:	697a      	ldr	r2, [r7, #20]
 8001d68:	6a39      	ldr	r1, [r7, #32]
 8001d6a:	68f8      	ldr	r0, [r7, #12]
 8001d6c:	f000 f8cc 	bl	8001f08 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e01a      	b.n	8001db0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	2220      	movs	r2, #32
 8001d80:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	6859      	ldr	r1, [r3, #4]
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	4b0b      	ldr	r3, [pc, #44]	; (8001dbc <HAL_I2C_Master_Transmit+0x1e4>)
 8001d8e:	400b      	ands	r3, r1
 8001d90:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2220      	movs	r2, #32
 8001d96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001daa:	2300      	movs	r3, #0
 8001dac:	e000      	b.n	8001db0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001dae:	2302      	movs	r3, #2
  }
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3718      	adds	r7, #24
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	80002000 	.word	0x80002000
 8001dbc:	fe00e800 	.word	0xfe00e800

08001dc0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	699b      	ldr	r3, [r3, #24]
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d103      	bne.n	8001dde <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	f003 0301 	and.w	r3, r3, #1
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d007      	beq.n	8001dfc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	699a      	ldr	r2, [r3, #24]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f042 0201 	orr.w	r2, r2, #1
 8001dfa:	619a      	str	r2, [r3, #24]
  }
}
 8001dfc:	bf00      	nop
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	603b      	str	r3, [r7, #0]
 8001e14:	4613      	mov	r3, r2
 8001e16:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e18:	e022      	b.n	8001e60 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e20:	d01e      	beq.n	8001e60 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e22:	f7ff fb59 	bl	80014d8 <HAL_GetTick>
 8001e26:	4602      	mov	r2, r0
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	683a      	ldr	r2, [r7, #0]
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d302      	bcc.n	8001e38 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d113      	bne.n	8001e60 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e3c:	f043 0220 	orr.w	r2, r3, #32
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2220      	movs	r2, #32
 8001e48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2200      	movs	r2, #0
 8001e58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e00f      	b.n	8001e80 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	699a      	ldr	r2, [r3, #24]
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	68ba      	ldr	r2, [r7, #8]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	bf0c      	ite	eq
 8001e70:	2301      	moveq	r3, #1
 8001e72:	2300      	movne	r3, #0
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	461a      	mov	r2, r3
 8001e78:	79fb      	ldrb	r3, [r7, #7]
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d0cd      	beq.n	8001e1a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001e7e:	2300      	movs	r3, #0
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3710      	adds	r7, #16
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	60b9      	str	r1, [r7, #8]
 8001e92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001e94:	e02c      	b.n	8001ef0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	68b9      	ldr	r1, [r7, #8]
 8001e9a:	68f8      	ldr	r0, [r7, #12]
 8001e9c:	f000 f870 	bl	8001f80 <I2C_IsAcknowledgeFailed>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e02a      	b.n	8001f00 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eb0:	d01e      	beq.n	8001ef0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001eb2:	f7ff fb11 	bl	80014d8 <HAL_GetTick>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	68ba      	ldr	r2, [r7, #8]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d302      	bcc.n	8001ec8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d113      	bne.n	8001ef0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ecc:	f043 0220 	orr.w	r2, r3, #32
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2220      	movs	r2, #32
 8001ed8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e007      	b.n	8001f00 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	699b      	ldr	r3, [r3, #24]
 8001ef6:	f003 0302 	and.w	r3, r3, #2
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d1cb      	bne.n	8001e96 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3710      	adds	r7, #16
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	60f8      	str	r0, [r7, #12]
 8001f10:	60b9      	str	r1, [r7, #8]
 8001f12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f14:	e028      	b.n	8001f68 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	68b9      	ldr	r1, [r7, #8]
 8001f1a:	68f8      	ldr	r0, [r7, #12]
 8001f1c:	f000 f830 	bl	8001f80 <I2C_IsAcknowledgeFailed>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e026      	b.n	8001f78 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f2a:	f7ff fad5 	bl	80014d8 <HAL_GetTick>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	68ba      	ldr	r2, [r7, #8]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d302      	bcc.n	8001f40 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d113      	bne.n	8001f68 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f44:	f043 0220 	orr.w	r2, r3, #32
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2220      	movs	r2, #32
 8001f50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2200      	movs	r2, #0
 8001f58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e007      	b.n	8001f78 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	699b      	ldr	r3, [r3, #24]
 8001f6e:	f003 0320 	and.w	r3, r3, #32
 8001f72:	2b20      	cmp	r3, #32
 8001f74:	d1cf      	bne.n	8001f16 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001f76:	2300      	movs	r3, #0
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3710      	adds	r7, #16
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	60b9      	str	r1, [r7, #8]
 8001f8a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	699b      	ldr	r3, [r3, #24]
 8001f92:	f003 0310 	and.w	r3, r3, #16
 8001f96:	2b10      	cmp	r3, #16
 8001f98:	d151      	bne.n	800203e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f9a:	e022      	b.n	8001fe2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fa2:	d01e      	beq.n	8001fe2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fa4:	f7ff fa98 	bl	80014d8 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	68ba      	ldr	r2, [r7, #8]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d302      	bcc.n	8001fba <I2C_IsAcknowledgeFailed+0x3a>
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d113      	bne.n	8001fe2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fbe:	f043 0220 	orr.w	r2, r3, #32
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2220      	movs	r2, #32
 8001fca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e02e      	b.n	8002040 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	699b      	ldr	r3, [r3, #24]
 8001fe8:	f003 0320 	and.w	r3, r3, #32
 8001fec:	2b20      	cmp	r3, #32
 8001fee:	d1d5      	bne.n	8001f9c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2210      	movs	r2, #16
 8001ff6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2220      	movs	r2, #32
 8001ffe:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002000:	68f8      	ldr	r0, [r7, #12]
 8002002:	f7ff fedd 	bl	8001dc0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	6859      	ldr	r1, [r3, #4]
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	4b0d      	ldr	r3, [pc, #52]	; (8002048 <I2C_IsAcknowledgeFailed+0xc8>)
 8002012:	400b      	ands	r3, r1
 8002014:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201a:	f043 0204 	orr.w	r2, r3, #4
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2220      	movs	r2, #32
 8002026:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2200      	movs	r2, #0
 800202e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2200      	movs	r2, #0
 8002036:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e000      	b.n	8002040 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800203e:	2300      	movs	r3, #0
}
 8002040:	4618      	mov	r0, r3
 8002042:	3710      	adds	r7, #16
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	fe00e800 	.word	0xfe00e800

0800204c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800204c:	b480      	push	{r7}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	607b      	str	r3, [r7, #4]
 8002056:	460b      	mov	r3, r1
 8002058:	817b      	strh	r3, [r7, #10]
 800205a:	4613      	mov	r3, r2
 800205c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	685a      	ldr	r2, [r3, #4]
 8002064:	69bb      	ldr	r3, [r7, #24]
 8002066:	0d5b      	lsrs	r3, r3, #21
 8002068:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800206c:	4b0d      	ldr	r3, [pc, #52]	; (80020a4 <I2C_TransferConfig+0x58>)
 800206e:	430b      	orrs	r3, r1
 8002070:	43db      	mvns	r3, r3
 8002072:	ea02 0103 	and.w	r1, r2, r3
 8002076:	897b      	ldrh	r3, [r7, #10]
 8002078:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800207c:	7a7b      	ldrb	r3, [r7, #9]
 800207e:	041b      	lsls	r3, r3, #16
 8002080:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002084:	431a      	orrs	r2, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	431a      	orrs	r2, r3
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	431a      	orrs	r2, r3
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	430a      	orrs	r2, r1
 8002094:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002096:	bf00      	nop
 8002098:	3714      	adds	r7, #20
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	03ff63ff 	.word	0x03ff63ff

080020a8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	2b20      	cmp	r3, #32
 80020bc:	d138      	bne.n	8002130 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d101      	bne.n	80020cc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80020c8:	2302      	movs	r3, #2
 80020ca:	e032      	b.n	8002132 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2201      	movs	r2, #1
 80020d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2224      	movs	r2, #36	; 0x24
 80020d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f022 0201 	bic.w	r2, r2, #1
 80020ea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80020fa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	6819      	ldr	r1, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	683a      	ldr	r2, [r7, #0]
 8002108:	430a      	orrs	r2, r1
 800210a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f042 0201 	orr.w	r2, r2, #1
 800211a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2220      	movs	r2, #32
 8002120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2200      	movs	r2, #0
 8002128:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800212c:	2300      	movs	r3, #0
 800212e:	e000      	b.n	8002132 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002130:	2302      	movs	r3, #2
  }
}
 8002132:	4618      	mov	r0, r3
 8002134:	370c      	adds	r7, #12
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr

0800213e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800213e:	b480      	push	{r7}
 8002140:	b085      	sub	sp, #20
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]
 8002146:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800214e:	b2db      	uxtb	r3, r3
 8002150:	2b20      	cmp	r3, #32
 8002152:	d139      	bne.n	80021c8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800215a:	2b01      	cmp	r3, #1
 800215c:	d101      	bne.n	8002162 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800215e:	2302      	movs	r3, #2
 8002160:	e033      	b.n	80021ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2201      	movs	r2, #1
 8002166:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2224      	movs	r2, #36	; 0x24
 800216e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f022 0201 	bic.w	r2, r2, #1
 8002180:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002190:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	021b      	lsls	r3, r3, #8
 8002196:	68fa      	ldr	r2, [r7, #12]
 8002198:	4313      	orrs	r3, r2
 800219a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	68fa      	ldr	r2, [r7, #12]
 80021a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f042 0201 	orr.w	r2, r2, #1
 80021b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2220      	movs	r2, #32
 80021b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2200      	movs	r2, #0
 80021c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80021c4:	2300      	movs	r3, #0
 80021c6:	e000      	b.n	80021ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80021c8:	2302      	movs	r3, #2
  }
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3714      	adds	r7, #20
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
	...

080021d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80021d8:	b480      	push	{r7}
 80021da:	b085      	sub	sp, #20
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d141      	bne.n	800226a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80021e6:	4b4b      	ldr	r3, [pc, #300]	; (8002314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80021ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021f2:	d131      	bne.n	8002258 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80021f4:	4b47      	ldr	r3, [pc, #284]	; (8002314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80021fa:	4a46      	ldr	r2, [pc, #280]	; (8002314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002200:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002204:	4b43      	ldr	r3, [pc, #268]	; (8002314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800220c:	4a41      	ldr	r2, [pc, #260]	; (8002314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800220e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002212:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002214:	4b40      	ldr	r3, [pc, #256]	; (8002318 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2232      	movs	r2, #50	; 0x32
 800221a:	fb02 f303 	mul.w	r3, r2, r3
 800221e:	4a3f      	ldr	r2, [pc, #252]	; (800231c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002220:	fba2 2303 	umull	r2, r3, r2, r3
 8002224:	0c9b      	lsrs	r3, r3, #18
 8002226:	3301      	adds	r3, #1
 8002228:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800222a:	e002      	b.n	8002232 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	3b01      	subs	r3, #1
 8002230:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002232:	4b38      	ldr	r3, [pc, #224]	; (8002314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002234:	695b      	ldr	r3, [r3, #20]
 8002236:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800223a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800223e:	d102      	bne.n	8002246 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d1f2      	bne.n	800222c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002246:	4b33      	ldr	r3, [pc, #204]	; (8002314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002248:	695b      	ldr	r3, [r3, #20]
 800224a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800224e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002252:	d158      	bne.n	8002306 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002254:	2303      	movs	r3, #3
 8002256:	e057      	b.n	8002308 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002258:	4b2e      	ldr	r3, [pc, #184]	; (8002314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800225a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800225e:	4a2d      	ldr	r2, [pc, #180]	; (8002314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002260:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002264:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002268:	e04d      	b.n	8002306 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002270:	d141      	bne.n	80022f6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002272:	4b28      	ldr	r3, [pc, #160]	; (8002314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800227a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800227e:	d131      	bne.n	80022e4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002280:	4b24      	ldr	r3, [pc, #144]	; (8002314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002282:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002286:	4a23      	ldr	r2, [pc, #140]	; (8002314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002288:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800228c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002290:	4b20      	ldr	r3, [pc, #128]	; (8002314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002298:	4a1e      	ldr	r2, [pc, #120]	; (8002314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800229a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800229e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80022a0:	4b1d      	ldr	r3, [pc, #116]	; (8002318 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2232      	movs	r2, #50	; 0x32
 80022a6:	fb02 f303 	mul.w	r3, r2, r3
 80022aa:	4a1c      	ldr	r2, [pc, #112]	; (800231c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80022ac:	fba2 2303 	umull	r2, r3, r2, r3
 80022b0:	0c9b      	lsrs	r3, r3, #18
 80022b2:	3301      	adds	r3, #1
 80022b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022b6:	e002      	b.n	80022be <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	3b01      	subs	r3, #1
 80022bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022be:	4b15      	ldr	r3, [pc, #84]	; (8002314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022c0:	695b      	ldr	r3, [r3, #20]
 80022c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022ca:	d102      	bne.n	80022d2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d1f2      	bne.n	80022b8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80022d2:	4b10      	ldr	r3, [pc, #64]	; (8002314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022d4:	695b      	ldr	r3, [r3, #20]
 80022d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022de:	d112      	bne.n	8002306 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	e011      	b.n	8002308 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80022e4:	4b0b      	ldr	r3, [pc, #44]	; (8002314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022ea:	4a0a      	ldr	r2, [pc, #40]	; (8002314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022f0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80022f4:	e007      	b.n	8002306 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80022f6:	4b07      	ldr	r3, [pc, #28]	; (8002314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80022fe:	4a05      	ldr	r2, [pc, #20]	; (8002314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002300:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002304:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002306:	2300      	movs	r3, #0
}
 8002308:	4618      	mov	r0, r3
 800230a:	3714      	adds	r7, #20
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr
 8002314:	40007000 	.word	0x40007000
 8002318:	20000000 	.word	0x20000000
 800231c:	431bde83 	.word	0x431bde83

08002320 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002324:	4b05      	ldr	r3, [pc, #20]	; (800233c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	4a04      	ldr	r2, [pc, #16]	; (800233c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800232a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800232e:	6093      	str	r3, [r2, #8]
}
 8002330:	bf00      	nop
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	40007000 	.word	0x40007000

08002340 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b088      	sub	sp, #32
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d101      	bne.n	8002352 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e308      	b.n	8002964 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0301 	and.w	r3, r3, #1
 800235a:	2b00      	cmp	r3, #0
 800235c:	d075      	beq.n	800244a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800235e:	4ba3      	ldr	r3, [pc, #652]	; (80025ec <HAL_RCC_OscConfig+0x2ac>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f003 030c 	and.w	r3, r3, #12
 8002366:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002368:	4ba0      	ldr	r3, [pc, #640]	; (80025ec <HAL_RCC_OscConfig+0x2ac>)
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	f003 0303 	and.w	r3, r3, #3
 8002370:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	2b0c      	cmp	r3, #12
 8002376:	d102      	bne.n	800237e <HAL_RCC_OscConfig+0x3e>
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	2b03      	cmp	r3, #3
 800237c:	d002      	beq.n	8002384 <HAL_RCC_OscConfig+0x44>
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	2b08      	cmp	r3, #8
 8002382:	d10b      	bne.n	800239c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002384:	4b99      	ldr	r3, [pc, #612]	; (80025ec <HAL_RCC_OscConfig+0x2ac>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d05b      	beq.n	8002448 <HAL_RCC_OscConfig+0x108>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d157      	bne.n	8002448 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e2e3      	b.n	8002964 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023a4:	d106      	bne.n	80023b4 <HAL_RCC_OscConfig+0x74>
 80023a6:	4b91      	ldr	r3, [pc, #580]	; (80025ec <HAL_RCC_OscConfig+0x2ac>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a90      	ldr	r2, [pc, #576]	; (80025ec <HAL_RCC_OscConfig+0x2ac>)
 80023ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023b0:	6013      	str	r3, [r2, #0]
 80023b2:	e01d      	b.n	80023f0 <HAL_RCC_OscConfig+0xb0>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023bc:	d10c      	bne.n	80023d8 <HAL_RCC_OscConfig+0x98>
 80023be:	4b8b      	ldr	r3, [pc, #556]	; (80025ec <HAL_RCC_OscConfig+0x2ac>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a8a      	ldr	r2, [pc, #552]	; (80025ec <HAL_RCC_OscConfig+0x2ac>)
 80023c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023c8:	6013      	str	r3, [r2, #0]
 80023ca:	4b88      	ldr	r3, [pc, #544]	; (80025ec <HAL_RCC_OscConfig+0x2ac>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a87      	ldr	r2, [pc, #540]	; (80025ec <HAL_RCC_OscConfig+0x2ac>)
 80023d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023d4:	6013      	str	r3, [r2, #0]
 80023d6:	e00b      	b.n	80023f0 <HAL_RCC_OscConfig+0xb0>
 80023d8:	4b84      	ldr	r3, [pc, #528]	; (80025ec <HAL_RCC_OscConfig+0x2ac>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a83      	ldr	r2, [pc, #524]	; (80025ec <HAL_RCC_OscConfig+0x2ac>)
 80023de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023e2:	6013      	str	r3, [r2, #0]
 80023e4:	4b81      	ldr	r3, [pc, #516]	; (80025ec <HAL_RCC_OscConfig+0x2ac>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a80      	ldr	r2, [pc, #512]	; (80025ec <HAL_RCC_OscConfig+0x2ac>)
 80023ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d013      	beq.n	8002420 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f8:	f7ff f86e 	bl	80014d8 <HAL_GetTick>
 80023fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023fe:	e008      	b.n	8002412 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002400:	f7ff f86a 	bl	80014d8 <HAL_GetTick>
 8002404:	4602      	mov	r2, r0
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	2b64      	cmp	r3, #100	; 0x64
 800240c:	d901      	bls.n	8002412 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e2a8      	b.n	8002964 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002412:	4b76      	ldr	r3, [pc, #472]	; (80025ec <HAL_RCC_OscConfig+0x2ac>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d0f0      	beq.n	8002400 <HAL_RCC_OscConfig+0xc0>
 800241e:	e014      	b.n	800244a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002420:	f7ff f85a 	bl	80014d8 <HAL_GetTick>
 8002424:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002426:	e008      	b.n	800243a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002428:	f7ff f856 	bl	80014d8 <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	2b64      	cmp	r3, #100	; 0x64
 8002434:	d901      	bls.n	800243a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e294      	b.n	8002964 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800243a:	4b6c      	ldr	r3, [pc, #432]	; (80025ec <HAL_RCC_OscConfig+0x2ac>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d1f0      	bne.n	8002428 <HAL_RCC_OscConfig+0xe8>
 8002446:	e000      	b.n	800244a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002448:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	2b00      	cmp	r3, #0
 8002454:	d075      	beq.n	8002542 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002456:	4b65      	ldr	r3, [pc, #404]	; (80025ec <HAL_RCC_OscConfig+0x2ac>)
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	f003 030c 	and.w	r3, r3, #12
 800245e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002460:	4b62      	ldr	r3, [pc, #392]	; (80025ec <HAL_RCC_OscConfig+0x2ac>)
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	f003 0303 	and.w	r3, r3, #3
 8002468:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	2b0c      	cmp	r3, #12
 800246e:	d102      	bne.n	8002476 <HAL_RCC_OscConfig+0x136>
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	2b02      	cmp	r3, #2
 8002474:	d002      	beq.n	800247c <HAL_RCC_OscConfig+0x13c>
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	2b04      	cmp	r3, #4
 800247a:	d11f      	bne.n	80024bc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800247c:	4b5b      	ldr	r3, [pc, #364]	; (80025ec <HAL_RCC_OscConfig+0x2ac>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002484:	2b00      	cmp	r3, #0
 8002486:	d005      	beq.n	8002494 <HAL_RCC_OscConfig+0x154>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d101      	bne.n	8002494 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e267      	b.n	8002964 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002494:	4b55      	ldr	r3, [pc, #340]	; (80025ec <HAL_RCC_OscConfig+0x2ac>)
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	691b      	ldr	r3, [r3, #16]
 80024a0:	061b      	lsls	r3, r3, #24
 80024a2:	4952      	ldr	r1, [pc, #328]	; (80025ec <HAL_RCC_OscConfig+0x2ac>)
 80024a4:	4313      	orrs	r3, r2
 80024a6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80024a8:	4b51      	ldr	r3, [pc, #324]	; (80025f0 <HAL_RCC_OscConfig+0x2b0>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7fe ffc7 	bl	8001440 <HAL_InitTick>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d043      	beq.n	8002540 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e253      	b.n	8002964 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d023      	beq.n	800250c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024c4:	4b49      	ldr	r3, [pc, #292]	; (80025ec <HAL_RCC_OscConfig+0x2ac>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a48      	ldr	r2, [pc, #288]	; (80025ec <HAL_RCC_OscConfig+0x2ac>)
 80024ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d0:	f7ff f802 	bl	80014d8 <HAL_GetTick>
 80024d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024d6:	e008      	b.n	80024ea <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024d8:	f7fe fffe 	bl	80014d8 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e23c      	b.n	8002964 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024ea:	4b40      	ldr	r3, [pc, #256]	; (80025ec <HAL_RCC_OscConfig+0x2ac>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d0f0      	beq.n	80024d8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024f6:	4b3d      	ldr	r3, [pc, #244]	; (80025ec <HAL_RCC_OscConfig+0x2ac>)
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	061b      	lsls	r3, r3, #24
 8002504:	4939      	ldr	r1, [pc, #228]	; (80025ec <HAL_RCC_OscConfig+0x2ac>)
 8002506:	4313      	orrs	r3, r2
 8002508:	604b      	str	r3, [r1, #4]
 800250a:	e01a      	b.n	8002542 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800250c:	4b37      	ldr	r3, [pc, #220]	; (80025ec <HAL_RCC_OscConfig+0x2ac>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a36      	ldr	r2, [pc, #216]	; (80025ec <HAL_RCC_OscConfig+0x2ac>)
 8002512:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002516:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002518:	f7fe ffde 	bl	80014d8 <HAL_GetTick>
 800251c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800251e:	e008      	b.n	8002532 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002520:	f7fe ffda 	bl	80014d8 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b02      	cmp	r3, #2
 800252c:	d901      	bls.n	8002532 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e218      	b.n	8002964 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002532:	4b2e      	ldr	r3, [pc, #184]	; (80025ec <HAL_RCC_OscConfig+0x2ac>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800253a:	2b00      	cmp	r3, #0
 800253c:	d1f0      	bne.n	8002520 <HAL_RCC_OscConfig+0x1e0>
 800253e:	e000      	b.n	8002542 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002540:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0308 	and.w	r3, r3, #8
 800254a:	2b00      	cmp	r3, #0
 800254c:	d03c      	beq.n	80025c8 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	695b      	ldr	r3, [r3, #20]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d01c      	beq.n	8002590 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002556:	4b25      	ldr	r3, [pc, #148]	; (80025ec <HAL_RCC_OscConfig+0x2ac>)
 8002558:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800255c:	4a23      	ldr	r2, [pc, #140]	; (80025ec <HAL_RCC_OscConfig+0x2ac>)
 800255e:	f043 0301 	orr.w	r3, r3, #1
 8002562:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002566:	f7fe ffb7 	bl	80014d8 <HAL_GetTick>
 800256a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800256c:	e008      	b.n	8002580 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800256e:	f7fe ffb3 	bl	80014d8 <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	2b02      	cmp	r3, #2
 800257a:	d901      	bls.n	8002580 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e1f1      	b.n	8002964 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002580:	4b1a      	ldr	r3, [pc, #104]	; (80025ec <HAL_RCC_OscConfig+0x2ac>)
 8002582:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d0ef      	beq.n	800256e <HAL_RCC_OscConfig+0x22e>
 800258e:	e01b      	b.n	80025c8 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002590:	4b16      	ldr	r3, [pc, #88]	; (80025ec <HAL_RCC_OscConfig+0x2ac>)
 8002592:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002596:	4a15      	ldr	r2, [pc, #84]	; (80025ec <HAL_RCC_OscConfig+0x2ac>)
 8002598:	f023 0301 	bic.w	r3, r3, #1
 800259c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025a0:	f7fe ff9a 	bl	80014d8 <HAL_GetTick>
 80025a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025a6:	e008      	b.n	80025ba <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025a8:	f7fe ff96 	bl	80014d8 <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e1d4      	b.n	8002964 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025ba:	4b0c      	ldr	r3, [pc, #48]	; (80025ec <HAL_RCC_OscConfig+0x2ac>)
 80025bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025c0:	f003 0302 	and.w	r3, r3, #2
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d1ef      	bne.n	80025a8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0304 	and.w	r3, r3, #4
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	f000 80ab 	beq.w	800272c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025d6:	2300      	movs	r3, #0
 80025d8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80025da:	4b04      	ldr	r3, [pc, #16]	; (80025ec <HAL_RCC_OscConfig+0x2ac>)
 80025dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d106      	bne.n	80025f4 <HAL_RCC_OscConfig+0x2b4>
 80025e6:	2301      	movs	r3, #1
 80025e8:	e005      	b.n	80025f6 <HAL_RCC_OscConfig+0x2b6>
 80025ea:	bf00      	nop
 80025ec:	40021000 	.word	0x40021000
 80025f0:	20000004 	.word	0x20000004
 80025f4:	2300      	movs	r3, #0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d00d      	beq.n	8002616 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025fa:	4baf      	ldr	r3, [pc, #700]	; (80028b8 <HAL_RCC_OscConfig+0x578>)
 80025fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025fe:	4aae      	ldr	r2, [pc, #696]	; (80028b8 <HAL_RCC_OscConfig+0x578>)
 8002600:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002604:	6593      	str	r3, [r2, #88]	; 0x58
 8002606:	4bac      	ldr	r3, [pc, #688]	; (80028b8 <HAL_RCC_OscConfig+0x578>)
 8002608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800260a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800260e:	60fb      	str	r3, [r7, #12]
 8002610:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002612:	2301      	movs	r3, #1
 8002614:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002616:	4ba9      	ldr	r3, [pc, #676]	; (80028bc <HAL_RCC_OscConfig+0x57c>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800261e:	2b00      	cmp	r3, #0
 8002620:	d118      	bne.n	8002654 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002622:	4ba6      	ldr	r3, [pc, #664]	; (80028bc <HAL_RCC_OscConfig+0x57c>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4aa5      	ldr	r2, [pc, #660]	; (80028bc <HAL_RCC_OscConfig+0x57c>)
 8002628:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800262c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800262e:	f7fe ff53 	bl	80014d8 <HAL_GetTick>
 8002632:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002634:	e008      	b.n	8002648 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002636:	f7fe ff4f 	bl	80014d8 <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	2b02      	cmp	r3, #2
 8002642:	d901      	bls.n	8002648 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e18d      	b.n	8002964 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002648:	4b9c      	ldr	r3, [pc, #624]	; (80028bc <HAL_RCC_OscConfig+0x57c>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002650:	2b00      	cmp	r3, #0
 8002652:	d0f0      	beq.n	8002636 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	2b01      	cmp	r3, #1
 800265a:	d108      	bne.n	800266e <HAL_RCC_OscConfig+0x32e>
 800265c:	4b96      	ldr	r3, [pc, #600]	; (80028b8 <HAL_RCC_OscConfig+0x578>)
 800265e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002662:	4a95      	ldr	r2, [pc, #596]	; (80028b8 <HAL_RCC_OscConfig+0x578>)
 8002664:	f043 0301 	orr.w	r3, r3, #1
 8002668:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800266c:	e024      	b.n	80026b8 <HAL_RCC_OscConfig+0x378>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	2b05      	cmp	r3, #5
 8002674:	d110      	bne.n	8002698 <HAL_RCC_OscConfig+0x358>
 8002676:	4b90      	ldr	r3, [pc, #576]	; (80028b8 <HAL_RCC_OscConfig+0x578>)
 8002678:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800267c:	4a8e      	ldr	r2, [pc, #568]	; (80028b8 <HAL_RCC_OscConfig+0x578>)
 800267e:	f043 0304 	orr.w	r3, r3, #4
 8002682:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002686:	4b8c      	ldr	r3, [pc, #560]	; (80028b8 <HAL_RCC_OscConfig+0x578>)
 8002688:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800268c:	4a8a      	ldr	r2, [pc, #552]	; (80028b8 <HAL_RCC_OscConfig+0x578>)
 800268e:	f043 0301 	orr.w	r3, r3, #1
 8002692:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002696:	e00f      	b.n	80026b8 <HAL_RCC_OscConfig+0x378>
 8002698:	4b87      	ldr	r3, [pc, #540]	; (80028b8 <HAL_RCC_OscConfig+0x578>)
 800269a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800269e:	4a86      	ldr	r2, [pc, #536]	; (80028b8 <HAL_RCC_OscConfig+0x578>)
 80026a0:	f023 0301 	bic.w	r3, r3, #1
 80026a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026a8:	4b83      	ldr	r3, [pc, #524]	; (80028b8 <HAL_RCC_OscConfig+0x578>)
 80026aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ae:	4a82      	ldr	r2, [pc, #520]	; (80028b8 <HAL_RCC_OscConfig+0x578>)
 80026b0:	f023 0304 	bic.w	r3, r3, #4
 80026b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d016      	beq.n	80026ee <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026c0:	f7fe ff0a 	bl	80014d8 <HAL_GetTick>
 80026c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026c6:	e00a      	b.n	80026de <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026c8:	f7fe ff06 	bl	80014d8 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e142      	b.n	8002964 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026de:	4b76      	ldr	r3, [pc, #472]	; (80028b8 <HAL_RCC_OscConfig+0x578>)
 80026e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026e4:	f003 0302 	and.w	r3, r3, #2
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d0ed      	beq.n	80026c8 <HAL_RCC_OscConfig+0x388>
 80026ec:	e015      	b.n	800271a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ee:	f7fe fef3 	bl	80014d8 <HAL_GetTick>
 80026f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026f4:	e00a      	b.n	800270c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026f6:	f7fe feef 	bl	80014d8 <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	f241 3288 	movw	r2, #5000	; 0x1388
 8002704:	4293      	cmp	r3, r2
 8002706:	d901      	bls.n	800270c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	e12b      	b.n	8002964 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800270c:	4b6a      	ldr	r3, [pc, #424]	; (80028b8 <HAL_RCC_OscConfig+0x578>)
 800270e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002712:	f003 0302 	and.w	r3, r3, #2
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1ed      	bne.n	80026f6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800271a:	7ffb      	ldrb	r3, [r7, #31]
 800271c:	2b01      	cmp	r3, #1
 800271e:	d105      	bne.n	800272c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002720:	4b65      	ldr	r3, [pc, #404]	; (80028b8 <HAL_RCC_OscConfig+0x578>)
 8002722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002724:	4a64      	ldr	r2, [pc, #400]	; (80028b8 <HAL_RCC_OscConfig+0x578>)
 8002726:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800272a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0320 	and.w	r3, r3, #32
 8002734:	2b00      	cmp	r3, #0
 8002736:	d03c      	beq.n	80027b2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	699b      	ldr	r3, [r3, #24]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d01c      	beq.n	800277a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002740:	4b5d      	ldr	r3, [pc, #372]	; (80028b8 <HAL_RCC_OscConfig+0x578>)
 8002742:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002746:	4a5c      	ldr	r2, [pc, #368]	; (80028b8 <HAL_RCC_OscConfig+0x578>)
 8002748:	f043 0301 	orr.w	r3, r3, #1
 800274c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002750:	f7fe fec2 	bl	80014d8 <HAL_GetTick>
 8002754:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002756:	e008      	b.n	800276a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002758:	f7fe febe 	bl	80014d8 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b02      	cmp	r3, #2
 8002764:	d901      	bls.n	800276a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e0fc      	b.n	8002964 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800276a:	4b53      	ldr	r3, [pc, #332]	; (80028b8 <HAL_RCC_OscConfig+0x578>)
 800276c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002770:	f003 0302 	and.w	r3, r3, #2
 8002774:	2b00      	cmp	r3, #0
 8002776:	d0ef      	beq.n	8002758 <HAL_RCC_OscConfig+0x418>
 8002778:	e01b      	b.n	80027b2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800277a:	4b4f      	ldr	r3, [pc, #316]	; (80028b8 <HAL_RCC_OscConfig+0x578>)
 800277c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002780:	4a4d      	ldr	r2, [pc, #308]	; (80028b8 <HAL_RCC_OscConfig+0x578>)
 8002782:	f023 0301 	bic.w	r3, r3, #1
 8002786:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800278a:	f7fe fea5 	bl	80014d8 <HAL_GetTick>
 800278e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002790:	e008      	b.n	80027a4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002792:	f7fe fea1 	bl	80014d8 <HAL_GetTick>
 8002796:	4602      	mov	r2, r0
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	2b02      	cmp	r3, #2
 800279e:	d901      	bls.n	80027a4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e0df      	b.n	8002964 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80027a4:	4b44      	ldr	r3, [pc, #272]	; (80028b8 <HAL_RCC_OscConfig+0x578>)
 80027a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d1ef      	bne.n	8002792 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	69db      	ldr	r3, [r3, #28]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	f000 80d3 	beq.w	8002962 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027bc:	4b3e      	ldr	r3, [pc, #248]	; (80028b8 <HAL_RCC_OscConfig+0x578>)
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f003 030c 	and.w	r3, r3, #12
 80027c4:	2b0c      	cmp	r3, #12
 80027c6:	f000 808d 	beq.w	80028e4 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	69db      	ldr	r3, [r3, #28]
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d15a      	bne.n	8002888 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027d2:	4b39      	ldr	r3, [pc, #228]	; (80028b8 <HAL_RCC_OscConfig+0x578>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a38      	ldr	r2, [pc, #224]	; (80028b8 <HAL_RCC_OscConfig+0x578>)
 80027d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027de:	f7fe fe7b 	bl	80014d8 <HAL_GetTick>
 80027e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027e4:	e008      	b.n	80027f8 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027e6:	f7fe fe77 	bl	80014d8 <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d901      	bls.n	80027f8 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e0b5      	b.n	8002964 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027f8:	4b2f      	ldr	r3, [pc, #188]	; (80028b8 <HAL_RCC_OscConfig+0x578>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d1f0      	bne.n	80027e6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002804:	4b2c      	ldr	r3, [pc, #176]	; (80028b8 <HAL_RCC_OscConfig+0x578>)
 8002806:	68da      	ldr	r2, [r3, #12]
 8002808:	4b2d      	ldr	r3, [pc, #180]	; (80028c0 <HAL_RCC_OscConfig+0x580>)
 800280a:	4013      	ands	r3, r2
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	6a11      	ldr	r1, [r2, #32]
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002814:	3a01      	subs	r2, #1
 8002816:	0112      	lsls	r2, r2, #4
 8002818:	4311      	orrs	r1, r2
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800281e:	0212      	lsls	r2, r2, #8
 8002820:	4311      	orrs	r1, r2
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002826:	0852      	lsrs	r2, r2, #1
 8002828:	3a01      	subs	r2, #1
 800282a:	0552      	lsls	r2, r2, #21
 800282c:	4311      	orrs	r1, r2
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002832:	0852      	lsrs	r2, r2, #1
 8002834:	3a01      	subs	r2, #1
 8002836:	0652      	lsls	r2, r2, #25
 8002838:	4311      	orrs	r1, r2
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800283e:	06d2      	lsls	r2, r2, #27
 8002840:	430a      	orrs	r2, r1
 8002842:	491d      	ldr	r1, [pc, #116]	; (80028b8 <HAL_RCC_OscConfig+0x578>)
 8002844:	4313      	orrs	r3, r2
 8002846:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002848:	4b1b      	ldr	r3, [pc, #108]	; (80028b8 <HAL_RCC_OscConfig+0x578>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a1a      	ldr	r2, [pc, #104]	; (80028b8 <HAL_RCC_OscConfig+0x578>)
 800284e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002852:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002854:	4b18      	ldr	r3, [pc, #96]	; (80028b8 <HAL_RCC_OscConfig+0x578>)
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	4a17      	ldr	r2, [pc, #92]	; (80028b8 <HAL_RCC_OscConfig+0x578>)
 800285a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800285e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002860:	f7fe fe3a 	bl	80014d8 <HAL_GetTick>
 8002864:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002866:	e008      	b.n	800287a <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002868:	f7fe fe36 	bl	80014d8 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b02      	cmp	r3, #2
 8002874:	d901      	bls.n	800287a <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e074      	b.n	8002964 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800287a:	4b0f      	ldr	r3, [pc, #60]	; (80028b8 <HAL_RCC_OscConfig+0x578>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d0f0      	beq.n	8002868 <HAL_RCC_OscConfig+0x528>
 8002886:	e06c      	b.n	8002962 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002888:	4b0b      	ldr	r3, [pc, #44]	; (80028b8 <HAL_RCC_OscConfig+0x578>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a0a      	ldr	r2, [pc, #40]	; (80028b8 <HAL_RCC_OscConfig+0x578>)
 800288e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002892:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002894:	4b08      	ldr	r3, [pc, #32]	; (80028b8 <HAL_RCC_OscConfig+0x578>)
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	4a07      	ldr	r2, [pc, #28]	; (80028b8 <HAL_RCC_OscConfig+0x578>)
 800289a:	f023 0303 	bic.w	r3, r3, #3
 800289e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80028a0:	4b05      	ldr	r3, [pc, #20]	; (80028b8 <HAL_RCC_OscConfig+0x578>)
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	4a04      	ldr	r2, [pc, #16]	; (80028b8 <HAL_RCC_OscConfig+0x578>)
 80028a6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80028aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028ae:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b0:	f7fe fe12 	bl	80014d8 <HAL_GetTick>
 80028b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028b6:	e00e      	b.n	80028d6 <HAL_RCC_OscConfig+0x596>
 80028b8:	40021000 	.word	0x40021000
 80028bc:	40007000 	.word	0x40007000
 80028c0:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028c4:	f7fe fe08 	bl	80014d8 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e046      	b.n	8002964 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028d6:	4b25      	ldr	r3, [pc, #148]	; (800296c <HAL_RCC_OscConfig+0x62c>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d1f0      	bne.n	80028c4 <HAL_RCC_OscConfig+0x584>
 80028e2:	e03e      	b.n	8002962 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	69db      	ldr	r3, [r3, #28]
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d101      	bne.n	80028f0 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e039      	b.n	8002964 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80028f0:	4b1e      	ldr	r3, [pc, #120]	; (800296c <HAL_RCC_OscConfig+0x62c>)
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	f003 0203 	and.w	r2, r3, #3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6a1b      	ldr	r3, [r3, #32]
 8002900:	429a      	cmp	r2, r3
 8002902:	d12c      	bne.n	800295e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290e:	3b01      	subs	r3, #1
 8002910:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002912:	429a      	cmp	r2, r3
 8002914:	d123      	bne.n	800295e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002920:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002922:	429a      	cmp	r2, r3
 8002924:	d11b      	bne.n	800295e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002930:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002932:	429a      	cmp	r2, r3
 8002934:	d113      	bne.n	800295e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002940:	085b      	lsrs	r3, r3, #1
 8002942:	3b01      	subs	r3, #1
 8002944:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002946:	429a      	cmp	r2, r3
 8002948:	d109      	bne.n	800295e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002954:	085b      	lsrs	r3, r3, #1
 8002956:	3b01      	subs	r3, #1
 8002958:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800295a:	429a      	cmp	r2, r3
 800295c:	d001      	beq.n	8002962 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e000      	b.n	8002964 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8002962:	2300      	movs	r3, #0
}
 8002964:	4618      	mov	r0, r3
 8002966:	3720      	adds	r7, #32
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	40021000 	.word	0x40021000

08002970 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b086      	sub	sp, #24
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800297a:	2300      	movs	r3, #0
 800297c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d101      	bne.n	8002988 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e11e      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002988:	4b91      	ldr	r3, [pc, #580]	; (8002bd0 <HAL_RCC_ClockConfig+0x260>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 030f 	and.w	r3, r3, #15
 8002990:	683a      	ldr	r2, [r7, #0]
 8002992:	429a      	cmp	r2, r3
 8002994:	d910      	bls.n	80029b8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002996:	4b8e      	ldr	r3, [pc, #568]	; (8002bd0 <HAL_RCC_ClockConfig+0x260>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f023 020f 	bic.w	r2, r3, #15
 800299e:	498c      	ldr	r1, [pc, #560]	; (8002bd0 <HAL_RCC_ClockConfig+0x260>)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029a6:	4b8a      	ldr	r3, [pc, #552]	; (8002bd0 <HAL_RCC_ClockConfig+0x260>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 030f 	and.w	r3, r3, #15
 80029ae:	683a      	ldr	r2, [r7, #0]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d001      	beq.n	80029b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e106      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0301 	and.w	r3, r3, #1
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d073      	beq.n	8002aac <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	2b03      	cmp	r3, #3
 80029ca:	d129      	bne.n	8002a20 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029cc:	4b81      	ldr	r3, [pc, #516]	; (8002bd4 <HAL_RCC_ClockConfig+0x264>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d101      	bne.n	80029dc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e0f4      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80029dc:	f000 f99e 	bl	8002d1c <RCC_GetSysClockFreqFromPLLSource>
 80029e0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	4a7c      	ldr	r2, [pc, #496]	; (8002bd8 <HAL_RCC_ClockConfig+0x268>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d93f      	bls.n	8002a6a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80029ea:	4b7a      	ldr	r3, [pc, #488]	; (8002bd4 <HAL_RCC_ClockConfig+0x264>)
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d009      	beq.n	8002a0a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d033      	beq.n	8002a6a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d12f      	bne.n	8002a6a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002a0a:	4b72      	ldr	r3, [pc, #456]	; (8002bd4 <HAL_RCC_ClockConfig+0x264>)
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a12:	4a70      	ldr	r2, [pc, #448]	; (8002bd4 <HAL_RCC_ClockConfig+0x264>)
 8002a14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a18:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002a1a:	2380      	movs	r3, #128	; 0x80
 8002a1c:	617b      	str	r3, [r7, #20]
 8002a1e:	e024      	b.n	8002a6a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d107      	bne.n	8002a38 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a28:	4b6a      	ldr	r3, [pc, #424]	; (8002bd4 <HAL_RCC_ClockConfig+0x264>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d109      	bne.n	8002a48 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e0c6      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a38:	4b66      	ldr	r3, [pc, #408]	; (8002bd4 <HAL_RCC_ClockConfig+0x264>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d101      	bne.n	8002a48 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e0be      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002a48:	f000 f8ce 	bl	8002be8 <HAL_RCC_GetSysClockFreq>
 8002a4c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	4a61      	ldr	r2, [pc, #388]	; (8002bd8 <HAL_RCC_ClockConfig+0x268>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d909      	bls.n	8002a6a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002a56:	4b5f      	ldr	r3, [pc, #380]	; (8002bd4 <HAL_RCC_ClockConfig+0x264>)
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a5e:	4a5d      	ldr	r2, [pc, #372]	; (8002bd4 <HAL_RCC_ClockConfig+0x264>)
 8002a60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a64:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002a66:	2380      	movs	r3, #128	; 0x80
 8002a68:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a6a:	4b5a      	ldr	r3, [pc, #360]	; (8002bd4 <HAL_RCC_ClockConfig+0x264>)
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f023 0203 	bic.w	r2, r3, #3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	4957      	ldr	r1, [pc, #348]	; (8002bd4 <HAL_RCC_ClockConfig+0x264>)
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a7c:	f7fe fd2c 	bl	80014d8 <HAL_GetTick>
 8002a80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a82:	e00a      	b.n	8002a9a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a84:	f7fe fd28 	bl	80014d8 <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e095      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a9a:	4b4e      	ldr	r3, [pc, #312]	; (8002bd4 <HAL_RCC_ClockConfig+0x264>)
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	f003 020c 	and.w	r2, r3, #12
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d1eb      	bne.n	8002a84 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0302 	and.w	r3, r3, #2
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d023      	beq.n	8002b00 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0304 	and.w	r3, r3, #4
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d005      	beq.n	8002ad0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ac4:	4b43      	ldr	r3, [pc, #268]	; (8002bd4 <HAL_RCC_ClockConfig+0x264>)
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	4a42      	ldr	r2, [pc, #264]	; (8002bd4 <HAL_RCC_ClockConfig+0x264>)
 8002aca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002ace:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0308 	and.w	r3, r3, #8
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d007      	beq.n	8002aec <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002adc:	4b3d      	ldr	r3, [pc, #244]	; (8002bd4 <HAL_RCC_ClockConfig+0x264>)
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002ae4:	4a3b      	ldr	r2, [pc, #236]	; (8002bd4 <HAL_RCC_ClockConfig+0x264>)
 8002ae6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002aea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002aec:	4b39      	ldr	r3, [pc, #228]	; (8002bd4 <HAL_RCC_ClockConfig+0x264>)
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	4936      	ldr	r1, [pc, #216]	; (8002bd4 <HAL_RCC_ClockConfig+0x264>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	608b      	str	r3, [r1, #8]
 8002afe:	e008      	b.n	8002b12 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	2b80      	cmp	r3, #128	; 0x80
 8002b04:	d105      	bne.n	8002b12 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002b06:	4b33      	ldr	r3, [pc, #204]	; (8002bd4 <HAL_RCC_ClockConfig+0x264>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	4a32      	ldr	r2, [pc, #200]	; (8002bd4 <HAL_RCC_ClockConfig+0x264>)
 8002b0c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b10:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b12:	4b2f      	ldr	r3, [pc, #188]	; (8002bd0 <HAL_RCC_ClockConfig+0x260>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 030f 	and.w	r3, r3, #15
 8002b1a:	683a      	ldr	r2, [r7, #0]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d21d      	bcs.n	8002b5c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b20:	4b2b      	ldr	r3, [pc, #172]	; (8002bd0 <HAL_RCC_ClockConfig+0x260>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f023 020f 	bic.w	r2, r3, #15
 8002b28:	4929      	ldr	r1, [pc, #164]	; (8002bd0 <HAL_RCC_ClockConfig+0x260>)
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002b30:	f7fe fcd2 	bl	80014d8 <HAL_GetTick>
 8002b34:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b36:	e00a      	b.n	8002b4e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b38:	f7fe fcce 	bl	80014d8 <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d901      	bls.n	8002b4e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e03b      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b4e:	4b20      	ldr	r3, [pc, #128]	; (8002bd0 <HAL_RCC_ClockConfig+0x260>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 030f 	and.w	r3, r3, #15
 8002b56:	683a      	ldr	r2, [r7, #0]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d1ed      	bne.n	8002b38 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0304 	and.w	r3, r3, #4
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d008      	beq.n	8002b7a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b68:	4b1a      	ldr	r3, [pc, #104]	; (8002bd4 <HAL_RCC_ClockConfig+0x264>)
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	4917      	ldr	r1, [pc, #92]	; (8002bd4 <HAL_RCC_ClockConfig+0x264>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0308 	and.w	r3, r3, #8
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d009      	beq.n	8002b9a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b86:	4b13      	ldr	r3, [pc, #76]	; (8002bd4 <HAL_RCC_ClockConfig+0x264>)
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	00db      	lsls	r3, r3, #3
 8002b94:	490f      	ldr	r1, [pc, #60]	; (8002bd4 <HAL_RCC_ClockConfig+0x264>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b9a:	f000 f825 	bl	8002be8 <HAL_RCC_GetSysClockFreq>
 8002b9e:	4601      	mov	r1, r0
 8002ba0:	4b0c      	ldr	r3, [pc, #48]	; (8002bd4 <HAL_RCC_ClockConfig+0x264>)
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	091b      	lsrs	r3, r3, #4
 8002ba6:	f003 030f 	and.w	r3, r3, #15
 8002baa:	4a0c      	ldr	r2, [pc, #48]	; (8002bdc <HAL_RCC_ClockConfig+0x26c>)
 8002bac:	5cd3      	ldrb	r3, [r2, r3]
 8002bae:	f003 031f 	and.w	r3, r3, #31
 8002bb2:	fa21 f303 	lsr.w	r3, r1, r3
 8002bb6:	4a0a      	ldr	r2, [pc, #40]	; (8002be0 <HAL_RCC_ClockConfig+0x270>)
 8002bb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002bba:	4b0a      	ldr	r3, [pc, #40]	; (8002be4 <HAL_RCC_ClockConfig+0x274>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7fe fc3e 	bl	8001440 <HAL_InitTick>
 8002bc4:	4603      	mov	r3, r0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3718      	adds	r7, #24
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	40022000 	.word	0x40022000
 8002bd4:	40021000 	.word	0x40021000
 8002bd8:	04c4b400 	.word	0x04c4b400
 8002bdc:	08004774 	.word	0x08004774
 8002be0:	20000000 	.word	0x20000000
 8002be4:	20000004 	.word	0x20000004

08002be8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b087      	sub	sp, #28
 8002bec:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002bee:	4b2c      	ldr	r3, [pc, #176]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f003 030c 	and.w	r3, r3, #12
 8002bf6:	2b04      	cmp	r3, #4
 8002bf8:	d102      	bne.n	8002c00 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002bfa:	4b2a      	ldr	r3, [pc, #168]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002bfc:	613b      	str	r3, [r7, #16]
 8002bfe:	e047      	b.n	8002c90 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002c00:	4b27      	ldr	r3, [pc, #156]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f003 030c 	and.w	r3, r3, #12
 8002c08:	2b08      	cmp	r3, #8
 8002c0a:	d102      	bne.n	8002c12 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c0c:	4b26      	ldr	r3, [pc, #152]	; (8002ca8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c0e:	613b      	str	r3, [r7, #16]
 8002c10:	e03e      	b.n	8002c90 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002c12:	4b23      	ldr	r3, [pc, #140]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	f003 030c 	and.w	r3, r3, #12
 8002c1a:	2b0c      	cmp	r3, #12
 8002c1c:	d136      	bne.n	8002c8c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c1e:	4b20      	ldr	r3, [pc, #128]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	f003 0303 	and.w	r3, r3, #3
 8002c26:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c28:	4b1d      	ldr	r3, [pc, #116]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	091b      	lsrs	r3, r3, #4
 8002c2e:	f003 030f 	and.w	r3, r3, #15
 8002c32:	3301      	adds	r3, #1
 8002c34:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2b03      	cmp	r3, #3
 8002c3a:	d10c      	bne.n	8002c56 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c3c:	4a1a      	ldr	r2, [pc, #104]	; (8002ca8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c44:	4a16      	ldr	r2, [pc, #88]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c46:	68d2      	ldr	r2, [r2, #12]
 8002c48:	0a12      	lsrs	r2, r2, #8
 8002c4a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002c4e:	fb02 f303 	mul.w	r3, r2, r3
 8002c52:	617b      	str	r3, [r7, #20]
      break;
 8002c54:	e00c      	b.n	8002c70 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c56:	4a13      	ldr	r2, [pc, #76]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c5e:	4a10      	ldr	r2, [pc, #64]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c60:	68d2      	ldr	r2, [r2, #12]
 8002c62:	0a12      	lsrs	r2, r2, #8
 8002c64:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002c68:	fb02 f303 	mul.w	r3, r2, r3
 8002c6c:	617b      	str	r3, [r7, #20]
      break;
 8002c6e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c70:	4b0b      	ldr	r3, [pc, #44]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	0e5b      	lsrs	r3, r3, #25
 8002c76:	f003 0303 	and.w	r3, r3, #3
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	005b      	lsls	r3, r3, #1
 8002c7e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002c80:	697a      	ldr	r2, [r7, #20]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c88:	613b      	str	r3, [r7, #16]
 8002c8a:	e001      	b.n	8002c90 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002c90:	693b      	ldr	r3, [r7, #16]
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	371c      	adds	r7, #28
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	40021000 	.word	0x40021000
 8002ca4:	00f42400 	.word	0x00f42400
 8002ca8:	007a1200 	.word	0x007a1200

08002cac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cb0:	4b03      	ldr	r3, [pc, #12]	; (8002cc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	20000000 	.word	0x20000000

08002cc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002cc8:	f7ff fff0 	bl	8002cac <HAL_RCC_GetHCLKFreq>
 8002ccc:	4601      	mov	r1, r0
 8002cce:	4b06      	ldr	r3, [pc, #24]	; (8002ce8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	0a1b      	lsrs	r3, r3, #8
 8002cd4:	f003 0307 	and.w	r3, r3, #7
 8002cd8:	4a04      	ldr	r2, [pc, #16]	; (8002cec <HAL_RCC_GetPCLK1Freq+0x28>)
 8002cda:	5cd3      	ldrb	r3, [r2, r3]
 8002cdc:	f003 031f 	and.w	r3, r3, #31
 8002ce0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	40021000 	.word	0x40021000
 8002cec:	08004784 	.word	0x08004784

08002cf0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002cf4:	f7ff ffda 	bl	8002cac <HAL_RCC_GetHCLKFreq>
 8002cf8:	4601      	mov	r1, r0
 8002cfa:	4b06      	ldr	r3, [pc, #24]	; (8002d14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	0adb      	lsrs	r3, r3, #11
 8002d00:	f003 0307 	and.w	r3, r3, #7
 8002d04:	4a04      	ldr	r2, [pc, #16]	; (8002d18 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d06:	5cd3      	ldrb	r3, [r2, r3]
 8002d08:	f003 031f 	and.w	r3, r3, #31
 8002d0c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	40021000 	.word	0x40021000
 8002d18:	08004784 	.word	0x08004784

08002d1c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b087      	sub	sp, #28
 8002d20:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d22:	4b1e      	ldr	r3, [pc, #120]	; (8002d9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	f003 0303 	and.w	r3, r3, #3
 8002d2a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d2c:	4b1b      	ldr	r3, [pc, #108]	; (8002d9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	091b      	lsrs	r3, r3, #4
 8002d32:	f003 030f 	and.w	r3, r3, #15
 8002d36:	3301      	adds	r3, #1
 8002d38:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	2b03      	cmp	r3, #3
 8002d3e:	d10c      	bne.n	8002d5a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002d40:	4a17      	ldr	r2, [pc, #92]	; (8002da0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d48:	4a14      	ldr	r2, [pc, #80]	; (8002d9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002d4a:	68d2      	ldr	r2, [r2, #12]
 8002d4c:	0a12      	lsrs	r2, r2, #8
 8002d4e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002d52:	fb02 f303 	mul.w	r3, r2, r3
 8002d56:	617b      	str	r3, [r7, #20]
    break;
 8002d58:	e00c      	b.n	8002d74 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002d5a:	4a12      	ldr	r2, [pc, #72]	; (8002da4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d62:	4a0e      	ldr	r2, [pc, #56]	; (8002d9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002d64:	68d2      	ldr	r2, [r2, #12]
 8002d66:	0a12      	lsrs	r2, r2, #8
 8002d68:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002d6c:	fb02 f303 	mul.w	r3, r2, r3
 8002d70:	617b      	str	r3, [r7, #20]
    break;
 8002d72:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d74:	4b09      	ldr	r3, [pc, #36]	; (8002d9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	0e5b      	lsrs	r3, r3, #25
 8002d7a:	f003 0303 	and.w	r3, r3, #3
 8002d7e:	3301      	adds	r3, #1
 8002d80:	005b      	lsls	r3, r3, #1
 8002d82:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002d84:	697a      	ldr	r2, [r7, #20]
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d8c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002d8e:	687b      	ldr	r3, [r7, #4]
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	371c      	adds	r7, #28
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr
 8002d9c:	40021000 	.word	0x40021000
 8002da0:	007a1200 	.word	0x007a1200
 8002da4:	00f42400 	.word	0x00f42400

08002da8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b086      	sub	sp, #24
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002db0:	2300      	movs	r3, #0
 8002db2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002db4:	2300      	movs	r3, #0
 8002db6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	f000 8098 	beq.w	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dca:	4b43      	ldr	r3, [pc, #268]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d10d      	bne.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dd6:	4b40      	ldr	r3, [pc, #256]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002dd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dda:	4a3f      	ldr	r2, [pc, #252]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ddc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002de0:	6593      	str	r3, [r2, #88]	; 0x58
 8002de2:	4b3d      	ldr	r3, [pc, #244]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dea:	60bb      	str	r3, [r7, #8]
 8002dec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dee:	2301      	movs	r3, #1
 8002df0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002df2:	4b3a      	ldr	r3, [pc, #232]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a39      	ldr	r2, [pc, #228]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002df8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dfc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002dfe:	f7fe fb6b 	bl	80014d8 <HAL_GetTick>
 8002e02:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e04:	e009      	b.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e06:	f7fe fb67 	bl	80014d8 <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d902      	bls.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002e14:	2303      	movs	r3, #3
 8002e16:	74fb      	strb	r3, [r7, #19]
        break;
 8002e18:	e005      	b.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e1a:	4b30      	ldr	r3, [pc, #192]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d0ef      	beq.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002e26:	7cfb      	ldrb	r3, [r7, #19]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d159      	bne.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002e2c:	4b2a      	ldr	r3, [pc, #168]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e36:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d01e      	beq.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e42:	697a      	ldr	r2, [r7, #20]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d019      	beq.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e48:	4b23      	ldr	r3, [pc, #140]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e52:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e54:	4b20      	ldr	r3, [pc, #128]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e5a:	4a1f      	ldr	r2, [pc, #124]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e64:	4b1c      	ldr	r3, [pc, #112]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e6a:	4a1b      	ldr	r2, [pc, #108]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002e74:	4a18      	ldr	r2, [pc, #96]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	f003 0301 	and.w	r3, r3, #1
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d016      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e86:	f7fe fb27 	bl	80014d8 <HAL_GetTick>
 8002e8a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e8c:	e00b      	b.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e8e:	f7fe fb23 	bl	80014d8 <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d902      	bls.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	74fb      	strb	r3, [r7, #19]
            break;
 8002ea4:	e006      	b.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ea6:	4b0c      	ldr	r3, [pc, #48]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eac:	f003 0302 	and.w	r3, r3, #2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d0ec      	beq.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002eb4:	7cfb      	ldrb	r3, [r7, #19]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d10b      	bne.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002eba:	4b07      	ldr	r3, [pc, #28]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ec0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec8:	4903      	ldr	r1, [pc, #12]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002ed0:	e008      	b.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ed2:	7cfb      	ldrb	r3, [r7, #19]
 8002ed4:	74bb      	strb	r3, [r7, #18]
 8002ed6:	e005      	b.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002ed8:	40021000 	.word	0x40021000
 8002edc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ee0:	7cfb      	ldrb	r3, [r7, #19]
 8002ee2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ee4:	7c7b      	ldrb	r3, [r7, #17]
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d105      	bne.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eea:	4ba6      	ldr	r3, [pc, #664]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eee:	4aa5      	ldr	r2, [pc, #660]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ef0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ef4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0301 	and.w	r3, r3, #1
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d00a      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f02:	4ba0      	ldr	r3, [pc, #640]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f08:	f023 0203 	bic.w	r2, r3, #3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	499c      	ldr	r1, [pc, #624]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f12:	4313      	orrs	r3, r2
 8002f14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0302 	and.w	r3, r3, #2
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d00a      	beq.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f24:	4b97      	ldr	r3, [pc, #604]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f2a:	f023 020c 	bic.w	r2, r3, #12
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	4994      	ldr	r1, [pc, #592]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f34:	4313      	orrs	r3, r2
 8002f36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0304 	and.w	r3, r3, #4
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d00a      	beq.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f46:	4b8f      	ldr	r3, [pc, #572]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f4c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	498b      	ldr	r1, [pc, #556]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0308 	and.w	r3, r3, #8
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d00a      	beq.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002f68:	4b86      	ldr	r3, [pc, #536]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f6e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	4983      	ldr	r1, [pc, #524]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0320 	and.w	r3, r3, #32
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d00a      	beq.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f8a:	4b7e      	ldr	r3, [pc, #504]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f90:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	695b      	ldr	r3, [r3, #20]
 8002f98:	497a      	ldr	r1, [pc, #488]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d00a      	beq.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002fac:	4b75      	ldr	r3, [pc, #468]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fb2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	699b      	ldr	r3, [r3, #24]
 8002fba:	4972      	ldr	r1, [pc, #456]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d00a      	beq.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002fce:	4b6d      	ldr	r3, [pc, #436]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fd4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	69db      	ldr	r3, [r3, #28]
 8002fdc:	4969      	ldr	r1, [pc, #420]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d00a      	beq.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ff0:	4b64      	ldr	r3, [pc, #400]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ff6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a1b      	ldr	r3, [r3, #32]
 8002ffe:	4961      	ldr	r1, [pc, #388]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003000:	4313      	orrs	r3, r2
 8003002:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800300e:	2b00      	cmp	r3, #0
 8003010:	d00a      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003012:	4b5c      	ldr	r3, [pc, #368]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003014:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003018:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003020:	4958      	ldr	r1, [pc, #352]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003022:	4313      	orrs	r3, r2
 8003024:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003030:	2b00      	cmp	r3, #0
 8003032:	d015      	beq.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003034:	4b53      	ldr	r3, [pc, #332]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800303a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003042:	4950      	ldr	r1, [pc, #320]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003044:	4313      	orrs	r3, r2
 8003046:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800304e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003052:	d105      	bne.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003054:	4b4b      	ldr	r3, [pc, #300]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	4a4a      	ldr	r2, [pc, #296]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800305a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800305e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003068:	2b00      	cmp	r3, #0
 800306a:	d015      	beq.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800306c:	4b45      	ldr	r3, [pc, #276]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800306e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003072:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800307a:	4942      	ldr	r1, [pc, #264]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800307c:	4313      	orrs	r3, r2
 800307e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003086:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800308a:	d105      	bne.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800308c:	4b3d      	ldr	r3, [pc, #244]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	4a3c      	ldr	r2, [pc, #240]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003092:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003096:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d015      	beq.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80030a4:	4b37      	ldr	r3, [pc, #220]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030aa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b2:	4934      	ldr	r1, [pc, #208]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030be:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030c2:	d105      	bne.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030c4:	4b2f      	ldr	r3, [pc, #188]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	4a2e      	ldr	r2, [pc, #184]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030ce:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d015      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80030dc:	4b29      	ldr	r3, [pc, #164]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ea:	4926      	ldr	r1, [pc, #152]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030fa:	d105      	bne.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030fc:	4b21      	ldr	r3, [pc, #132]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	4a20      	ldr	r2, [pc, #128]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003102:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003106:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d015      	beq.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003114:	4b1b      	ldr	r3, [pc, #108]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800311a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003122:	4918      	ldr	r1, [pc, #96]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003124:	4313      	orrs	r3, r2
 8003126:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800312e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003132:	d105      	bne.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003134:	4b13      	ldr	r3, [pc, #76]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	4a12      	ldr	r2, [pc, #72]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800313a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800313e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003148:	2b00      	cmp	r3, #0
 800314a:	d015      	beq.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800314c:	4b0d      	ldr	r3, [pc, #52]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800314e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003152:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800315a:	490a      	ldr	r1, [pc, #40]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800315c:	4313      	orrs	r3, r2
 800315e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003166:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800316a:	d105      	bne.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800316c:	4b05      	ldr	r3, [pc, #20]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	4a04      	ldr	r2, [pc, #16]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003172:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003176:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003178:	7cbb      	ldrb	r3, [r7, #18]
}
 800317a:	4618      	mov	r0, r3
 800317c:	3718      	adds	r7, #24
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	40021000 	.word	0x40021000

08003188 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d101      	bne.n	800319a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e049      	b.n	800322e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d106      	bne.n	80031b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f7fe f830 	bl	8001214 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2202      	movs	r2, #2
 80031b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	3304      	adds	r3, #4
 80031c4:	4619      	mov	r1, r3
 80031c6:	4610      	mov	r0, r2
 80031c8:	f000 fb1a 	bl	8003800 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800322c:	2300      	movs	r3, #0
}
 800322e:	4618      	mov	r0, r3
 8003230:	3708      	adds	r7, #8
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
	...

08003238 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003238:	b480      	push	{r7}
 800323a:	b085      	sub	sp, #20
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003246:	b2db      	uxtb	r3, r3
 8003248:	2b01      	cmp	r3, #1
 800324a:	d001      	beq.n	8003250 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e04a      	b.n	80032e6 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2202      	movs	r2, #2
 8003254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	68da      	ldr	r2, [r3, #12]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f042 0201 	orr.w	r2, r2, #1
 8003266:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a21      	ldr	r2, [pc, #132]	; (80032f4 <HAL_TIM_Base_Start_IT+0xbc>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d018      	beq.n	80032a4 <HAL_TIM_Base_Start_IT+0x6c>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800327a:	d013      	beq.n	80032a4 <HAL_TIM_Base_Start_IT+0x6c>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a1d      	ldr	r2, [pc, #116]	; (80032f8 <HAL_TIM_Base_Start_IT+0xc0>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d00e      	beq.n	80032a4 <HAL_TIM_Base_Start_IT+0x6c>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a1c      	ldr	r2, [pc, #112]	; (80032fc <HAL_TIM_Base_Start_IT+0xc4>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d009      	beq.n	80032a4 <HAL_TIM_Base_Start_IT+0x6c>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a1a      	ldr	r2, [pc, #104]	; (8003300 <HAL_TIM_Base_Start_IT+0xc8>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d004      	beq.n	80032a4 <HAL_TIM_Base_Start_IT+0x6c>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a19      	ldr	r2, [pc, #100]	; (8003304 <HAL_TIM_Base_Start_IT+0xcc>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d115      	bne.n	80032d0 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	689a      	ldr	r2, [r3, #8]
 80032aa:	4b17      	ldr	r3, [pc, #92]	; (8003308 <HAL_TIM_Base_Start_IT+0xd0>)
 80032ac:	4013      	ands	r3, r2
 80032ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2b06      	cmp	r3, #6
 80032b4:	d015      	beq.n	80032e2 <HAL_TIM_Base_Start_IT+0xaa>
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032bc:	d011      	beq.n	80032e2 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f042 0201 	orr.w	r2, r2, #1
 80032cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032ce:	e008      	b.n	80032e2 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f042 0201 	orr.w	r2, r2, #1
 80032de:	601a      	str	r2, [r3, #0]
 80032e0:	e000      	b.n	80032e4 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032e2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3714      	adds	r7, #20
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop
 80032f4:	40012c00 	.word	0x40012c00
 80032f8:	40000400 	.word	0x40000400
 80032fc:	40000800 	.word	0x40000800
 8003300:	40013400 	.word	0x40013400
 8003304:	40014000 	.word	0x40014000
 8003308:	00010007 	.word	0x00010007

0800330c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	f003 0302 	and.w	r3, r3, #2
 800331e:	2b02      	cmp	r3, #2
 8003320:	d122      	bne.n	8003368 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	f003 0302 	and.w	r3, r3, #2
 800332c:	2b02      	cmp	r3, #2
 800332e:	d11b      	bne.n	8003368 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f06f 0202 	mvn.w	r2, #2
 8003338:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2201      	movs	r2, #1
 800333e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	699b      	ldr	r3, [r3, #24]
 8003346:	f003 0303 	and.w	r3, r3, #3
 800334a:	2b00      	cmp	r3, #0
 800334c:	d003      	beq.n	8003356 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f000 fa38 	bl	80037c4 <HAL_TIM_IC_CaptureCallback>
 8003354:	e005      	b.n	8003362 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f000 fa2a 	bl	80037b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f000 fa3b 	bl	80037d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	f003 0304 	and.w	r3, r3, #4
 8003372:	2b04      	cmp	r3, #4
 8003374:	d122      	bne.n	80033bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	f003 0304 	and.w	r3, r3, #4
 8003380:	2b04      	cmp	r3, #4
 8003382:	d11b      	bne.n	80033bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f06f 0204 	mvn.w	r2, #4
 800338c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2202      	movs	r2, #2
 8003392:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	699b      	ldr	r3, [r3, #24]
 800339a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d003      	beq.n	80033aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f000 fa0e 	bl	80037c4 <HAL_TIM_IC_CaptureCallback>
 80033a8:	e005      	b.n	80033b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f000 fa00 	bl	80037b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f000 fa11 	bl	80037d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	691b      	ldr	r3, [r3, #16]
 80033c2:	f003 0308 	and.w	r3, r3, #8
 80033c6:	2b08      	cmp	r3, #8
 80033c8:	d122      	bne.n	8003410 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	f003 0308 	and.w	r3, r3, #8
 80033d4:	2b08      	cmp	r3, #8
 80033d6:	d11b      	bne.n	8003410 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f06f 0208 	mvn.w	r2, #8
 80033e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2204      	movs	r2, #4
 80033e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	69db      	ldr	r3, [r3, #28]
 80033ee:	f003 0303 	and.w	r3, r3, #3
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d003      	beq.n	80033fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f000 f9e4 	bl	80037c4 <HAL_TIM_IC_CaptureCallback>
 80033fc:	e005      	b.n	800340a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f000 f9d6 	bl	80037b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f000 f9e7 	bl	80037d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	f003 0310 	and.w	r3, r3, #16
 800341a:	2b10      	cmp	r3, #16
 800341c:	d122      	bne.n	8003464 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	f003 0310 	and.w	r3, r3, #16
 8003428:	2b10      	cmp	r3, #16
 800342a:	d11b      	bne.n	8003464 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f06f 0210 	mvn.w	r2, #16
 8003434:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2208      	movs	r2, #8
 800343a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	69db      	ldr	r3, [r3, #28]
 8003442:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003446:	2b00      	cmp	r3, #0
 8003448:	d003      	beq.n	8003452 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 f9ba 	bl	80037c4 <HAL_TIM_IC_CaptureCallback>
 8003450:	e005      	b.n	800345e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f000 f9ac 	bl	80037b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f000 f9bd 	bl	80037d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	691b      	ldr	r3, [r3, #16]
 800346a:	f003 0301 	and.w	r3, r3, #1
 800346e:	2b01      	cmp	r3, #1
 8003470:	d10e      	bne.n	8003490 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	f003 0301 	and.w	r3, r3, #1
 800347c:	2b01      	cmp	r3, #1
 800347e:	d107      	bne.n	8003490 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f06f 0201 	mvn.w	r2, #1
 8003488:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f7fd fb06 	bl	8000a9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800349a:	2b80      	cmp	r3, #128	; 0x80
 800349c:	d10e      	bne.n	80034bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034a8:	2b80      	cmp	r3, #128	; 0x80
 80034aa:	d107      	bne.n	80034bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80034b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f000 fb5a 	bl	8003b70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034ca:	d10e      	bne.n	80034ea <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034d6:	2b80      	cmp	r3, #128	; 0x80
 80034d8:	d107      	bne.n	80034ea <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80034e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f000 fb4d 	bl	8003b84 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	691b      	ldr	r3, [r3, #16]
 80034f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034f4:	2b40      	cmp	r3, #64	; 0x40
 80034f6:	d10e      	bne.n	8003516 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003502:	2b40      	cmp	r3, #64	; 0x40
 8003504:	d107      	bne.n	8003516 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800350e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f000 f96b 	bl	80037ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	691b      	ldr	r3, [r3, #16]
 800351c:	f003 0320 	and.w	r3, r3, #32
 8003520:	2b20      	cmp	r3, #32
 8003522:	d10e      	bne.n	8003542 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	f003 0320 	and.w	r3, r3, #32
 800352e:	2b20      	cmp	r3, #32
 8003530:	d107      	bne.n	8003542 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f06f 0220 	mvn.w	r2, #32
 800353a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f000 fb0d 	bl	8003b5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	691b      	ldr	r3, [r3, #16]
 8003548:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800354c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003550:	d10f      	bne.n	8003572 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800355c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003560:	d107      	bne.n	8003572 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800356a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f000 fb13 	bl	8003b98 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	691b      	ldr	r3, [r3, #16]
 8003578:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800357c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003580:	d10f      	bne.n	80035a2 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800358c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003590:	d107      	bne.n	80035a2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800359a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f000 fb05 	bl	8003bac <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	691b      	ldr	r3, [r3, #16]
 80035a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035b0:	d10f      	bne.n	80035d2 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035c0:	d107      	bne.n	80035d2 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80035ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f000 faf7 	bl	8003bc0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	691b      	ldr	r3, [r3, #16]
 80035d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035e0:	d10f      	bne.n	8003602 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035f0:	d107      	bne.n	8003602 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80035fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f000 fae9 	bl	8003bd4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003602:	bf00      	nop
 8003604:	3708      	adds	r7, #8
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
	...

0800360c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800361c:	2b01      	cmp	r3, #1
 800361e:	d101      	bne.n	8003624 <HAL_TIM_ConfigClockSource+0x18>
 8003620:	2302      	movs	r3, #2
 8003622:	e0b9      	b.n	8003798 <HAL_TIM_ConfigClockSource+0x18c>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2202      	movs	r2, #2
 8003630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8003642:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003646:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800364e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	68fa      	ldr	r2, [r7, #12]
 8003656:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2b70      	cmp	r3, #112	; 0x70
 800365e:	d02e      	beq.n	80036be <HAL_TIM_ConfigClockSource+0xb2>
 8003660:	2b70      	cmp	r3, #112	; 0x70
 8003662:	d812      	bhi.n	800368a <HAL_TIM_ConfigClockSource+0x7e>
 8003664:	2b30      	cmp	r3, #48	; 0x30
 8003666:	f000 8084 	beq.w	8003772 <HAL_TIM_ConfigClockSource+0x166>
 800366a:	2b30      	cmp	r3, #48	; 0x30
 800366c:	d806      	bhi.n	800367c <HAL_TIM_ConfigClockSource+0x70>
 800366e:	2b10      	cmp	r3, #16
 8003670:	d07f      	beq.n	8003772 <HAL_TIM_ConfigClockSource+0x166>
 8003672:	2b20      	cmp	r3, #32
 8003674:	d07d      	beq.n	8003772 <HAL_TIM_ConfigClockSource+0x166>
 8003676:	2b00      	cmp	r3, #0
 8003678:	d07b      	beq.n	8003772 <HAL_TIM_ConfigClockSource+0x166>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800367a:	e084      	b.n	8003786 <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 800367c:	2b50      	cmp	r3, #80	; 0x50
 800367e:	d048      	beq.n	8003712 <HAL_TIM_ConfigClockSource+0x106>
 8003680:	2b60      	cmp	r3, #96	; 0x60
 8003682:	d056      	beq.n	8003732 <HAL_TIM_ConfigClockSource+0x126>
 8003684:	2b40      	cmp	r3, #64	; 0x40
 8003686:	d064      	beq.n	8003752 <HAL_TIM_ConfigClockSource+0x146>
      break;
 8003688:	e07d      	b.n	8003786 <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 800368a:	4a45      	ldr	r2, [pc, #276]	; (80037a0 <HAL_TIM_ConfigClockSource+0x194>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d070      	beq.n	8003772 <HAL_TIM_ConfigClockSource+0x166>
 8003690:	4a43      	ldr	r2, [pc, #268]	; (80037a0 <HAL_TIM_ConfigClockSource+0x194>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d809      	bhi.n	80036aa <HAL_TIM_ConfigClockSource+0x9e>
 8003696:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800369a:	d027      	beq.n	80036ec <HAL_TIM_ConfigClockSource+0xe0>
 800369c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80036a0:	d067      	beq.n	8003772 <HAL_TIM_ConfigClockSource+0x166>
 80036a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036a6:	d06d      	beq.n	8003784 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80036a8:	e06d      	b.n	8003786 <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 80036aa:	4a3e      	ldr	r2, [pc, #248]	; (80037a4 <HAL_TIM_ConfigClockSource+0x198>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d060      	beq.n	8003772 <HAL_TIM_ConfigClockSource+0x166>
 80036b0:	4a3d      	ldr	r2, [pc, #244]	; (80037a8 <HAL_TIM_ConfigClockSource+0x19c>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d05d      	beq.n	8003772 <HAL_TIM_ConfigClockSource+0x166>
 80036b6:	4a3d      	ldr	r2, [pc, #244]	; (80037ac <HAL_TIM_ConfigClockSource+0x1a0>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d05a      	beq.n	8003772 <HAL_TIM_ConfigClockSource+0x166>
      break;
 80036bc:	e063      	b.n	8003786 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ETR_SetConfig(htim->Instance,
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6818      	ldr	r0, [r3, #0]
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	6899      	ldr	r1, [r3, #8]
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	685a      	ldr	r2, [r3, #4]
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	f000 f9a3 	bl	8003a18 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80036e0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	68fa      	ldr	r2, [r7, #12]
 80036e8:	609a      	str	r2, [r3, #8]
      break;
 80036ea:	e04c      	b.n	8003786 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ETR_SetConfig(htim->Instance,
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6818      	ldr	r0, [r3, #0]
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	6899      	ldr	r1, [r3, #8]
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	685a      	ldr	r2, [r3, #4]
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	f000 f98c 	bl	8003a18 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	689a      	ldr	r2, [r3, #8]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800370e:	609a      	str	r2, [r3, #8]
      break;
 8003710:	e039      	b.n	8003786 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6818      	ldr	r0, [r3, #0]
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	6859      	ldr	r1, [r3, #4]
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	461a      	mov	r2, r3
 8003720:	f000 f8fe 	bl	8003920 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2150      	movs	r1, #80	; 0x50
 800372a:	4618      	mov	r0, r3
 800372c:	f000 f957 	bl	80039de <TIM_ITRx_SetConfig>
      break;
 8003730:	e029      	b.n	8003786 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6818      	ldr	r0, [r3, #0]
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	6859      	ldr	r1, [r3, #4]
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	461a      	mov	r2, r3
 8003740:	f000 f91d 	bl	800397e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	2160      	movs	r1, #96	; 0x60
 800374a:	4618      	mov	r0, r3
 800374c:	f000 f947 	bl	80039de <TIM_ITRx_SetConfig>
      break;
 8003750:	e019      	b.n	8003786 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6818      	ldr	r0, [r3, #0]
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	6859      	ldr	r1, [r3, #4]
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	461a      	mov	r2, r3
 8003760:	f000 f8de 	bl	8003920 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2140      	movs	r1, #64	; 0x40
 800376a:	4618      	mov	r0, r3
 800376c:	f000 f937 	bl	80039de <TIM_ITRx_SetConfig>
      break;
 8003770:	e009      	b.n	8003786 <HAL_TIM_ConfigClockSource+0x17a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4619      	mov	r1, r3
 800377c:	4610      	mov	r0, r2
 800377e:	f000 f92e 	bl	80039de <TIM_ITRx_SetConfig>
        break;
 8003782:	e000      	b.n	8003786 <HAL_TIM_ConfigClockSource+0x17a>
      break;
 8003784:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2201      	movs	r2, #1
 800378a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003796:	2300      	movs	r3, #0
}
 8003798:	4618      	mov	r0, r3
 800379a:	3710      	adds	r7, #16
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	00100020 	.word	0x00100020
 80037a4:	00100040 	.word	0x00100040
 80037a8:	00100070 	.word	0x00100070
 80037ac:	00100030 	.word	0x00100030

080037b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80037b8:	bf00      	nop
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr

080037c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80037cc:	bf00      	nop
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80037e0:	bf00      	nop
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037f4:	bf00      	nop
 80037f6:	370c      	adds	r7, #12
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003800:	b480      	push	{r7}
 8003802:	b085      	sub	sp, #20
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	4a3c      	ldr	r2, [pc, #240]	; (8003904 <TIM_Base_SetConfig+0x104>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d00f      	beq.n	8003838 <TIM_Base_SetConfig+0x38>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800381e:	d00b      	beq.n	8003838 <TIM_Base_SetConfig+0x38>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	4a39      	ldr	r2, [pc, #228]	; (8003908 <TIM_Base_SetConfig+0x108>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d007      	beq.n	8003838 <TIM_Base_SetConfig+0x38>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	4a38      	ldr	r2, [pc, #224]	; (800390c <TIM_Base_SetConfig+0x10c>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d003      	beq.n	8003838 <TIM_Base_SetConfig+0x38>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	4a37      	ldr	r2, [pc, #220]	; (8003910 <TIM_Base_SetConfig+0x110>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d108      	bne.n	800384a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800383e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	68fa      	ldr	r2, [r7, #12]
 8003846:	4313      	orrs	r3, r2
 8003848:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a2d      	ldr	r2, [pc, #180]	; (8003904 <TIM_Base_SetConfig+0x104>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d01b      	beq.n	800388a <TIM_Base_SetConfig+0x8a>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003858:	d017      	beq.n	800388a <TIM_Base_SetConfig+0x8a>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a2a      	ldr	r2, [pc, #168]	; (8003908 <TIM_Base_SetConfig+0x108>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d013      	beq.n	800388a <TIM_Base_SetConfig+0x8a>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a29      	ldr	r2, [pc, #164]	; (800390c <TIM_Base_SetConfig+0x10c>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d00f      	beq.n	800388a <TIM_Base_SetConfig+0x8a>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a28      	ldr	r2, [pc, #160]	; (8003910 <TIM_Base_SetConfig+0x110>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d00b      	beq.n	800388a <TIM_Base_SetConfig+0x8a>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4a27      	ldr	r2, [pc, #156]	; (8003914 <TIM_Base_SetConfig+0x114>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d007      	beq.n	800388a <TIM_Base_SetConfig+0x8a>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a26      	ldr	r2, [pc, #152]	; (8003918 <TIM_Base_SetConfig+0x118>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d003      	beq.n	800388a <TIM_Base_SetConfig+0x8a>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a25      	ldr	r2, [pc, #148]	; (800391c <TIM_Base_SetConfig+0x11c>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d108      	bne.n	800389c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003890:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	68fa      	ldr	r2, [r7, #12]
 8003898:	4313      	orrs	r3, r2
 800389a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	695b      	ldr	r3, [r3, #20]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	68fa      	ldr	r2, [r7, #12]
 80038ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	689a      	ldr	r2, [r3, #8]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	4a10      	ldr	r2, [pc, #64]	; (8003904 <TIM_Base_SetConfig+0x104>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d00f      	beq.n	80038e8 <TIM_Base_SetConfig+0xe8>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	4a11      	ldr	r2, [pc, #68]	; (8003910 <TIM_Base_SetConfig+0x110>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d00b      	beq.n	80038e8 <TIM_Base_SetConfig+0xe8>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	4a10      	ldr	r2, [pc, #64]	; (8003914 <TIM_Base_SetConfig+0x114>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d007      	beq.n	80038e8 <TIM_Base_SetConfig+0xe8>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	4a0f      	ldr	r2, [pc, #60]	; (8003918 <TIM_Base_SetConfig+0x118>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d003      	beq.n	80038e8 <TIM_Base_SetConfig+0xe8>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	4a0e      	ldr	r2, [pc, #56]	; (800391c <TIM_Base_SetConfig+0x11c>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d103      	bne.n	80038f0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	691a      	ldr	r2, [r3, #16]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	615a      	str	r2, [r3, #20]
}
 80038f6:	bf00      	nop
 80038f8:	3714      	adds	r7, #20
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr
 8003902:	bf00      	nop
 8003904:	40012c00 	.word	0x40012c00
 8003908:	40000400 	.word	0x40000400
 800390c:	40000800 	.word	0x40000800
 8003910:	40013400 	.word	0x40013400
 8003914:	40014000 	.word	0x40014000
 8003918:	40014400 	.word	0x40014400
 800391c:	40014800 	.word	0x40014800

08003920 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003920:	b480      	push	{r7}
 8003922:	b087      	sub	sp, #28
 8003924:	af00      	add	r7, sp, #0
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6a1b      	ldr	r3, [r3, #32]
 8003930:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6a1b      	ldr	r3, [r3, #32]
 8003936:	f023 0201 	bic.w	r2, r3, #1
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	699b      	ldr	r3, [r3, #24]
 8003942:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800394a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	011b      	lsls	r3, r3, #4
 8003950:	693a      	ldr	r2, [r7, #16]
 8003952:	4313      	orrs	r3, r2
 8003954:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	f023 030a 	bic.w	r3, r3, #10
 800395c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800395e:	697a      	ldr	r2, [r7, #20]
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	4313      	orrs	r3, r2
 8003964:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	693a      	ldr	r2, [r7, #16]
 800396a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	697a      	ldr	r2, [r7, #20]
 8003970:	621a      	str	r2, [r3, #32]
}
 8003972:	bf00      	nop
 8003974:	371c      	adds	r7, #28
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr

0800397e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800397e:	b480      	push	{r7}
 8003980:	b087      	sub	sp, #28
 8003982:	af00      	add	r7, sp, #0
 8003984:	60f8      	str	r0, [r7, #12]
 8003986:	60b9      	str	r1, [r7, #8]
 8003988:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6a1b      	ldr	r3, [r3, #32]
 800398e:	f023 0210 	bic.w	r2, r3, #16
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	699b      	ldr	r3, [r3, #24]
 800399a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	6a1b      	ldr	r3, [r3, #32]
 80039a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80039a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	031b      	lsls	r3, r3, #12
 80039ae:	697a      	ldr	r2, [r7, #20]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80039ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	011b      	lsls	r3, r3, #4
 80039c0:	693a      	ldr	r2, [r7, #16]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	697a      	ldr	r2, [r7, #20]
 80039ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	693a      	ldr	r2, [r7, #16]
 80039d0:	621a      	str	r2, [r3, #32]
}
 80039d2:	bf00      	nop
 80039d4:	371c      	adds	r7, #28
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr

080039de <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80039de:	b480      	push	{r7}
 80039e0:	b085      	sub	sp, #20
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
 80039e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80039f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80039fa:	683a      	ldr	r2, [r7, #0]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	f043 0307 	orr.w	r3, r3, #7
 8003a04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	68fa      	ldr	r2, [r7, #12]
 8003a0a:	609a      	str	r2, [r3, #8]
}
 8003a0c:	bf00      	nop
 8003a0e:	3714      	adds	r7, #20
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b087      	sub	sp, #28
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	607a      	str	r2, [r7, #4]
 8003a24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	021a      	lsls	r2, r3, #8
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	431a      	orrs	r2, r3
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	697a      	ldr	r2, [r7, #20]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	697a      	ldr	r2, [r7, #20]
 8003a4a:	609a      	str	r2, [r3, #8]
}
 8003a4c:	bf00      	nop
 8003a4e:	371c      	adds	r7, #28
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b085      	sub	sp, #20
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d101      	bne.n	8003a70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a6c:	2302      	movs	r3, #2
 8003a6e:	e065      	b.n	8003b3c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2202      	movs	r2, #2
 8003a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a2c      	ldr	r2, [pc, #176]	; (8003b48 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d004      	beq.n	8003aa4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a2b      	ldr	r2, [pc, #172]	; (8003b4c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d108      	bne.n	8003ab6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003aaa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	68fa      	ldr	r2, [r7, #12]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003abc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ac0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	68fa      	ldr	r2, [r7, #12]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68fa      	ldr	r2, [r7, #12]
 8003ad2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a1b      	ldr	r2, [pc, #108]	; (8003b48 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d018      	beq.n	8003b10 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ae6:	d013      	beq.n	8003b10 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a18      	ldr	r2, [pc, #96]	; (8003b50 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d00e      	beq.n	8003b10 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a17      	ldr	r2, [pc, #92]	; (8003b54 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d009      	beq.n	8003b10 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a12      	ldr	r2, [pc, #72]	; (8003b4c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d004      	beq.n	8003b10 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a13      	ldr	r2, [pc, #76]	; (8003b58 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d10c      	bne.n	8003b2a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b16:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	68ba      	ldr	r2, [r7, #8]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	68ba      	ldr	r2, [r7, #8]
 8003b28:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b3a:	2300      	movs	r3, #0
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3714      	adds	r7, #20
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr
 8003b48:	40012c00 	.word	0x40012c00
 8003b4c:	40013400 	.word	0x40013400
 8003b50:	40000400 	.word	0x40000400
 8003b54:	40000800 	.word	0x40000800
 8003b58:	40014000 	.word	0x40014000

08003b5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b64:	bf00      	nop
 8003b66:	370c      	adds	r7, #12
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr

08003b70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b78:	bf00      	nop
 8003b7a:	370c      	adds	r7, #12
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003b8c:	bf00      	nop
 8003b8e:	370c      	adds	r7, #12
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8003ba0:	bf00      	nop
 8003ba2:	370c      	adds	r7, #12
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr

08003bac <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8003bb4:	bf00      	nop
 8003bb6:	370c      	adds	r7, #12
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr

08003bc0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8003bc8:	bf00      	nop
 8003bca:	370c      	adds	r7, #12
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr

08003bd4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8003bdc:	bf00      	nop
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr

08003be8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b082      	sub	sp, #8
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d101      	bne.n	8003bfa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e042      	b.n	8003c80 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d106      	bne.n	8003c12 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f7fd fb25 	bl	800125c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2224      	movs	r2, #36	; 0x24
 8003c16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f022 0201 	bic.w	r2, r2, #1
 8003c28:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 f82c 	bl	8003c88 <UART_SetConfig>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d101      	bne.n	8003c3a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e022      	b.n	8003c80 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d002      	beq.n	8003c48 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f000 fac8 	bl	80041d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	685a      	ldr	r2, [r3, #4]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c56:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	689a      	ldr	r2, [r3, #8]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c66:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f042 0201 	orr.w	r2, r2, #1
 8003c76:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f000 fb4f 	bl	800431c <UART_CheckIdleState>
 8003c7e:	4603      	mov	r3, r0
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3708      	adds	r7, #8
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c88:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003c8c:	b088      	sub	sp, #32
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c92:	2300      	movs	r3, #0
 8003c94:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	689a      	ldr	r2, [r3, #8]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	431a      	orrs	r2, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	695b      	ldr	r3, [r3, #20]
 8003ca4:	431a      	orrs	r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	69db      	ldr	r3, [r3, #28]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cb2:	69fa      	ldr	r2, [r7, #28]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	4bb0      	ldr	r3, [pc, #704]	; (8003f80 <UART_SetConfig+0x2f8>)
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	6812      	ldr	r2, [r2, #0]
 8003cc6:	69f9      	ldr	r1, [r7, #28]
 8003cc8:	430b      	orrs	r3, r1
 8003cca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	68da      	ldr	r2, [r3, #12]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	430a      	orrs	r2, r1
 8003ce0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	699b      	ldr	r3, [r3, #24]
 8003ce6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4aa5      	ldr	r2, [pc, #660]	; (8003f84 <UART_SetConfig+0x2fc>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d004      	beq.n	8003cfc <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a1b      	ldr	r3, [r3, #32]
 8003cf6:	69fa      	ldr	r2, [r7, #28]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003d06:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	6812      	ldr	r2, [r2, #0]
 8003d0e:	69f9      	ldr	r1, [r7, #28]
 8003d10:	430b      	orrs	r3, r1
 8003d12:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d1a:	f023 010f 	bic.w	r1, r3, #15
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	430a      	orrs	r2, r1
 8003d28:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a96      	ldr	r2, [pc, #600]	; (8003f88 <UART_SetConfig+0x300>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d121      	bne.n	8003d78 <UART_SetConfig+0xf0>
 8003d34:	4b95      	ldr	r3, [pc, #596]	; (8003f8c <UART_SetConfig+0x304>)
 8003d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d3a:	f003 0303 	and.w	r3, r3, #3
 8003d3e:	2b03      	cmp	r3, #3
 8003d40:	d816      	bhi.n	8003d70 <UART_SetConfig+0xe8>
 8003d42:	a201      	add	r2, pc, #4	; (adr r2, 8003d48 <UART_SetConfig+0xc0>)
 8003d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d48:	08003d59 	.word	0x08003d59
 8003d4c:	08003d65 	.word	0x08003d65
 8003d50:	08003d5f 	.word	0x08003d5f
 8003d54:	08003d6b 	.word	0x08003d6b
 8003d58:	2301      	movs	r3, #1
 8003d5a:	76fb      	strb	r3, [r7, #27]
 8003d5c:	e0be      	b.n	8003edc <UART_SetConfig+0x254>
 8003d5e:	2302      	movs	r3, #2
 8003d60:	76fb      	strb	r3, [r7, #27]
 8003d62:	e0bb      	b.n	8003edc <UART_SetConfig+0x254>
 8003d64:	2304      	movs	r3, #4
 8003d66:	76fb      	strb	r3, [r7, #27]
 8003d68:	e0b8      	b.n	8003edc <UART_SetConfig+0x254>
 8003d6a:	2308      	movs	r3, #8
 8003d6c:	76fb      	strb	r3, [r7, #27]
 8003d6e:	e0b5      	b.n	8003edc <UART_SetConfig+0x254>
 8003d70:	2310      	movs	r3, #16
 8003d72:	76fb      	strb	r3, [r7, #27]
 8003d74:	bf00      	nop
 8003d76:	e0b1      	b.n	8003edc <UART_SetConfig+0x254>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a84      	ldr	r2, [pc, #528]	; (8003f90 <UART_SetConfig+0x308>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d134      	bne.n	8003dec <UART_SetConfig+0x164>
 8003d82:	4b82      	ldr	r3, [pc, #520]	; (8003f8c <UART_SetConfig+0x304>)
 8003d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d88:	f003 030c 	and.w	r3, r3, #12
 8003d8c:	2b0c      	cmp	r3, #12
 8003d8e:	d829      	bhi.n	8003de4 <UART_SetConfig+0x15c>
 8003d90:	a201      	add	r2, pc, #4	; (adr r2, 8003d98 <UART_SetConfig+0x110>)
 8003d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d96:	bf00      	nop
 8003d98:	08003dcd 	.word	0x08003dcd
 8003d9c:	08003de5 	.word	0x08003de5
 8003da0:	08003de5 	.word	0x08003de5
 8003da4:	08003de5 	.word	0x08003de5
 8003da8:	08003dd9 	.word	0x08003dd9
 8003dac:	08003de5 	.word	0x08003de5
 8003db0:	08003de5 	.word	0x08003de5
 8003db4:	08003de5 	.word	0x08003de5
 8003db8:	08003dd3 	.word	0x08003dd3
 8003dbc:	08003de5 	.word	0x08003de5
 8003dc0:	08003de5 	.word	0x08003de5
 8003dc4:	08003de5 	.word	0x08003de5
 8003dc8:	08003ddf 	.word	0x08003ddf
 8003dcc:	2300      	movs	r3, #0
 8003dce:	76fb      	strb	r3, [r7, #27]
 8003dd0:	e084      	b.n	8003edc <UART_SetConfig+0x254>
 8003dd2:	2302      	movs	r3, #2
 8003dd4:	76fb      	strb	r3, [r7, #27]
 8003dd6:	e081      	b.n	8003edc <UART_SetConfig+0x254>
 8003dd8:	2304      	movs	r3, #4
 8003dda:	76fb      	strb	r3, [r7, #27]
 8003ddc:	e07e      	b.n	8003edc <UART_SetConfig+0x254>
 8003dde:	2308      	movs	r3, #8
 8003de0:	76fb      	strb	r3, [r7, #27]
 8003de2:	e07b      	b.n	8003edc <UART_SetConfig+0x254>
 8003de4:	2310      	movs	r3, #16
 8003de6:	76fb      	strb	r3, [r7, #27]
 8003de8:	bf00      	nop
 8003dea:	e077      	b.n	8003edc <UART_SetConfig+0x254>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a68      	ldr	r2, [pc, #416]	; (8003f94 <UART_SetConfig+0x30c>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d120      	bne.n	8003e38 <UART_SetConfig+0x1b0>
 8003df6:	4b65      	ldr	r3, [pc, #404]	; (8003f8c <UART_SetConfig+0x304>)
 8003df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dfc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003e00:	2b10      	cmp	r3, #16
 8003e02:	d00f      	beq.n	8003e24 <UART_SetConfig+0x19c>
 8003e04:	2b10      	cmp	r3, #16
 8003e06:	d802      	bhi.n	8003e0e <UART_SetConfig+0x186>
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d005      	beq.n	8003e18 <UART_SetConfig+0x190>
 8003e0c:	e010      	b.n	8003e30 <UART_SetConfig+0x1a8>
 8003e0e:	2b20      	cmp	r3, #32
 8003e10:	d005      	beq.n	8003e1e <UART_SetConfig+0x196>
 8003e12:	2b30      	cmp	r3, #48	; 0x30
 8003e14:	d009      	beq.n	8003e2a <UART_SetConfig+0x1a2>
 8003e16:	e00b      	b.n	8003e30 <UART_SetConfig+0x1a8>
 8003e18:	2300      	movs	r3, #0
 8003e1a:	76fb      	strb	r3, [r7, #27]
 8003e1c:	e05e      	b.n	8003edc <UART_SetConfig+0x254>
 8003e1e:	2302      	movs	r3, #2
 8003e20:	76fb      	strb	r3, [r7, #27]
 8003e22:	e05b      	b.n	8003edc <UART_SetConfig+0x254>
 8003e24:	2304      	movs	r3, #4
 8003e26:	76fb      	strb	r3, [r7, #27]
 8003e28:	e058      	b.n	8003edc <UART_SetConfig+0x254>
 8003e2a:	2308      	movs	r3, #8
 8003e2c:	76fb      	strb	r3, [r7, #27]
 8003e2e:	e055      	b.n	8003edc <UART_SetConfig+0x254>
 8003e30:	2310      	movs	r3, #16
 8003e32:	76fb      	strb	r3, [r7, #27]
 8003e34:	bf00      	nop
 8003e36:	e051      	b.n	8003edc <UART_SetConfig+0x254>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a56      	ldr	r2, [pc, #344]	; (8003f98 <UART_SetConfig+0x310>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d120      	bne.n	8003e84 <UART_SetConfig+0x1fc>
 8003e42:	4b52      	ldr	r3, [pc, #328]	; (8003f8c <UART_SetConfig+0x304>)
 8003e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e48:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003e4c:	2b40      	cmp	r3, #64	; 0x40
 8003e4e:	d00f      	beq.n	8003e70 <UART_SetConfig+0x1e8>
 8003e50:	2b40      	cmp	r3, #64	; 0x40
 8003e52:	d802      	bhi.n	8003e5a <UART_SetConfig+0x1d2>
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d005      	beq.n	8003e64 <UART_SetConfig+0x1dc>
 8003e58:	e010      	b.n	8003e7c <UART_SetConfig+0x1f4>
 8003e5a:	2b80      	cmp	r3, #128	; 0x80
 8003e5c:	d005      	beq.n	8003e6a <UART_SetConfig+0x1e2>
 8003e5e:	2bc0      	cmp	r3, #192	; 0xc0
 8003e60:	d009      	beq.n	8003e76 <UART_SetConfig+0x1ee>
 8003e62:	e00b      	b.n	8003e7c <UART_SetConfig+0x1f4>
 8003e64:	2300      	movs	r3, #0
 8003e66:	76fb      	strb	r3, [r7, #27]
 8003e68:	e038      	b.n	8003edc <UART_SetConfig+0x254>
 8003e6a:	2302      	movs	r3, #2
 8003e6c:	76fb      	strb	r3, [r7, #27]
 8003e6e:	e035      	b.n	8003edc <UART_SetConfig+0x254>
 8003e70:	2304      	movs	r3, #4
 8003e72:	76fb      	strb	r3, [r7, #27]
 8003e74:	e032      	b.n	8003edc <UART_SetConfig+0x254>
 8003e76:	2308      	movs	r3, #8
 8003e78:	76fb      	strb	r3, [r7, #27]
 8003e7a:	e02f      	b.n	8003edc <UART_SetConfig+0x254>
 8003e7c:	2310      	movs	r3, #16
 8003e7e:	76fb      	strb	r3, [r7, #27]
 8003e80:	bf00      	nop
 8003e82:	e02b      	b.n	8003edc <UART_SetConfig+0x254>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a3e      	ldr	r2, [pc, #248]	; (8003f84 <UART_SetConfig+0x2fc>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d124      	bne.n	8003ed8 <UART_SetConfig+0x250>
 8003e8e:	4b3f      	ldr	r3, [pc, #252]	; (8003f8c <UART_SetConfig+0x304>)
 8003e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e94:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003e98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e9c:	d012      	beq.n	8003ec4 <UART_SetConfig+0x23c>
 8003e9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ea2:	d802      	bhi.n	8003eaa <UART_SetConfig+0x222>
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d007      	beq.n	8003eb8 <UART_SetConfig+0x230>
 8003ea8:	e012      	b.n	8003ed0 <UART_SetConfig+0x248>
 8003eaa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003eae:	d006      	beq.n	8003ebe <UART_SetConfig+0x236>
 8003eb0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003eb4:	d009      	beq.n	8003eca <UART_SetConfig+0x242>
 8003eb6:	e00b      	b.n	8003ed0 <UART_SetConfig+0x248>
 8003eb8:	2300      	movs	r3, #0
 8003eba:	76fb      	strb	r3, [r7, #27]
 8003ebc:	e00e      	b.n	8003edc <UART_SetConfig+0x254>
 8003ebe:	2302      	movs	r3, #2
 8003ec0:	76fb      	strb	r3, [r7, #27]
 8003ec2:	e00b      	b.n	8003edc <UART_SetConfig+0x254>
 8003ec4:	2304      	movs	r3, #4
 8003ec6:	76fb      	strb	r3, [r7, #27]
 8003ec8:	e008      	b.n	8003edc <UART_SetConfig+0x254>
 8003eca:	2308      	movs	r3, #8
 8003ecc:	76fb      	strb	r3, [r7, #27]
 8003ece:	e005      	b.n	8003edc <UART_SetConfig+0x254>
 8003ed0:	2310      	movs	r3, #16
 8003ed2:	76fb      	strb	r3, [r7, #27]
 8003ed4:	bf00      	nop
 8003ed6:	e001      	b.n	8003edc <UART_SetConfig+0x254>
 8003ed8:	2310      	movs	r3, #16
 8003eda:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a28      	ldr	r2, [pc, #160]	; (8003f84 <UART_SetConfig+0x2fc>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	f040 80a1 	bne.w	800402a <UART_SetConfig+0x3a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003ee8:	7efb      	ldrb	r3, [r7, #27]
 8003eea:	2b08      	cmp	r3, #8
 8003eec:	d823      	bhi.n	8003f36 <UART_SetConfig+0x2ae>
 8003eee:	a201      	add	r2, pc, #4	; (adr r2, 8003ef4 <UART_SetConfig+0x26c>)
 8003ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ef4:	08003f19 	.word	0x08003f19
 8003ef8:	08003f37 	.word	0x08003f37
 8003efc:	08003f21 	.word	0x08003f21
 8003f00:	08003f37 	.word	0x08003f37
 8003f04:	08003f27 	.word	0x08003f27
 8003f08:	08003f37 	.word	0x08003f37
 8003f0c:	08003f37 	.word	0x08003f37
 8003f10:	08003f37 	.word	0x08003f37
 8003f14:	08003f2f 	.word	0x08003f2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f18:	f7fe fed4 	bl	8002cc4 <HAL_RCC_GetPCLK1Freq>
 8003f1c:	6178      	str	r0, [r7, #20]
        break;
 8003f1e:	e00f      	b.n	8003f40 <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f20:	4b1e      	ldr	r3, [pc, #120]	; (8003f9c <UART_SetConfig+0x314>)
 8003f22:	617b      	str	r3, [r7, #20]
        break;
 8003f24:	e00c      	b.n	8003f40 <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f26:	f7fe fe5f 	bl	8002be8 <HAL_RCC_GetSysClockFreq>
 8003f2a:	6178      	str	r0, [r7, #20]
        break;
 8003f2c:	e008      	b.n	8003f40 <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f32:	617b      	str	r3, [r7, #20]
        break;
 8003f34:	e004      	b.n	8003f40 <UART_SetConfig+0x2b8>
      default:
        pclk = 0U;
 8003f36:	2300      	movs	r3, #0
 8003f38:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	76bb      	strb	r3, [r7, #26]
        break;
 8003f3e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	f000 8130 	beq.w	80041a8 <UART_SetConfig+0x520>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4c:	4a14      	ldr	r2, [pc, #80]	; (8003fa0 <UART_SetConfig+0x318>)
 8003f4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f52:	461a      	mov	r2, r3
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f5a:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685a      	ldr	r2, [r3, #4]
 8003f60:	4613      	mov	r3, r2
 8003f62:	005b      	lsls	r3, r3, #1
 8003f64:	4413      	add	r3, r2
 8003f66:	68ba      	ldr	r2, [r7, #8]
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d305      	bcc.n	8003f78 <UART_SetConfig+0x2f0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003f72:	68ba      	ldr	r2, [r7, #8]
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d915      	bls.n	8003fa4 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	76bb      	strb	r3, [r7, #26]
 8003f7c:	e114      	b.n	80041a8 <UART_SetConfig+0x520>
 8003f7e:	bf00      	nop
 8003f80:	cfff69f3 	.word	0xcfff69f3
 8003f84:	40008000 	.word	0x40008000
 8003f88:	40013800 	.word	0x40013800
 8003f8c:	40021000 	.word	0x40021000
 8003f90:	40004400 	.word	0x40004400
 8003f94:	40004800 	.word	0x40004800
 8003f98:	40004c00 	.word	0x40004c00
 8003f9c:	00f42400 	.word	0x00f42400
 8003fa0:	0800478c 	.word	0x0800478c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f04f 0100 	mov.w	r1, #0
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb0:	4a87      	ldr	r2, [pc, #540]	; (80041d0 <UART_SetConfig+0x548>)
 8003fb2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	f04f 0400 	mov.w	r4, #0
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	4623      	mov	r3, r4
 8003fc0:	f7fc f92a 	bl	8000218 <__aeabi_uldivmod>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	460c      	mov	r4, r1
 8003fc8:	4619      	mov	r1, r3
 8003fca:	4622      	mov	r2, r4
 8003fcc:	f04f 0300 	mov.w	r3, #0
 8003fd0:	f04f 0400 	mov.w	r4, #0
 8003fd4:	0214      	lsls	r4, r2, #8
 8003fd6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003fda:	020b      	lsls	r3, r1, #8
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	6852      	ldr	r2, [r2, #4]
 8003fe0:	0852      	lsrs	r2, r2, #1
 8003fe2:	4611      	mov	r1, r2
 8003fe4:	f04f 0200 	mov.w	r2, #0
 8003fe8:	eb13 0b01 	adds.w	fp, r3, r1
 8003fec:	eb44 0c02 	adc.w	ip, r4, r2
 8003ff0:	4658      	mov	r0, fp
 8003ff2:	4661      	mov	r1, ip
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	f04f 0400 	mov.w	r4, #0
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	4623      	mov	r3, r4
 8004000:	f7fc f90a 	bl	8000218 <__aeabi_uldivmod>
 8004004:	4603      	mov	r3, r0
 8004006:	460c      	mov	r4, r1
 8004008:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004010:	d308      	bcc.n	8004024 <UART_SetConfig+0x39c>
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004018:	d204      	bcs.n	8004024 <UART_SetConfig+0x39c>
        {
          huart->Instance->BRR = usartdiv;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	693a      	ldr	r2, [r7, #16]
 8004020:	60da      	str	r2, [r3, #12]
 8004022:	e0c1      	b.n	80041a8 <UART_SetConfig+0x520>
        }
        else
        {
          ret = HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	76bb      	strb	r3, [r7, #26]
 8004028:	e0be      	b.n	80041a8 <UART_SetConfig+0x520>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	69db      	ldr	r3, [r3, #28]
 800402e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004032:	d164      	bne.n	80040fe <UART_SetConfig+0x476>
  {
    switch (clocksource)
 8004034:	7efb      	ldrb	r3, [r7, #27]
 8004036:	2b08      	cmp	r3, #8
 8004038:	d827      	bhi.n	800408a <UART_SetConfig+0x402>
 800403a:	a201      	add	r2, pc, #4	; (adr r2, 8004040 <UART_SetConfig+0x3b8>)
 800403c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004040:	08004065 	.word	0x08004065
 8004044:	0800406d 	.word	0x0800406d
 8004048:	08004075 	.word	0x08004075
 800404c:	0800408b 	.word	0x0800408b
 8004050:	0800407b 	.word	0x0800407b
 8004054:	0800408b 	.word	0x0800408b
 8004058:	0800408b 	.word	0x0800408b
 800405c:	0800408b 	.word	0x0800408b
 8004060:	08004083 	.word	0x08004083
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004064:	f7fe fe2e 	bl	8002cc4 <HAL_RCC_GetPCLK1Freq>
 8004068:	6178      	str	r0, [r7, #20]
        break;
 800406a:	e013      	b.n	8004094 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800406c:	f7fe fe40 	bl	8002cf0 <HAL_RCC_GetPCLK2Freq>
 8004070:	6178      	str	r0, [r7, #20]
        break;
 8004072:	e00f      	b.n	8004094 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004074:	4b57      	ldr	r3, [pc, #348]	; (80041d4 <UART_SetConfig+0x54c>)
 8004076:	617b      	str	r3, [r7, #20]
        break;
 8004078:	e00c      	b.n	8004094 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800407a:	f7fe fdb5 	bl	8002be8 <HAL_RCC_GetSysClockFreq>
 800407e:	6178      	str	r0, [r7, #20]
        break;
 8004080:	e008      	b.n	8004094 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004082:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004086:	617b      	str	r3, [r7, #20]
        break;
 8004088:	e004      	b.n	8004094 <UART_SetConfig+0x40c>
      default:
        pclk = 0U;
 800408a:	2300      	movs	r3, #0
 800408c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	76bb      	strb	r3, [r7, #26]
        break;
 8004092:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	2b00      	cmp	r3, #0
 8004098:	f000 8086 	beq.w	80041a8 <UART_SetConfig+0x520>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a0:	4a4b      	ldr	r2, [pc, #300]	; (80041d0 <UART_SetConfig+0x548>)
 80040a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80040a6:	461a      	mov	r2, r3
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80040ae:	005a      	lsls	r2, r3, #1
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	085b      	lsrs	r3, r3, #1
 80040b6:	441a      	add	r2, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	2b0f      	cmp	r3, #15
 80040c8:	d916      	bls.n	80040f8 <UART_SetConfig+0x470>
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040d0:	d212      	bcs.n	80040f8 <UART_SetConfig+0x470>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	f023 030f 	bic.w	r3, r3, #15
 80040da:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	085b      	lsrs	r3, r3, #1
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	f003 0307 	and.w	r3, r3, #7
 80040e6:	b29a      	uxth	r2, r3
 80040e8:	89fb      	ldrh	r3, [r7, #14]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	89fa      	ldrh	r2, [r7, #14]
 80040f4:	60da      	str	r2, [r3, #12]
 80040f6:	e057      	b.n	80041a8 <UART_SetConfig+0x520>
      }
      else
      {
        ret = HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	76bb      	strb	r3, [r7, #26]
 80040fc:	e054      	b.n	80041a8 <UART_SetConfig+0x520>
      }
    }
  }
  else
  {
    switch (clocksource)
 80040fe:	7efb      	ldrb	r3, [r7, #27]
 8004100:	2b08      	cmp	r3, #8
 8004102:	d828      	bhi.n	8004156 <UART_SetConfig+0x4ce>
 8004104:	a201      	add	r2, pc, #4	; (adr r2, 800410c <UART_SetConfig+0x484>)
 8004106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800410a:	bf00      	nop
 800410c:	08004131 	.word	0x08004131
 8004110:	08004139 	.word	0x08004139
 8004114:	08004141 	.word	0x08004141
 8004118:	08004157 	.word	0x08004157
 800411c:	08004147 	.word	0x08004147
 8004120:	08004157 	.word	0x08004157
 8004124:	08004157 	.word	0x08004157
 8004128:	08004157 	.word	0x08004157
 800412c:	0800414f 	.word	0x0800414f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004130:	f7fe fdc8 	bl	8002cc4 <HAL_RCC_GetPCLK1Freq>
 8004134:	6178      	str	r0, [r7, #20]
        break;
 8004136:	e013      	b.n	8004160 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004138:	f7fe fdda 	bl	8002cf0 <HAL_RCC_GetPCLK2Freq>
 800413c:	6178      	str	r0, [r7, #20]
        break;
 800413e:	e00f      	b.n	8004160 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004140:	4b24      	ldr	r3, [pc, #144]	; (80041d4 <UART_SetConfig+0x54c>)
 8004142:	617b      	str	r3, [r7, #20]
        break;
 8004144:	e00c      	b.n	8004160 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004146:	f7fe fd4f 	bl	8002be8 <HAL_RCC_GetSysClockFreq>
 800414a:	6178      	str	r0, [r7, #20]
        break;
 800414c:	e008      	b.n	8004160 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800414e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004152:	617b      	str	r3, [r7, #20]
        break;
 8004154:	e004      	b.n	8004160 <UART_SetConfig+0x4d8>
      default:
        pclk = 0U;
 8004156:	2300      	movs	r3, #0
 8004158:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	76bb      	strb	r3, [r7, #26]
        break;
 800415e:	bf00      	nop
    }

    if (pclk != 0U)
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d020      	beq.n	80041a8 <UART_SetConfig+0x520>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416a:	4a19      	ldr	r2, [pc, #100]	; (80041d0 <UART_SetConfig+0x548>)
 800416c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004170:	461a      	mov	r2, r3
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	fbb3 f2f2 	udiv	r2, r3, r2
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	085b      	lsrs	r3, r3, #1
 800417e:	441a      	add	r2, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	fbb2 f3f3 	udiv	r3, r2, r3
 8004188:	b29b      	uxth	r3, r3
 800418a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	2b0f      	cmp	r3, #15
 8004190:	d908      	bls.n	80041a4 <UART_SetConfig+0x51c>
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004198:	d204      	bcs.n	80041a4 <UART_SetConfig+0x51c>
      {
        huart->Instance->BRR = usartdiv;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	693a      	ldr	r2, [r7, #16]
 80041a0:	60da      	str	r2, [r3, #12]
 80041a2:	e001      	b.n	80041a8 <UART_SetConfig+0x520>
      }
      else
      {
        ret = HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2201      	movs	r2, #1
 80041ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80041c4:	7ebb      	ldrb	r3, [r7, #26]
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3720      	adds	r7, #32
 80041ca:	46bd      	mov	sp, r7
 80041cc:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80041d0:	0800478c 	.word	0x0800478c
 80041d4:	00f42400 	.word	0x00f42400

080041d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e4:	f003 0301 	and.w	r3, r3, #1
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d00a      	beq.n	8004202 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	430a      	orrs	r2, r1
 8004200:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004206:	f003 0302 	and.w	r3, r3, #2
 800420a:	2b00      	cmp	r3, #0
 800420c:	d00a      	beq.n	8004224 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	430a      	orrs	r2, r1
 8004222:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004228:	f003 0304 	and.w	r3, r3, #4
 800422c:	2b00      	cmp	r3, #0
 800422e:	d00a      	beq.n	8004246 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	430a      	orrs	r2, r1
 8004244:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800424a:	f003 0308 	and.w	r3, r3, #8
 800424e:	2b00      	cmp	r3, #0
 8004250:	d00a      	beq.n	8004268 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	430a      	orrs	r2, r1
 8004266:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800426c:	f003 0310 	and.w	r3, r3, #16
 8004270:	2b00      	cmp	r3, #0
 8004272:	d00a      	beq.n	800428a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	430a      	orrs	r2, r1
 8004288:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800428e:	f003 0320 	and.w	r3, r3, #32
 8004292:	2b00      	cmp	r3, #0
 8004294:	d00a      	beq.n	80042ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	430a      	orrs	r2, r1
 80042aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d01a      	beq.n	80042ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	430a      	orrs	r2, r1
 80042cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042d6:	d10a      	bne.n	80042ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	430a      	orrs	r2, r1
 80042ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d00a      	beq.n	8004310 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	430a      	orrs	r2, r1
 800430e:	605a      	str	r2, [r3, #4]
  }
}
 8004310:	bf00      	nop
 8004312:	370c      	adds	r7, #12
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr

0800431c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b086      	sub	sp, #24
 8004320:	af02      	add	r7, sp, #8
 8004322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800432c:	f7fd f8d4 	bl	80014d8 <HAL_GetTick>
 8004330:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0308 	and.w	r3, r3, #8
 800433c:	2b08      	cmp	r3, #8
 800433e:	d10e      	bne.n	800435e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004340:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004344:	9300      	str	r3, [sp, #0]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2200      	movs	r2, #0
 800434a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f000 f82c 	bl	80043ac <UART_WaitOnFlagUntilTimeout>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d001      	beq.n	800435e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e022      	b.n	80043a4 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0304 	and.w	r3, r3, #4
 8004368:	2b04      	cmp	r3, #4
 800436a:	d10e      	bne.n	800438a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800436c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004370:	9300      	str	r3, [sp, #0]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2200      	movs	r2, #0
 8004376:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f000 f816 	bl	80043ac <UART_WaitOnFlagUntilTimeout>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d001      	beq.n	800438a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e00c      	b.n	80043a4 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2220      	movs	r2, #32
 800438e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2220      	movs	r2, #32
 8004396:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80043a2:	2300      	movs	r3, #0
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3710      	adds	r7, #16
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	60b9      	str	r1, [r7, #8]
 80043b6:	603b      	str	r3, [r7, #0]
 80043b8:	4613      	mov	r3, r2
 80043ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043bc:	e062      	b.n	8004484 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043c4:	d05e      	beq.n	8004484 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043c6:	f7fd f887 	bl	80014d8 <HAL_GetTick>
 80043ca:	4602      	mov	r2, r0
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	69ba      	ldr	r2, [r7, #24]
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d302      	bcc.n	80043dc <UART_WaitOnFlagUntilTimeout+0x30>
 80043d6:	69bb      	ldr	r3, [r7, #24]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d11d      	bne.n	8004418 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80043ea:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	689a      	ldr	r2, [r3, #8]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f022 0201 	bic.w	r2, r2, #1
 80043fa:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2220      	movs	r2, #32
 8004400:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2220      	movs	r2, #32
 8004408:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2200      	movs	r2, #0
 8004410:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004414:	2303      	movs	r3, #3
 8004416:	e045      	b.n	80044a4 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 0304 	and.w	r3, r3, #4
 8004422:	2b00      	cmp	r3, #0
 8004424:	d02e      	beq.n	8004484 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	69db      	ldr	r3, [r3, #28]
 800442c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004430:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004434:	d126      	bne.n	8004484 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800443e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800444e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	689a      	ldr	r2, [r3, #8]
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f022 0201 	bic.w	r2, r2, #1
 800445e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2220      	movs	r2, #32
 8004464:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2220      	movs	r2, #32
 800446c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2220      	movs	r2, #32
 8004474:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2200      	movs	r2, #0
 800447c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8004480:	2303      	movs	r3, #3
 8004482:	e00f      	b.n	80044a4 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	69da      	ldr	r2, [r3, #28]
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	4013      	ands	r3, r2
 800448e:	68ba      	ldr	r2, [r7, #8]
 8004490:	429a      	cmp	r2, r3
 8004492:	bf0c      	ite	eq
 8004494:	2301      	moveq	r3, #1
 8004496:	2300      	movne	r3, #0
 8004498:	b2db      	uxtb	r3, r3
 800449a:	461a      	mov	r2, r3
 800449c:	79fb      	ldrb	r3, [r7, #7]
 800449e:	429a      	cmp	r2, r3
 80044a0:	d08d      	beq.n	80043be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044a2:	2300      	movs	r3, #0
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3710      	adds	r7, #16
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}

080044ac <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b085      	sub	sp, #20
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d101      	bne.n	80044c2 <HAL_UARTEx_DisableFifoMode+0x16>
 80044be:	2302      	movs	r3, #2
 80044c0:	e027      	b.n	8004512 <HAL_UARTEx_DisableFifoMode+0x66>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2201      	movs	r2, #1
 80044c6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2224      	movs	r2, #36	; 0x24
 80044ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f022 0201 	bic.w	r2, r2, #1
 80044e8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80044f0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	68fa      	ldr	r2, [r7, #12]
 80044fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2220      	movs	r2, #32
 8004504:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004510:	2300      	movs	r3, #0
}
 8004512:	4618      	mov	r0, r3
 8004514:	3714      	adds	r7, #20
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr

0800451e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800451e:	b580      	push	{r7, lr}
 8004520:	b084      	sub	sp, #16
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
 8004526:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800452e:	2b01      	cmp	r3, #1
 8004530:	d101      	bne.n	8004536 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004532:	2302      	movs	r3, #2
 8004534:	e02d      	b.n	8004592 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2201      	movs	r2, #1
 800453a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2224      	movs	r2, #36	; 0x24
 8004542:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f022 0201 	bic.w	r2, r2, #1
 800455c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	683a      	ldr	r2, [r7, #0]
 800456e:	430a      	orrs	r2, r1
 8004570:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f000 f850 	bl	8004618 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	68fa      	ldr	r2, [r7, #12]
 800457e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2220      	movs	r2, #32
 8004584:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	3710      	adds	r7, #16
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}

0800459a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800459a:	b580      	push	{r7, lr}
 800459c:	b084      	sub	sp, #16
 800459e:	af00      	add	r7, sp, #0
 80045a0:	6078      	str	r0, [r7, #4]
 80045a2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d101      	bne.n	80045b2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80045ae:	2302      	movs	r3, #2
 80045b0:	e02d      	b.n	800460e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2201      	movs	r2, #1
 80045b6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2224      	movs	r2, #36	; 0x24
 80045be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f022 0201 	bic.w	r2, r2, #1
 80045d8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	683a      	ldr	r2, [r7, #0]
 80045ea:	430a      	orrs	r2, r1
 80045ec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f000 f812 	bl	8004618 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	68fa      	ldr	r2, [r7, #12]
 80045fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2220      	movs	r2, #32
 8004600:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800460c:	2300      	movs	r3, #0
}
 800460e:	4618      	mov	r0, r3
 8004610:	3710      	adds	r7, #16
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
	...

08004618 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004618:	b480      	push	{r7}
 800461a:	b089      	sub	sp, #36	; 0x24
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8004620:	4a2f      	ldr	r2, [pc, #188]	; (80046e0 <UARTEx_SetNbDataToProcess+0xc8>)
 8004622:	f107 0314 	add.w	r3, r7, #20
 8004626:	e892 0003 	ldmia.w	r2, {r0, r1}
 800462a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800462e:	4a2d      	ldr	r2, [pc, #180]	; (80046e4 <UARTEx_SetNbDataToProcess+0xcc>)
 8004630:	f107 030c 	add.w	r3, r7, #12
 8004634:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004638:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004640:	2b00      	cmp	r3, #0
 8004642:	d108      	bne.n	8004656 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004654:	e03d      	b.n	80046d2 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004656:	2308      	movs	r3, #8
 8004658:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800465a:	2308      	movs	r3, #8
 800465c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	0e5b      	lsrs	r3, r3, #25
 8004666:	b2db      	uxtb	r3, r3
 8004668:	f003 0307 	and.w	r3, r3, #7
 800466c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	0f5b      	lsrs	r3, r3, #29
 8004676:	b2db      	uxtb	r3, r3
 8004678:	f003 0307 	and.w	r3, r3, #7
 800467c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800467e:	7fbb      	ldrb	r3, [r7, #30]
 8004680:	7f3a      	ldrb	r2, [r7, #28]
 8004682:	f107 0120 	add.w	r1, r7, #32
 8004686:	440a      	add	r2, r1
 8004688:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800468c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004690:	7f3a      	ldrb	r2, [r7, #28]
 8004692:	f107 0120 	add.w	r1, r7, #32
 8004696:	440a      	add	r2, r1
 8004698:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800469c:	fb93 f3f2 	sdiv	r3, r3, r2
 80046a0:	b29a      	uxth	r2, r3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80046a8:	7ffb      	ldrb	r3, [r7, #31]
 80046aa:	7f7a      	ldrb	r2, [r7, #29]
 80046ac:	f107 0120 	add.w	r1, r7, #32
 80046b0:	440a      	add	r2, r1
 80046b2:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80046b6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80046ba:	7f7a      	ldrb	r2, [r7, #29]
 80046bc:	f107 0120 	add.w	r1, r7, #32
 80046c0:	440a      	add	r2, r1
 80046c2:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80046c6:	fb93 f3f2 	sdiv	r3, r3, r2
 80046ca:	b29a      	uxth	r2, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80046d2:	bf00      	nop
 80046d4:	3724      	adds	r7, #36	; 0x24
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr
 80046de:	bf00      	nop
 80046e0:	08004764 	.word	0x08004764
 80046e4:	0800476c 	.word	0x0800476c

080046e8 <__libc_init_array>:
 80046e8:	b570      	push	{r4, r5, r6, lr}
 80046ea:	4e0d      	ldr	r6, [pc, #52]	; (8004720 <__libc_init_array+0x38>)
 80046ec:	4c0d      	ldr	r4, [pc, #52]	; (8004724 <__libc_init_array+0x3c>)
 80046ee:	1ba4      	subs	r4, r4, r6
 80046f0:	10a4      	asrs	r4, r4, #2
 80046f2:	2500      	movs	r5, #0
 80046f4:	42a5      	cmp	r5, r4
 80046f6:	d109      	bne.n	800470c <__libc_init_array+0x24>
 80046f8:	4e0b      	ldr	r6, [pc, #44]	; (8004728 <__libc_init_array+0x40>)
 80046fa:	4c0c      	ldr	r4, [pc, #48]	; (800472c <__libc_init_array+0x44>)
 80046fc:	f000 f820 	bl	8004740 <_init>
 8004700:	1ba4      	subs	r4, r4, r6
 8004702:	10a4      	asrs	r4, r4, #2
 8004704:	2500      	movs	r5, #0
 8004706:	42a5      	cmp	r5, r4
 8004708:	d105      	bne.n	8004716 <__libc_init_array+0x2e>
 800470a:	bd70      	pop	{r4, r5, r6, pc}
 800470c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004710:	4798      	blx	r3
 8004712:	3501      	adds	r5, #1
 8004714:	e7ee      	b.n	80046f4 <__libc_init_array+0xc>
 8004716:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800471a:	4798      	blx	r3
 800471c:	3501      	adds	r5, #1
 800471e:	e7f2      	b.n	8004706 <__libc_init_array+0x1e>
 8004720:	080047ac 	.word	0x080047ac
 8004724:	080047ac 	.word	0x080047ac
 8004728:	080047ac 	.word	0x080047ac
 800472c:	080047b0 	.word	0x080047b0

08004730 <memset>:
 8004730:	4402      	add	r2, r0
 8004732:	4603      	mov	r3, r0
 8004734:	4293      	cmp	r3, r2
 8004736:	d100      	bne.n	800473a <memset+0xa>
 8004738:	4770      	bx	lr
 800473a:	f803 1b01 	strb.w	r1, [r3], #1
 800473e:	e7f9      	b.n	8004734 <memset+0x4>

08004740 <_init>:
 8004740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004742:	bf00      	nop
 8004744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004746:	bc08      	pop	{r3}
 8004748:	469e      	mov	lr, r3
 800474a:	4770      	bx	lr

0800474c <_fini>:
 800474c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800474e:	bf00      	nop
 8004750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004752:	bc08      	pop	{r3}
 8004754:	469e      	mov	lr, r3
 8004756:	4770      	bx	lr
