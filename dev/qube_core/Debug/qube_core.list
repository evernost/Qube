
qube_core.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004dc8  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08004fa0  08004fa0  00014fa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ff8  08004ff8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004ff8  08004ff8  00014ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005000  08005000  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005000  08005000  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005004  08005004  00015004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005008  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000198  2000000c  08005014  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001a4  08005014  000201a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000167cd  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a00  00000000  00000000  00036809  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012f8  00000000  00000000  00039210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011f0  00000000  00000000  0003a508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001eb2f  00000000  00000000  0003b6f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000181f4  00000000  00000000  0005a227  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c5b34  00000000  00000000  0007241b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00137f4f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050e8  00000000  00000000  00137fa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004f88 	.word	0x08004f88

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08004f88 	.word	0x08004f88

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b974 	b.w	8000518 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468e      	mov	lr, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14d      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000256:	428a      	cmp	r2, r1
 8000258:	4694      	mov	ip, r2
 800025a:	d969      	bls.n	8000330 <__udivmoddi4+0xe8>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b152      	cbz	r2, 8000278 <__udivmoddi4+0x30>
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	f1c2 0120 	rsb	r1, r2, #32
 800026a:	fa20 f101 	lsr.w	r1, r0, r1
 800026e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000272:	ea41 0e03 	orr.w	lr, r1, r3
 8000276:	4094      	lsls	r4, r2
 8000278:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800027c:	0c21      	lsrs	r1, r4, #16
 800027e:	fbbe f6f8 	udiv	r6, lr, r8
 8000282:	fa1f f78c 	uxth.w	r7, ip
 8000286:	fb08 e316 	mls	r3, r8, r6, lr
 800028a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028e:	fb06 f107 	mul.w	r1, r6, r7
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f106 30ff 	add.w	r0, r6, #4294967295
 800029e:	f080 811f 	bcs.w	80004e0 <__udivmoddi4+0x298>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 811c 	bls.w	80004e0 <__udivmoddi4+0x298>
 80002a8:	3e02      	subs	r6, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a5b      	subs	r3, r3, r1
 80002ae:	b2a4      	uxth	r4, r4
 80002b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b4:	fb08 3310 	mls	r3, r8, r0, r3
 80002b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002bc:	fb00 f707 	mul.w	r7, r0, r7
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x92>
 80002c4:	eb1c 0404 	adds.w	r4, ip, r4
 80002c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002cc:	f080 810a 	bcs.w	80004e4 <__udivmoddi4+0x29c>
 80002d0:	42a7      	cmp	r7, r4
 80002d2:	f240 8107 	bls.w	80004e4 <__udivmoddi4+0x29c>
 80002d6:	4464      	add	r4, ip
 80002d8:	3802      	subs	r0, #2
 80002da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002de:	1be4      	subs	r4, r4, r7
 80002e0:	2600      	movs	r6, #0
 80002e2:	b11d      	cbz	r5, 80002ec <__udivmoddi4+0xa4>
 80002e4:	40d4      	lsrs	r4, r2
 80002e6:	2300      	movs	r3, #0
 80002e8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d909      	bls.n	800030a <__udivmoddi4+0xc2>
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	f000 80ef 	beq.w	80004da <__udivmoddi4+0x292>
 80002fc:	2600      	movs	r6, #0
 80002fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000302:	4630      	mov	r0, r6
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	fab3 f683 	clz	r6, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d14a      	bne.n	80003a8 <__udivmoddi4+0x160>
 8000312:	428b      	cmp	r3, r1
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xd4>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 80f9 	bhi.w	800050e <__udivmoddi4+0x2c6>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb61 0303 	sbc.w	r3, r1, r3
 8000322:	2001      	movs	r0, #1
 8000324:	469e      	mov	lr, r3
 8000326:	2d00      	cmp	r5, #0
 8000328:	d0e0      	beq.n	80002ec <__udivmoddi4+0xa4>
 800032a:	e9c5 4e00 	strd	r4, lr, [r5]
 800032e:	e7dd      	b.n	80002ec <__udivmoddi4+0xa4>
 8000330:	b902      	cbnz	r2, 8000334 <__udivmoddi4+0xec>
 8000332:	deff      	udf	#255	; 0xff
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	2a00      	cmp	r2, #0
 800033a:	f040 8092 	bne.w	8000462 <__udivmoddi4+0x21a>
 800033e:	eba1 010c 	sub.w	r1, r1, ip
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2601      	movs	r6, #1
 800034c:	0c20      	lsrs	r0, r4, #16
 800034e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000352:	fb07 1113 	mls	r1, r7, r3, r1
 8000356:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800035a:	fb0e f003 	mul.w	r0, lr, r3
 800035e:	4288      	cmp	r0, r1
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x12c>
 8000362:	eb1c 0101 	adds.w	r1, ip, r1
 8000366:	f103 38ff 	add.w	r8, r3, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x12a>
 800036c:	4288      	cmp	r0, r1
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2c0>
 8000372:	4643      	mov	r3, r8
 8000374:	1a09      	subs	r1, r1, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb1 f0f7 	udiv	r0, r1, r7
 800037c:	fb07 1110 	mls	r1, r7, r0, r1
 8000380:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x156>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 31ff 	add.w	r1, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x154>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2ca>
 800039c:	4608      	mov	r0, r1
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a6:	e79c      	b.n	80002e2 <__udivmoddi4+0x9a>
 80003a8:	f1c6 0720 	rsb	r7, r6, #32
 80003ac:	40b3      	lsls	r3, r6
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ba:	fa01 f306 	lsl.w	r3, r1, r6
 80003be:	431c      	orrs	r4, r3
 80003c0:	40f9      	lsrs	r1, r7
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ce:	0c20      	lsrs	r0, r4, #16
 80003d0:	fa1f fe8c 	uxth.w	lr, ip
 80003d4:	fb09 1118 	mls	r1, r9, r8, r1
 80003d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	4288      	cmp	r0, r1
 80003e2:	fa02 f206 	lsl.w	r2, r2, r6
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b8>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2bc>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2bc>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4461      	add	r1, ip
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f9 	udiv	r0, r1, r9
 8000408:	fb09 1110 	mls	r1, r9, r0, r1
 800040c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000410:	fb00 fe0e 	mul.w	lr, r0, lr
 8000414:	458e      	cmp	lr, r1
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1e2>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2b4>
 8000422:	458e      	cmp	lr, r1
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2b4>
 8000426:	3802      	subs	r0, #2
 8000428:	4461      	add	r1, ip
 800042a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042e:	fba0 9402 	umull	r9, r4, r0, r2
 8000432:	eba1 010e 	sub.w	r1, r1, lr
 8000436:	42a1      	cmp	r1, r4
 8000438:	46c8      	mov	r8, r9
 800043a:	46a6      	mov	lr, r4
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x2a4>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x2a0>
 8000440:	b15d      	cbz	r5, 800045a <__udivmoddi4+0x212>
 8000442:	ebb3 0208 	subs.w	r2, r3, r8
 8000446:	eb61 010e 	sbc.w	r1, r1, lr
 800044a:	fa01 f707 	lsl.w	r7, r1, r7
 800044e:	fa22 f306 	lsr.w	r3, r2, r6
 8000452:	40f1      	lsrs	r1, r6
 8000454:	431f      	orrs	r7, r3
 8000456:	e9c5 7100 	strd	r7, r1, [r5]
 800045a:	2600      	movs	r6, #0
 800045c:	4631      	mov	r1, r6
 800045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000462:	f1c2 0320 	rsb	r3, r2, #32
 8000466:	40d8      	lsrs	r0, r3
 8000468:	fa0c fc02 	lsl.w	ip, ip, r2
 800046c:	fa21 f303 	lsr.w	r3, r1, r3
 8000470:	4091      	lsls	r1, r2
 8000472:	4301      	orrs	r1, r0
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000480:	fb07 3610 	mls	r6, r7, r0, r3
 8000484:	0c0b      	lsrs	r3, r1, #16
 8000486:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800048a:	fb00 f60e 	mul.w	r6, r0, lr
 800048e:	429e      	cmp	r6, r3
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x260>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b8>
 80004a0:	429e      	cmp	r6, r3
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b8>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	1b9b      	subs	r3, r3, r6
 80004aa:	b289      	uxth	r1, r1
 80004ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b0:	fb07 3316 	mls	r3, r7, r6, r3
 80004b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b8:	fb06 f30e 	mul.w	r3, r6, lr
 80004bc:	428b      	cmp	r3, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x28a>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 80004ce:	3e02      	subs	r6, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	1ac9      	subs	r1, r1, r3
 80004d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0x104>
 80004da:	462e      	mov	r6, r5
 80004dc:	4628      	mov	r0, r5
 80004de:	e705      	b.n	80002ec <__udivmoddi4+0xa4>
 80004e0:	4606      	mov	r6, r0
 80004e2:	e6e3      	b.n	80002ac <__udivmoddi4+0x64>
 80004e4:	4618      	mov	r0, r3
 80004e6:	e6f8      	b.n	80002da <__udivmoddi4+0x92>
 80004e8:	454b      	cmp	r3, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f8>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f4:	3801      	subs	r0, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f8>
 80004f8:	4646      	mov	r6, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x28a>
 80004fc:	4620      	mov	r0, r4
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1e2>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x260>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b8>
 8000508:	3b02      	subs	r3, #2
 800050a:	4461      	add	r1, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x12c>
 800050e:	4630      	mov	r0, r6
 8000510:	e709      	b.n	8000326 <__udivmoddi4+0xde>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x156>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <cpuInit>:

// ----------------------------------------------------------------------------
// cpuInit() function
// ----------------------------------------------------------------------------
void cpuInit(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  // Reset of all peripherals, Initializes the Flash interface and the Systick.
  HAL_Init();
 8000520:	f001 fa93 	bl	8001a4a <HAL_Init>

  // Configure the system clock
  SystemClock_Config();
 8000524:	f000 f812 	bl	800054c <SystemClock_Config>

  // Initialize all configured peripherals
  MX_GPIO_Init();
 8000528:	f000 f9a8 	bl	800087c <MX_GPIO_Init>
  MX_I2C1_Init();
 800052c:	f000 f876 	bl	800061c <MX_I2C1_Init>
  MX_I2C2_Init();
 8000530:	f000 f8b4 	bl	800069c <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8000534:	f000 f956 	bl	80007e4 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000538:	f000 f8f0 	bl	800071c <MX_TIM2_Init>

  // Start the timer
  HAL_TIM_Base_Start_IT(&htim2);
 800053c:	4802      	ldr	r0, [pc, #8]	; (8000548 <cpuInit+0x2c>)
 800053e:	f003 fa23 	bl	8003988 <HAL_TIM_Base_Start_IT>
}
 8000542:	bf00      	nop
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	200000c0 	.word	0x200000c0

0800054c <SystemClock_Config>:

// ----------------------------------------------------------------------------
// SystemClock_Config() function
// ----------------------------------------------------------------------------
void SystemClock_Config(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b0a4      	sub	sp, #144	; 0x90
 8000550:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000552:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000556:	2238      	movs	r2, #56	; 0x38
 8000558:	2100      	movs	r1, #0
 800055a:	4618      	mov	r0, r3
 800055c:	f004 fd0c 	bl	8004f78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000560:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000564:	2200      	movs	r2, #0
 8000566:	601a      	str	r2, [r3, #0]
 8000568:	605a      	str	r2, [r3, #4]
 800056a:	609a      	str	r2, [r3, #8]
 800056c:	60da      	str	r2, [r3, #12]
 800056e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000570:	463b      	mov	r3, r7
 8000572:	2244      	movs	r2, #68	; 0x44
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f004 fcfe 	bl	8004f78 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800057c:	2000      	movs	r0, #0
 800057e:	f002 f9d3 	bl	8002928 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000582:	2302      	movs	r3, #2
 8000584:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000586:	f44f 7380 	mov.w	r3, #256	; 0x100
 800058a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800058c:	2340      	movs	r3, #64	; 0x40
 800058e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000590:	2302      	movs	r3, #2
 8000592:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000594:	2302      	movs	r3, #2
 8000596:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000598:	2301      	movs	r3, #1
 800059a:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 20;
 800059c:	2314      	movs	r3, #20
 800059e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005a2:	2302      	movs	r3, #2
 80005a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005a8:	2302      	movs	r3, #2
 80005aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005ae:	2302      	movs	r3, #2
 80005b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80005b8:	4618      	mov	r0, r3
 80005ba:	f002 fa69 	bl	8002a90 <HAL_RCC_OscConfig>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80005c4:	f000 fa0c 	bl	80009e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c8:	230f      	movs	r3, #15
 80005ca:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005cc:	2303      	movs	r3, #3
 80005ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d0:	2300      	movs	r3, #0
 80005d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005d4:	2300      	movs	r3, #0
 80005d6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d8:	2300      	movs	r3, #0
 80005da:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005dc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80005e0:	2104      	movs	r1, #4
 80005e2:	4618      	mov	r0, r3
 80005e4:	f002 fd6c 	bl	80030c0 <HAL_RCC_ClockConfig>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80005ee:	f000 f9f7 	bl	80009e0 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 80005f2:	23c1      	movs	r3, #193	; 0xc1
 80005f4:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C2;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80005f6:	2300      	movs	r3, #0
 80005f8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80005fa:	2300      	movs	r3, #0
 80005fc:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80005fe:	2300      	movs	r3, #0
 8000600:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000602:	463b      	mov	r3, r7
 8000604:	4618      	mov	r0, r3
 8000606:	f002 ff77 	bl	80034f8 <HAL_RCCEx_PeriphCLKConfig>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000610:	f000 f9e6 	bl	80009e0 <Error_Handler>
  }
}
 8000614:	bf00      	nop
 8000616:	3790      	adds	r7, #144	; 0x90
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}

0800061c <MX_I2C1_Init>:

// ----------------------------------------------------------------------------
// MX_I2C1_Init() function
// ----------------------------------------------------------------------------
static void MX_I2C1_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000620:	4b1b      	ldr	r3, [pc, #108]	; (8000690 <MX_I2C1_Init+0x74>)
 8000622:	4a1c      	ldr	r2, [pc, #112]	; (8000694 <MX_I2C1_Init+0x78>)
 8000624:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00F07BFF;
 8000626:	4b1a      	ldr	r3, [pc, #104]	; (8000690 <MX_I2C1_Init+0x74>)
 8000628:	4a1b      	ldr	r2, [pc, #108]	; (8000698 <MX_I2C1_Init+0x7c>)
 800062a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800062c:	4b18      	ldr	r3, [pc, #96]	; (8000690 <MX_I2C1_Init+0x74>)
 800062e:	2200      	movs	r2, #0
 8000630:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000632:	4b17      	ldr	r3, [pc, #92]	; (8000690 <MX_I2C1_Init+0x74>)
 8000634:	2201      	movs	r2, #1
 8000636:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000638:	4b15      	ldr	r3, [pc, #84]	; (8000690 <MX_I2C1_Init+0x74>)
 800063a:	2200      	movs	r2, #0
 800063c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800063e:	4b14      	ldr	r3, [pc, #80]	; (8000690 <MX_I2C1_Init+0x74>)
 8000640:	2200      	movs	r2, #0
 8000642:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000644:	4b12      	ldr	r3, [pc, #72]	; (8000690 <MX_I2C1_Init+0x74>)
 8000646:	2200      	movs	r2, #0
 8000648:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800064a:	4b11      	ldr	r3, [pc, #68]	; (8000690 <MX_I2C1_Init+0x74>)
 800064c:	2200      	movs	r2, #0
 800064e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000650:	4b0f      	ldr	r3, [pc, #60]	; (8000690 <MX_I2C1_Init+0x74>)
 8000652:	2200      	movs	r2, #0
 8000654:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000656:	480e      	ldr	r0, [pc, #56]	; (8000690 <MX_I2C1_Init+0x74>)
 8000658:	f001 fd4c 	bl	80020f4 <HAL_I2C_Init>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000662:	f000 f9bd 	bl	80009e0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000666:	2100      	movs	r1, #0
 8000668:	4809      	ldr	r0, [pc, #36]	; (8000690 <MX_I2C1_Init+0x74>)
 800066a:	f002 f8c5 	bl	80027f8 <HAL_I2CEx_ConfigAnalogFilter>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000674:	f000 f9b4 	bl	80009e0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000678:	2100      	movs	r1, #0
 800067a:	4805      	ldr	r0, [pc, #20]	; (8000690 <MX_I2C1_Init+0x74>)
 800067c:	f002 f907 	bl	800288e <HAL_I2CEx_ConfigDigitalFilter>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000686:	f000 f9ab 	bl	80009e0 <Error_Handler>
  }
}
 800068a:	bf00      	nop
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	20000028 	.word	0x20000028
 8000694:	40005400 	.word	0x40005400
 8000698:	00f07bff 	.word	0x00f07bff

0800069c <MX_I2C2_Init>:

// ----------------------------------------------------------------------------
// MX_I2C2_Init() function
// ----------------------------------------------------------------------------
static void MX_I2C2_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80006a0:	4b1b      	ldr	r3, [pc, #108]	; (8000710 <MX_I2C2_Init+0x74>)
 80006a2:	4a1c      	ldr	r2, [pc, #112]	; (8000714 <MX_I2C2_Init+0x78>)
 80006a4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00F07BFF;
 80006a6:	4b1a      	ldr	r3, [pc, #104]	; (8000710 <MX_I2C2_Init+0x74>)
 80006a8:	4a1b      	ldr	r2, [pc, #108]	; (8000718 <MX_I2C2_Init+0x7c>)
 80006aa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80006ac:	4b18      	ldr	r3, [pc, #96]	; (8000710 <MX_I2C2_Init+0x74>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006b2:	4b17      	ldr	r3, [pc, #92]	; (8000710 <MX_I2C2_Init+0x74>)
 80006b4:	2201      	movs	r2, #1
 80006b6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006b8:	4b15      	ldr	r3, [pc, #84]	; (8000710 <MX_I2C2_Init+0x74>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80006be:	4b14      	ldr	r3, [pc, #80]	; (8000710 <MX_I2C2_Init+0x74>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006c4:	4b12      	ldr	r3, [pc, #72]	; (8000710 <MX_I2C2_Init+0x74>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006ca:	4b11      	ldr	r3, [pc, #68]	; (8000710 <MX_I2C2_Init+0x74>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006d0:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <MX_I2C2_Init+0x74>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80006d6:	480e      	ldr	r0, [pc, #56]	; (8000710 <MX_I2C2_Init+0x74>)
 80006d8:	f001 fd0c 	bl	80020f4 <HAL_I2C_Init>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80006e2:	f000 f97d 	bl	80009e0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006e6:	2100      	movs	r1, #0
 80006e8:	4809      	ldr	r0, [pc, #36]	; (8000710 <MX_I2C2_Init+0x74>)
 80006ea:	f002 f885 	bl	80027f8 <HAL_I2CEx_ConfigAnalogFilter>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80006f4:	f000 f974 	bl	80009e0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80006f8:	2100      	movs	r1, #0
 80006fa:	4805      	ldr	r0, [pc, #20]	; (8000710 <MX_I2C2_Init+0x74>)
 80006fc:	f002 f8c7 	bl	800288e <HAL_I2CEx_ConfigDigitalFilter>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000706:	f000 f96b 	bl	80009e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	20000074 	.word	0x20000074
 8000714:	40005800 	.word	0x40005800
 8000718:	00f07bff 	.word	0x00f07bff

0800071c <MX_TIM2_Init>:

// ----------------------------------------------------------------------------
// Timer 2 initialisation 
// ----------------------------------------------------------------------------
static void MX_TIM2_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b088      	sub	sp, #32
 8000720:	af00      	add	r7, sp, #0

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000722:	f107 0310 	add.w	r3, r7, #16
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000730:	1d3b      	adds	r3, r7, #4
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]
 8000738:	609a      	str	r2, [r3, #8]


  htim2.Instance = TIM2;
 800073a:	4b1d      	ldr	r3, [pc, #116]	; (80007b0 <MX_TIM2_Init+0x94>)
 800073c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000740:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 160-1;
 8000742:	4b1b      	ldr	r3, [pc, #108]	; (80007b0 <MX_TIM2_Init+0x94>)
 8000744:	229f      	movs	r2, #159	; 0x9f
 8000746:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000748:	4b19      	ldr	r3, [pc, #100]	; (80007b0 <MX_TIM2_Init+0x94>)
 800074a:	2200      	movs	r2, #0
 800074c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 500000-1;
 800074e:	4b18      	ldr	r3, [pc, #96]	; (80007b0 <MX_TIM2_Init+0x94>)
 8000750:	4a18      	ldr	r2, [pc, #96]	; (80007b4 <MX_TIM2_Init+0x98>)
 8000752:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000754:	4b16      	ldr	r3, [pc, #88]	; (80007b0 <MX_TIM2_Init+0x94>)
 8000756:	2200      	movs	r2, #0
 8000758:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800075a:	4b15      	ldr	r3, [pc, #84]	; (80007b0 <MX_TIM2_Init+0x94>)
 800075c:	2200      	movs	r2, #0
 800075e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000760:	4813      	ldr	r0, [pc, #76]	; (80007b0 <MX_TIM2_Init+0x94>)
 8000762:	f003 f8b9 	bl	80038d8 <HAL_TIM_Base_Init>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800076c:	f000 f938 	bl	80009e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000770:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000774:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000776:	f107 0310 	add.w	r3, r7, #16
 800077a:	4619      	mov	r1, r3
 800077c:	480c      	ldr	r0, [pc, #48]	; (80007b0 <MX_TIM2_Init+0x94>)
 800077e:	f003 faed 	bl	8003d5c <HAL_TIM_ConfigClockSource>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000788:	f000 f92a 	bl	80009e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800078c:	2300      	movs	r3, #0
 800078e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000790:	2300      	movs	r3, #0
 8000792:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000794:	1d3b      	adds	r3, r7, #4
 8000796:	4619      	mov	r1, r3
 8000798:	4805      	ldr	r0, [pc, #20]	; (80007b0 <MX_TIM2_Init+0x94>)
 800079a:	f003 fd2d 	bl	80041f8 <HAL_TIMEx_MasterConfigSynchronization>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80007a4:	f000 f91c 	bl	80009e0 <Error_Handler>
  }
}
 80007a8:	bf00      	nop
 80007aa:	3720      	adds	r7, #32
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	200000c0 	.word	0x200000c0
 80007b4:	0007a11f 	.word	0x0007a11f

080007b8 <HAL_TIM_PeriodElapsedCallback>:

// ----------------------------------------------------------------------------
// Timer 2 callback function  
// ----------------------------------------------------------------------------
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  if (htim == &htim2)
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	4a06      	ldr	r2, [pc, #24]	; (80007dc <HAL_TIM_PeriodElapsedCallback+0x24>)
 80007c4:	4293      	cmp	r3, r2
 80007c6:	d102      	bne.n	80007ce <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    timer2_expired = 1;
 80007c8:	4b05      	ldr	r3, [pc, #20]	; (80007e0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80007ca:	2201      	movs	r2, #1
 80007cc:	701a      	strb	r2, [r3, #0]
  }
}
 80007ce:	bf00      	nop
 80007d0:	370c      	adds	r7, #12
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	200000c0 	.word	0x200000c0
 80007e0:	2000019c 	.word	0x2000019c

080007e4 <MX_USART1_UART_Init>:

// ----------------------------------------------------------------------------
// Timer 2 callback function 
// ----------------------------------------------------------------------------
static void MX_USART1_UART_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 80007e8:	4b22      	ldr	r3, [pc, #136]	; (8000874 <MX_USART1_UART_Init+0x90>)
 80007ea:	4a23      	ldr	r2, [pc, #140]	; (8000878 <MX_USART1_UART_Init+0x94>)
 80007ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007ee:	4b21      	ldr	r3, [pc, #132]	; (8000874 <MX_USART1_UART_Init+0x90>)
 80007f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007f6:	4b1f      	ldr	r3, [pc, #124]	; (8000874 <MX_USART1_UART_Init+0x90>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007fc:	4b1d      	ldr	r3, [pc, #116]	; (8000874 <MX_USART1_UART_Init+0x90>)
 80007fe:	2200      	movs	r2, #0
 8000800:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000802:	4b1c      	ldr	r3, [pc, #112]	; (8000874 <MX_USART1_UART_Init+0x90>)
 8000804:	2200      	movs	r2, #0
 8000806:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000808:	4b1a      	ldr	r3, [pc, #104]	; (8000874 <MX_USART1_UART_Init+0x90>)
 800080a:	220c      	movs	r2, #12
 800080c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800080e:	4b19      	ldr	r3, [pc, #100]	; (8000874 <MX_USART1_UART_Init+0x90>)
 8000810:	2200      	movs	r2, #0
 8000812:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000814:	4b17      	ldr	r3, [pc, #92]	; (8000874 <MX_USART1_UART_Init+0x90>)
 8000816:	2200      	movs	r2, #0
 8000818:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800081a:	4b16      	ldr	r3, [pc, #88]	; (8000874 <MX_USART1_UART_Init+0x90>)
 800081c:	2200      	movs	r2, #0
 800081e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000820:	4b14      	ldr	r3, [pc, #80]	; (8000874 <MX_USART1_UART_Init+0x90>)
 8000822:	2200      	movs	r2, #0
 8000824:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000826:	4b13      	ldr	r3, [pc, #76]	; (8000874 <MX_USART1_UART_Init+0x90>)
 8000828:	2200      	movs	r2, #0
 800082a:	629a      	str	r2, [r3, #40]	; 0x28

  if (HAL_UART_Init(&huart1) != HAL_OK)
 800082c:	4811      	ldr	r0, [pc, #68]	; (8000874 <MX_USART1_UART_Init+0x90>)
 800082e:	f003 fdab 	bl	8004388 <HAL_UART_Init>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000838:	f000 f8d2 	bl	80009e0 <Error_Handler>
  }

  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800083c:	2100      	movs	r1, #0
 800083e:	480d      	ldr	r0, [pc, #52]	; (8000874 <MX_USART1_UART_Init+0x90>)
 8000840:	f004 faac 	bl	8004d9c <HAL_UARTEx_SetTxFifoThreshold>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800084a:	f000 f8c9 	bl	80009e0 <Error_Handler>
  }

  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800084e:	2100      	movs	r1, #0
 8000850:	4808      	ldr	r0, [pc, #32]	; (8000874 <MX_USART1_UART_Init+0x90>)
 8000852:	f004 fae1 	bl	8004e18 <HAL_UARTEx_SetRxFifoThreshold>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800085c:	f000 f8c0 	bl	80009e0 <Error_Handler>
  }

  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000860:	4804      	ldr	r0, [pc, #16]	; (8000874 <MX_USART1_UART_Init+0x90>)
 8000862:	f004 fa62 	bl	8004d2a <HAL_UARTEx_DisableFifoMode>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800086c:	f000 f8b8 	bl	80009e0 <Error_Handler>
  }
}
 8000870:	bf00      	nop
 8000872:	bd80      	pop	{r7, pc}
 8000874:	2000010c 	.word	0x2000010c
 8000878:	40013800 	.word	0x40013800

0800087c <MX_GPIO_Init>:

// ----------------------------------------------------------------------------
// GPIO init function  
// ----------------------------------------------------------------------------
static void MX_GPIO_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b088      	sub	sp, #32
 8000880:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000882:	f107 030c 	add.w	r3, r7, #12
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	605a      	str	r2, [r3, #4]
 800088c:	609a      	str	r2, [r3, #8]
 800088e:	60da      	str	r2, [r3, #12]
 8000890:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000892:	4b39      	ldr	r3, [pc, #228]	; (8000978 <MX_GPIO_Init+0xfc>)
 8000894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000896:	4a38      	ldr	r2, [pc, #224]	; (8000978 <MX_GPIO_Init+0xfc>)
 8000898:	f043 0320 	orr.w	r3, r3, #32
 800089c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800089e:	4b36      	ldr	r3, [pc, #216]	; (8000978 <MX_GPIO_Init+0xfc>)
 80008a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a2:	f003 0320 	and.w	r3, r3, #32
 80008a6:	60bb      	str	r3, [r7, #8]
 80008a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008aa:	4b33      	ldr	r3, [pc, #204]	; (8000978 <MX_GPIO_Init+0xfc>)
 80008ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ae:	4a32      	ldr	r2, [pc, #200]	; (8000978 <MX_GPIO_Init+0xfc>)
 80008b0:	f043 0301 	orr.w	r3, r3, #1
 80008b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008b6:	4b30      	ldr	r3, [pc, #192]	; (8000978 <MX_GPIO_Init+0xfc>)
 80008b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	607b      	str	r3, [r7, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c2:	4b2d      	ldr	r3, [pc, #180]	; (8000978 <MX_GPIO_Init+0xfc>)
 80008c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c6:	4a2c      	ldr	r2, [pc, #176]	; (8000978 <MX_GPIO_Init+0xfc>)
 80008c8:	f043 0302 	orr.w	r3, r3, #2
 80008cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ce:	4b2a      	ldr	r3, [pc, #168]	; (8000978 <MX_GPIO_Init+0xfc>)
 80008d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d2:	f003 0302 	and.w	r3, r3, #2
 80008d6:	603b      	str	r3, [r7, #0]
 80008d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DRIVER_0_RESET_Pin|DRIVER_1_RESET_Pin, GPIO_PIN_RESET);
 80008da:	2200      	movs	r2, #0
 80008dc:	2103      	movs	r1, #3
 80008de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008e2:	f001 fbef 	bl	80020c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DRIVER_0_OE_Pin|DRIVER_1_OE_Pin, GPIO_PIN_SET);
 80008e6:	2201      	movs	r2, #1
 80008e8:	210c      	movs	r1, #12
 80008ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ee:	f001 fbe9 	bl	80020c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 80008f2:	2200      	movs	r2, #0
 80008f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008f8:	4820      	ldr	r0, [pc, #128]	; (800097c <MX_GPIO_Init+0x100>)
 80008fa:	f001 fbe3 	bl	80020c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRIVER_0_RESET_Pin DRIVER_1_RESET_Pin DRIVER_0_OE_Pin DRIVER_1_OE_Pin */
  GPIO_InitStruct.Pin = DRIVER_0_RESET_Pin|DRIVER_1_RESET_Pin|DRIVER_0_OE_Pin|DRIVER_1_OE_Pin;
 80008fe:	230f      	movs	r3, #15
 8000900:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000902:	2301      	movs	r3, #1
 8000904:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090a:	2300      	movs	r3, #0
 800090c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090e:	f107 030c 	add.w	r3, r7, #12
 8000912:	4619      	mov	r1, r3
 8000914:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000918:	f001 fa3a 	bl	8001d90 <HAL_GPIO_Init>

  /*Configure GPIO pins : BOARD_ID_0_Pin PB_right_Pin BOARD_ID_1_Pin PB_down_Pin
                           PB_left_Pin */
  GPIO_InitStruct.Pin = BOARD_ID_0_Pin|PB_right_Pin|BOARD_ID_1_Pin|PB_down_Pin
 800091c:	f241 03f0 	movw	r3, #4336	; 0x10f0
 8000920:	60fb      	str	r3, [r7, #12]
                          |PB_left_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000922:	2300      	movs	r3, #0
 8000924:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800092a:	f107 030c 	add.w	r3, r7, #12
 800092e:	4619      	mov	r1, r3
 8000930:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000934:	f001 fa2c 	bl	8001d90 <HAL_GPIO_Init>

  /*Configure GPIO pins : BOARD_ID_2_Pin PB_up_Pin */
  GPIO_InitStruct.Pin = BOARD_ID_2_Pin|PB_up_Pin;
 8000938:	2311      	movs	r3, #17
 800093a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800093c:	2300      	movs	r3, #0
 800093e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000944:	f107 030c 	add.w	r3, r7, #12
 8000948:	4619      	mov	r1, r3
 800094a:	480c      	ldr	r0, [pc, #48]	; (800097c <MX_GPIO_Init+0x100>)
 800094c:	f001 fa20 	bl	8001d90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000950:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000954:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000956:	2301      	movs	r3, #1
 8000958:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095e:	2300      	movs	r3, #0
 8000960:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000962:	f107 030c 	add.w	r3, r7, #12
 8000966:	4619      	mov	r1, r3
 8000968:	4804      	ldr	r0, [pc, #16]	; (800097c <MX_GPIO_Init+0x100>)
 800096a:	f001 fa11 	bl	8001d90 <HAL_GPIO_Init>
}
 800096e:	bf00      	nop
 8000970:	3720      	adds	r7, #32
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40021000 	.word	0x40021000
 800097c:	48000400 	.word	0x48000400

08000980 <getBoardID>:

// ----------------------------------------------------------------------------
// getBoardID() function
// ----------------------------------------------------------------------------
uint8_t getBoardID(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
  uint8_t ret = 0U;
 8000986:	2300      	movs	r3, #0
 8000988:	71fb      	strb	r3, [r7, #7]
  ret |= HAL_GPIO_ReadPin(BOARD_ID_0_GPIO_Port, BOARD_ID_0_Pin);
 800098a:	2110      	movs	r1, #16
 800098c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000990:	f001 fb80 	bl	8002094 <HAL_GPIO_ReadPin>
 8000994:	4603      	mov	r3, r0
 8000996:	461a      	mov	r2, r3
 8000998:	79fb      	ldrb	r3, [r7, #7]
 800099a:	4313      	orrs	r3, r2
 800099c:	71fb      	strb	r3, [r7, #7]
  ret |= HAL_GPIO_ReadPin(BOARD_ID_1_GPIO_Port, BOARD_ID_1_Pin) << 1;
 800099e:	2140      	movs	r1, #64	; 0x40
 80009a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009a4:	f001 fb76 	bl	8002094 <HAL_GPIO_ReadPin>
 80009a8:	4603      	mov	r3, r0
 80009aa:	005b      	lsls	r3, r3, #1
 80009ac:	b25a      	sxtb	r2, r3
 80009ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009b2:	4313      	orrs	r3, r2
 80009b4:	b25b      	sxtb	r3, r3
 80009b6:	71fb      	strb	r3, [r7, #7]
  ret |= HAL_GPIO_ReadPin(BOARD_ID_2_GPIO_Port, BOARD_ID_2_Pin) << 2;
 80009b8:	2101      	movs	r1, #1
 80009ba:	4808      	ldr	r0, [pc, #32]	; (80009dc <getBoardID+0x5c>)
 80009bc:	f001 fb6a 	bl	8002094 <HAL_GPIO_ReadPin>
 80009c0:	4603      	mov	r3, r0
 80009c2:	009b      	lsls	r3, r3, #2
 80009c4:	b25a      	sxtb	r2, r3
 80009c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ca:	4313      	orrs	r3, r2
 80009cc:	b25b      	sxtb	r3, r3
 80009ce:	71fb      	strb	r3, [r7, #7]

  return ret;
 80009d0:	79fb      	ldrb	r3, [r7, #7]
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	48000400 	.word	0x48000400

080009e0 <Error_Handler>:

// ----------------------------------------------------------------------------
// Error handler
// ----------------------------------------------------------------------------
void Error_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80009e4:	bf00      	nop
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
	...

080009f0 <move>:
// Rubik's cube move function
// ----------------------------------------------------------------------------
// Standard notations: 
// https://ruwix.com/the-rubiks-cube/notation/
void move(rgbLedType (*cube)[9], uint8_t moveID, uint8_t angle)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af02      	add	r7, sp, #8
 80009f6:	6078      	str	r0, [r7, #4]
 80009f8:	460b      	mov	r3, r1
 80009fa:	70fb      	strb	r3, [r7, #3]
 80009fc:	4613      	mov	r3, r2
 80009fe:	70bb      	strb	r3, [r7, #2]
  if (angle == ROTATE_0)
 8000a00:	78bb      	ldrb	r3, [r7, #2]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	f000 81a9 	beq.w	8000d5a <move+0x36a>
  {
    // Nothing to do, don't bother.
  }
  else
  {
    switch(moveID)
 8000a08:	78fb      	ldrb	r3, [r7, #3]
 8000a0a:	2b08      	cmp	r3, #8
 8000a0c:	f200 81a5 	bhi.w	8000d5a <move+0x36a>
 8000a10:	a201      	add	r2, pc, #4	; (adr r2, 8000a18 <move+0x28>)
 8000a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a16:	bf00      	nop
 8000a18:	08000a3d 	.word	0x08000a3d
 8000a1c:	08000aa3 	.word	0x08000aa3
 8000a20:	08000b09 	.word	0x08000b09
 8000a24:	08000b6f 	.word	0x08000b6f
 8000a28:	08000bd5 	.word	0x08000bd5
 8000a2c:	08000c3b 	.word	0x08000c3b
 8000a30:	08000ca1 	.word	0x08000ca1
 8000a34:	08000cdf 	.word	0x08000cdf
 8000a38:	08000d1d 	.word	0x08000d1d
    {
      // Front move (F) -------------------------------------------------------
      case CUBE_MOVE_F :
        circPerm(cube, angle, F_UL, F_UR, F_DR, F_DL);
 8000a3c:	78b9      	ldrb	r1, [r7, #2]
 8000a3e:	2302      	movs	r3, #2
 8000a40:	9301      	str	r3, [sp, #4]
 8000a42:	2308      	movs	r3, #8
 8000a44:	9300      	str	r3, [sp, #0]
 8000a46:	2306      	movs	r3, #6
 8000a48:	2200      	movs	r2, #0
 8000a4a:	6878      	ldr	r0, [r7, #4]
 8000a4c:	f000 f9ec 	bl	8000e28 <circPerm>
        circPerm(cube, angle, F_UM, F_MR, F_DM, F_ML);
 8000a50:	78b9      	ldrb	r1, [r7, #2]
 8000a52:	2301      	movs	r3, #1
 8000a54:	9301      	str	r3, [sp, #4]
 8000a56:	2305      	movs	r3, #5
 8000a58:	9300      	str	r3, [sp, #0]
 8000a5a:	2307      	movs	r3, #7
 8000a5c:	2203      	movs	r2, #3
 8000a5e:	6878      	ldr	r0, [r7, #4]
 8000a60:	f000 f9e2 	bl	8000e28 <circPerm>
        
        // U -> R -> D -> L (clockwise)
        circPerm(cube, angle, U_DL, R_UL, D_UR, L_DR);
 8000a64:	78b9      	ldrb	r1, [r7, #2]
 8000a66:	2328      	movs	r3, #40	; 0x28
 8000a68:	9301      	str	r3, [sp, #4]
 8000a6a:	2356      	movs	r3, #86	; 0x56
 8000a6c:	9300      	str	r3, [sp, #0]
 8000a6e:	2330      	movs	r3, #48	; 0x30
 8000a70:	2242      	movs	r2, #66	; 0x42
 8000a72:	6878      	ldr	r0, [r7, #4]
 8000a74:	f000 f9d8 	bl	8000e28 <circPerm>
        circPerm(cube, angle, U_DR, R_DL, D_UL, L_UR);
 8000a78:	78b9      	ldrb	r1, [r7, #2]
 8000a7a:	2326      	movs	r3, #38	; 0x26
 8000a7c:	9301      	str	r3, [sp, #4]
 8000a7e:	2350      	movs	r3, #80	; 0x50
 8000a80:	9300      	str	r3, [sp, #0]
 8000a82:	2332      	movs	r3, #50	; 0x32
 8000a84:	2248      	movs	r2, #72	; 0x48
 8000a86:	6878      	ldr	r0, [r7, #4]
 8000a88:	f000 f9ce 	bl	8000e28 <circPerm>
        circPerm(cube, angle, U_UM, R_ML, D_UM, L_MR);
 8000a8c:	78b9      	ldrb	r1, [r7, #2]
 8000a8e:	2327      	movs	r3, #39	; 0x27
 8000a90:	9301      	str	r3, [sp, #4]
 8000a92:	2353      	movs	r3, #83	; 0x53
 8000a94:	9300      	str	r3, [sp, #0]
 8000a96:	2331      	movs	r3, #49	; 0x31
 8000a98:	2243      	movs	r2, #67	; 0x43
 8000a9a:	6878      	ldr	r0, [r7, #4]
 8000a9c:	f000 f9c4 	bl	8000e28 <circPerm>
        break;
 8000aa0:	e15b      	b.n	8000d5a <move+0x36a>

      // Bottom move (B) ------------------------------------------------------
      case CUBE_MOVE_B :
        circPerm(cube, angle, B_UL, B_UR, B_DR, B_DL);
 8000aa2:	78b9      	ldrb	r1, [r7, #2]
 8000aa4:	2312      	movs	r3, #18
 8000aa6:	9301      	str	r3, [sp, #4]
 8000aa8:	2318      	movs	r3, #24
 8000aaa:	9300      	str	r3, [sp, #0]
 8000aac:	2316      	movs	r3, #22
 8000aae:	2210      	movs	r2, #16
 8000ab0:	6878      	ldr	r0, [r7, #4]
 8000ab2:	f000 f9b9 	bl	8000e28 <circPerm>
        circPerm(cube, angle, B_UM, B_MR, B_DM, B_ML);
 8000ab6:	78b9      	ldrb	r1, [r7, #2]
 8000ab8:	2311      	movs	r3, #17
 8000aba:	9301      	str	r3, [sp, #4]
 8000abc:	2315      	movs	r3, #21
 8000abe:	9300      	str	r3, [sp, #0]
 8000ac0:	2317      	movs	r3, #23
 8000ac2:	2213      	movs	r2, #19
 8000ac4:	6878      	ldr	r0, [r7, #4]
 8000ac6:	f000 f9af 	bl	8000e28 <circPerm>
        
        // U -> L -> D -> R (clockwise)
        circPerm(cube, angle, U_UR, L_UL, D_DL, R_DR);
 8000aca:	78b9      	ldrb	r1, [r7, #2]
 8000acc:	2338      	movs	r3, #56	; 0x38
 8000ace:	9301      	str	r3, [sp, #4]
 8000ad0:	2352      	movs	r3, #82	; 0x52
 8000ad2:	9300      	str	r3, [sp, #0]
 8000ad4:	2320      	movs	r3, #32
 8000ad6:	2246      	movs	r2, #70	; 0x46
 8000ad8:	6878      	ldr	r0, [r7, #4]
 8000ada:	f000 f9a5 	bl	8000e28 <circPerm>
        circPerm(cube, angle, U_UL, L_DL, D_DR, R_UR);
 8000ade:	78b9      	ldrb	r1, [r7, #2]
 8000ae0:	2336      	movs	r3, #54	; 0x36
 8000ae2:	9301      	str	r3, [sp, #4]
 8000ae4:	2358      	movs	r3, #88	; 0x58
 8000ae6:	9300      	str	r3, [sp, #0]
 8000ae8:	2322      	movs	r3, #34	; 0x22
 8000aea:	2240      	movs	r2, #64	; 0x40
 8000aec:	6878      	ldr	r0, [r7, #4]
 8000aee:	f000 f99b 	bl	8000e28 <circPerm>
        circPerm(cube, angle, U_UM, L_ML, D_DM, R_MR);
 8000af2:	78b9      	ldrb	r1, [r7, #2]
 8000af4:	2337      	movs	r3, #55	; 0x37
 8000af6:	9301      	str	r3, [sp, #4]
 8000af8:	2355      	movs	r3, #85	; 0x55
 8000afa:	9300      	str	r3, [sp, #0]
 8000afc:	2321      	movs	r3, #33	; 0x21
 8000afe:	2243      	movs	r2, #67	; 0x43
 8000b00:	6878      	ldr	r0, [r7, #4]
 8000b02:	f000 f991 	bl	8000e28 <circPerm>
        break;
 8000b06:	e128      	b.n	8000d5a <move+0x36a>

      // Left move (L) --------------------------------------------------------
      case CUBE_MOVE_L :
        circPerm(cube, angle, L_UL, L_UR, L_DR, L_DL);
 8000b08:	78b9      	ldrb	r1, [r7, #2]
 8000b0a:	2322      	movs	r3, #34	; 0x22
 8000b0c:	9301      	str	r3, [sp, #4]
 8000b0e:	2328      	movs	r3, #40	; 0x28
 8000b10:	9300      	str	r3, [sp, #0]
 8000b12:	2326      	movs	r3, #38	; 0x26
 8000b14:	2220      	movs	r2, #32
 8000b16:	6878      	ldr	r0, [r7, #4]
 8000b18:	f000 f986 	bl	8000e28 <circPerm>
        circPerm(cube, angle, L_UM, L_MR, L_DM, L_ML);
 8000b1c:	78b9      	ldrb	r1, [r7, #2]
 8000b1e:	2321      	movs	r3, #33	; 0x21
 8000b20:	9301      	str	r3, [sp, #4]
 8000b22:	2325      	movs	r3, #37	; 0x25
 8000b24:	9300      	str	r3, [sp, #0]
 8000b26:	2327      	movs	r3, #39	; 0x27
 8000b28:	2223      	movs	r2, #35	; 0x23
 8000b2a:	6878      	ldr	r0, [r7, #4]
 8000b2c:	f000 f97c 	bl	8000e28 <circPerm>
        
        // U -> F -> D -> B (clockwise)
        circPerm(cube, angle, U_UL, F_UL, D_UL, B_DR);
 8000b30:	78b9      	ldrb	r1, [r7, #2]
 8000b32:	2318      	movs	r3, #24
 8000b34:	9301      	str	r3, [sp, #4]
 8000b36:	2350      	movs	r3, #80	; 0x50
 8000b38:	9300      	str	r3, [sp, #0]
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	2240      	movs	r2, #64	; 0x40
 8000b3e:	6878      	ldr	r0, [r7, #4]
 8000b40:	f000 f972 	bl	8000e28 <circPerm>
        circPerm(cube, angle, U_ML, F_ML, D_ML, B_MR);
 8000b44:	78b9      	ldrb	r1, [r7, #2]
 8000b46:	2317      	movs	r3, #23
 8000b48:	9301      	str	r3, [sp, #4]
 8000b4a:	2351      	movs	r3, #81	; 0x51
 8000b4c:	9300      	str	r3, [sp, #0]
 8000b4e:	2301      	movs	r3, #1
 8000b50:	2241      	movs	r2, #65	; 0x41
 8000b52:	6878      	ldr	r0, [r7, #4]
 8000b54:	f000 f968 	bl	8000e28 <circPerm>
        circPerm(cube, angle, U_DL, F_DL, D_DL, B_UR);
 8000b58:	78b9      	ldrb	r1, [r7, #2]
 8000b5a:	2316      	movs	r3, #22
 8000b5c:	9301      	str	r3, [sp, #4]
 8000b5e:	2352      	movs	r3, #82	; 0x52
 8000b60:	9300      	str	r3, [sp, #0]
 8000b62:	2302      	movs	r3, #2
 8000b64:	2242      	movs	r2, #66	; 0x42
 8000b66:	6878      	ldr	r0, [r7, #4]
 8000b68:	f000 f95e 	bl	8000e28 <circPerm>
        break;
 8000b6c:	e0f5      	b.n	8000d5a <move+0x36a>

      // Right move (R) -------------------------------------------------------
      case CUBE_MOVE_R :
        circPerm(cube, angle, R_UL, R_UR, R_DR, R_DL);
 8000b6e:	78b9      	ldrb	r1, [r7, #2]
 8000b70:	2332      	movs	r3, #50	; 0x32
 8000b72:	9301      	str	r3, [sp, #4]
 8000b74:	2338      	movs	r3, #56	; 0x38
 8000b76:	9300      	str	r3, [sp, #0]
 8000b78:	2336      	movs	r3, #54	; 0x36
 8000b7a:	2230      	movs	r2, #48	; 0x30
 8000b7c:	6878      	ldr	r0, [r7, #4]
 8000b7e:	f000 f953 	bl	8000e28 <circPerm>
        circPerm(cube, angle, R_UM, R_MR, R_DM, R_ML);
 8000b82:	78b9      	ldrb	r1, [r7, #2]
 8000b84:	2331      	movs	r3, #49	; 0x31
 8000b86:	9301      	str	r3, [sp, #4]
 8000b88:	2335      	movs	r3, #53	; 0x35
 8000b8a:	9300      	str	r3, [sp, #0]
 8000b8c:	2337      	movs	r3, #55	; 0x37
 8000b8e:	2233      	movs	r2, #51	; 0x33
 8000b90:	6878      	ldr	r0, [r7, #4]
 8000b92:	f000 f949 	bl	8000e28 <circPerm>
        
        // U -> B -> D -> F (clockwise)
        circPerm(cube, angle, U_UR, B_DL, D_UR, F_UR);
 8000b96:	78b9      	ldrb	r1, [r7, #2]
 8000b98:	2306      	movs	r3, #6
 8000b9a:	9301      	str	r3, [sp, #4]
 8000b9c:	2356      	movs	r3, #86	; 0x56
 8000b9e:	9300      	str	r3, [sp, #0]
 8000ba0:	2312      	movs	r3, #18
 8000ba2:	2246      	movs	r2, #70	; 0x46
 8000ba4:	6878      	ldr	r0, [r7, #4]
 8000ba6:	f000 f93f 	bl	8000e28 <circPerm>
        circPerm(cube, angle, U_MR, B_ML, D_MR, F_MR);
 8000baa:	78b9      	ldrb	r1, [r7, #2]
 8000bac:	2307      	movs	r3, #7
 8000bae:	9301      	str	r3, [sp, #4]
 8000bb0:	2357      	movs	r3, #87	; 0x57
 8000bb2:	9300      	str	r3, [sp, #0]
 8000bb4:	2311      	movs	r3, #17
 8000bb6:	2247      	movs	r2, #71	; 0x47
 8000bb8:	6878      	ldr	r0, [r7, #4]
 8000bba:	f000 f935 	bl	8000e28 <circPerm>
        circPerm(cube, angle, U_DR, B_UL, D_DR, F_DR);
 8000bbe:	78b9      	ldrb	r1, [r7, #2]
 8000bc0:	2308      	movs	r3, #8
 8000bc2:	9301      	str	r3, [sp, #4]
 8000bc4:	2358      	movs	r3, #88	; 0x58
 8000bc6:	9300      	str	r3, [sp, #0]
 8000bc8:	2310      	movs	r3, #16
 8000bca:	2248      	movs	r2, #72	; 0x48
 8000bcc:	6878      	ldr	r0, [r7, #4]
 8000bce:	f000 f92b 	bl	8000e28 <circPerm>
        break;
 8000bd2:	e0c2      	b.n	8000d5a <move+0x36a>

      // Up move (U) ----------------------------------------------------------
      case CUBE_MOVE_U :
        circPerm(cube, angle, U_UL, U_UR, U_DR, U_DL);
 8000bd4:	78b9      	ldrb	r1, [r7, #2]
 8000bd6:	2342      	movs	r3, #66	; 0x42
 8000bd8:	9301      	str	r3, [sp, #4]
 8000bda:	2348      	movs	r3, #72	; 0x48
 8000bdc:	9300      	str	r3, [sp, #0]
 8000bde:	2346      	movs	r3, #70	; 0x46
 8000be0:	2240      	movs	r2, #64	; 0x40
 8000be2:	6878      	ldr	r0, [r7, #4]
 8000be4:	f000 f920 	bl	8000e28 <circPerm>
        circPerm(cube, angle, U_UM, U_MR, U_DM, U_ML);
 8000be8:	78b9      	ldrb	r1, [r7, #2]
 8000bea:	2341      	movs	r3, #65	; 0x41
 8000bec:	9301      	str	r3, [sp, #4]
 8000bee:	2345      	movs	r3, #69	; 0x45
 8000bf0:	9300      	str	r3, [sp, #0]
 8000bf2:	2347      	movs	r3, #71	; 0x47
 8000bf4:	2243      	movs	r2, #67	; 0x43
 8000bf6:	6878      	ldr	r0, [r7, #4]
 8000bf8:	f000 f916 	bl	8000e28 <circPerm>
        
        // F -> L -> B -> R (clockwise)
        circPerm(cube, angle, F_UL, L_UL, B_UL, R_UL);
 8000bfc:	78b9      	ldrb	r1, [r7, #2]
 8000bfe:	2330      	movs	r3, #48	; 0x30
 8000c00:	9301      	str	r3, [sp, #4]
 8000c02:	2310      	movs	r3, #16
 8000c04:	9300      	str	r3, [sp, #0]
 8000c06:	2320      	movs	r3, #32
 8000c08:	2200      	movs	r2, #0
 8000c0a:	6878      	ldr	r0, [r7, #4]
 8000c0c:	f000 f90c 	bl	8000e28 <circPerm>
        circPerm(cube, angle, F_UM, L_UM, B_UM, R_UM);
 8000c10:	78b9      	ldrb	r1, [r7, #2]
 8000c12:	2333      	movs	r3, #51	; 0x33
 8000c14:	9301      	str	r3, [sp, #4]
 8000c16:	2313      	movs	r3, #19
 8000c18:	9300      	str	r3, [sp, #0]
 8000c1a:	2323      	movs	r3, #35	; 0x23
 8000c1c:	2203      	movs	r2, #3
 8000c1e:	6878      	ldr	r0, [r7, #4]
 8000c20:	f000 f902 	bl	8000e28 <circPerm>
        circPerm(cube, angle, F_UR, L_UR, B_UR, R_UR);
 8000c24:	78b9      	ldrb	r1, [r7, #2]
 8000c26:	2336      	movs	r3, #54	; 0x36
 8000c28:	9301      	str	r3, [sp, #4]
 8000c2a:	2316      	movs	r3, #22
 8000c2c:	9300      	str	r3, [sp, #0]
 8000c2e:	2326      	movs	r3, #38	; 0x26
 8000c30:	2206      	movs	r2, #6
 8000c32:	6878      	ldr	r0, [r7, #4]
 8000c34:	f000 f8f8 	bl	8000e28 <circPerm>
        break;
 8000c38:	e08f      	b.n	8000d5a <move+0x36a>

      // Down move (D) --------------------------------------------------------
      case CUBE_MOVE_D :
        circPerm(cube, angle, D_UL, D_UR, D_DR, D_DL);
 8000c3a:	78b9      	ldrb	r1, [r7, #2]
 8000c3c:	2352      	movs	r3, #82	; 0x52
 8000c3e:	9301      	str	r3, [sp, #4]
 8000c40:	2358      	movs	r3, #88	; 0x58
 8000c42:	9300      	str	r3, [sp, #0]
 8000c44:	2356      	movs	r3, #86	; 0x56
 8000c46:	2250      	movs	r2, #80	; 0x50
 8000c48:	6878      	ldr	r0, [r7, #4]
 8000c4a:	f000 f8ed 	bl	8000e28 <circPerm>
        circPerm(cube, angle, D_UM, D_MR, D_DM, D_ML);
 8000c4e:	78b9      	ldrb	r1, [r7, #2]
 8000c50:	2351      	movs	r3, #81	; 0x51
 8000c52:	9301      	str	r3, [sp, #4]
 8000c54:	2355      	movs	r3, #85	; 0x55
 8000c56:	9300      	str	r3, [sp, #0]
 8000c58:	2357      	movs	r3, #87	; 0x57
 8000c5a:	2253      	movs	r2, #83	; 0x53
 8000c5c:	6878      	ldr	r0, [r7, #4]
 8000c5e:	f000 f8e3 	bl	8000e28 <circPerm>
        
        // U -> B -> D -> F (clockwise)
        circPerm(cube, angle, F_DL, R_DL, B_DL, L_DL);
 8000c62:	78b9      	ldrb	r1, [r7, #2]
 8000c64:	2322      	movs	r3, #34	; 0x22
 8000c66:	9301      	str	r3, [sp, #4]
 8000c68:	2312      	movs	r3, #18
 8000c6a:	9300      	str	r3, [sp, #0]
 8000c6c:	2332      	movs	r3, #50	; 0x32
 8000c6e:	2202      	movs	r2, #2
 8000c70:	6878      	ldr	r0, [r7, #4]
 8000c72:	f000 f8d9 	bl	8000e28 <circPerm>
        circPerm(cube, angle, F_DM, R_DM, B_DM, L_DM);
 8000c76:	78b9      	ldrb	r1, [r7, #2]
 8000c78:	2325      	movs	r3, #37	; 0x25
 8000c7a:	9301      	str	r3, [sp, #4]
 8000c7c:	2315      	movs	r3, #21
 8000c7e:	9300      	str	r3, [sp, #0]
 8000c80:	2335      	movs	r3, #53	; 0x35
 8000c82:	2205      	movs	r2, #5
 8000c84:	6878      	ldr	r0, [r7, #4]
 8000c86:	f000 f8cf 	bl	8000e28 <circPerm>
        circPerm(cube, angle, F_DR, R_DR, B_DR, L_DR);
 8000c8a:	78b9      	ldrb	r1, [r7, #2]
 8000c8c:	2328      	movs	r3, #40	; 0x28
 8000c8e:	9301      	str	r3, [sp, #4]
 8000c90:	2318      	movs	r3, #24
 8000c92:	9300      	str	r3, [sp, #0]
 8000c94:	2338      	movs	r3, #56	; 0x38
 8000c96:	2208      	movs	r2, #8
 8000c98:	6878      	ldr	r0, [r7, #4]
 8000c9a:	f000 f8c5 	bl	8000e28 <circPerm>
        break;
 8000c9e:	e05c      	b.n	8000d5a <move+0x36a>

      // Middle move (M) ------------------------------------------------------
      case CUBE_MOVE_M :
        circPerm(cube, angle, F_UM, D_UM, B_DM, U_UM);
 8000ca0:	78b9      	ldrb	r1, [r7, #2]
 8000ca2:	2343      	movs	r3, #67	; 0x43
 8000ca4:	9301      	str	r3, [sp, #4]
 8000ca6:	2315      	movs	r3, #21
 8000ca8:	9300      	str	r3, [sp, #0]
 8000caa:	2353      	movs	r3, #83	; 0x53
 8000cac:	2203      	movs	r2, #3
 8000cae:	6878      	ldr	r0, [r7, #4]
 8000cb0:	f000 f8ba 	bl	8000e28 <circPerm>
        circPerm(cube, angle, F_MM, D_MM, B_MM, U_MM);
 8000cb4:	78b9      	ldrb	r1, [r7, #2]
 8000cb6:	2344      	movs	r3, #68	; 0x44
 8000cb8:	9301      	str	r3, [sp, #4]
 8000cba:	2314      	movs	r3, #20
 8000cbc:	9300      	str	r3, [sp, #0]
 8000cbe:	2354      	movs	r3, #84	; 0x54
 8000cc0:	2204      	movs	r2, #4
 8000cc2:	6878      	ldr	r0, [r7, #4]
 8000cc4:	f000 f8b0 	bl	8000e28 <circPerm>
        circPerm(cube, angle, F_DM, D_DM, B_UM, U_DM);    
 8000cc8:	78b9      	ldrb	r1, [r7, #2]
 8000cca:	2345      	movs	r3, #69	; 0x45
 8000ccc:	9301      	str	r3, [sp, #4]
 8000cce:	2313      	movs	r3, #19
 8000cd0:	9300      	str	r3, [sp, #0]
 8000cd2:	2355      	movs	r3, #85	; 0x55
 8000cd4:	2205      	movs	r2, #5
 8000cd6:	6878      	ldr	r0, [r7, #4]
 8000cd8:	f000 f8a6 	bl	8000e28 <circPerm>
        break;
 8000cdc:	e03d      	b.n	8000d5a <move+0x36a>

      // Equator move (E) -----------------------------------------------------
      case CUBE_MOVE_E :
        circPerm(cube, angle, F_ML, R_ML, B_ML, L_ML);
 8000cde:	78b9      	ldrb	r1, [r7, #2]
 8000ce0:	2321      	movs	r3, #33	; 0x21
 8000ce2:	9301      	str	r3, [sp, #4]
 8000ce4:	2311      	movs	r3, #17
 8000ce6:	9300      	str	r3, [sp, #0]
 8000ce8:	2331      	movs	r3, #49	; 0x31
 8000cea:	2201      	movs	r2, #1
 8000cec:	6878      	ldr	r0, [r7, #4]
 8000cee:	f000 f89b 	bl	8000e28 <circPerm>
        circPerm(cube, angle, F_MM, R_MM, B_MM, L_MM);
 8000cf2:	78b9      	ldrb	r1, [r7, #2]
 8000cf4:	2324      	movs	r3, #36	; 0x24
 8000cf6:	9301      	str	r3, [sp, #4]
 8000cf8:	2314      	movs	r3, #20
 8000cfa:	9300      	str	r3, [sp, #0]
 8000cfc:	2334      	movs	r3, #52	; 0x34
 8000cfe:	2204      	movs	r2, #4
 8000d00:	6878      	ldr	r0, [r7, #4]
 8000d02:	f000 f891 	bl	8000e28 <circPerm>
        circPerm(cube, angle, F_MR, R_MR, B_MR, L_MR);
 8000d06:	78b9      	ldrb	r1, [r7, #2]
 8000d08:	2327      	movs	r3, #39	; 0x27
 8000d0a:	9301      	str	r3, [sp, #4]
 8000d0c:	2317      	movs	r3, #23
 8000d0e:	9300      	str	r3, [sp, #0]
 8000d10:	2337      	movs	r3, #55	; 0x37
 8000d12:	2207      	movs	r2, #7
 8000d14:	6878      	ldr	r0, [r7, #4]
 8000d16:	f000 f887 	bl	8000e28 <circPerm>
        break;
 8000d1a:	e01e      	b.n	8000d5a <move+0x36a>

      // Standing move (S) ----------------------------------------------------
      case CUBE_MOVE_S :
        circPerm(cube, angle, U_ML, R_UM, D_MR, L_DM);
 8000d1c:	78b9      	ldrb	r1, [r7, #2]
 8000d1e:	2325      	movs	r3, #37	; 0x25
 8000d20:	9301      	str	r3, [sp, #4]
 8000d22:	2357      	movs	r3, #87	; 0x57
 8000d24:	9300      	str	r3, [sp, #0]
 8000d26:	2333      	movs	r3, #51	; 0x33
 8000d28:	2241      	movs	r2, #65	; 0x41
 8000d2a:	6878      	ldr	r0, [r7, #4]
 8000d2c:	f000 f87c 	bl	8000e28 <circPerm>
        circPerm(cube, angle, U_MM, R_MM, D_MM, L_MM);
 8000d30:	78b9      	ldrb	r1, [r7, #2]
 8000d32:	2324      	movs	r3, #36	; 0x24
 8000d34:	9301      	str	r3, [sp, #4]
 8000d36:	2354      	movs	r3, #84	; 0x54
 8000d38:	9300      	str	r3, [sp, #0]
 8000d3a:	2334      	movs	r3, #52	; 0x34
 8000d3c:	2244      	movs	r2, #68	; 0x44
 8000d3e:	6878      	ldr	r0, [r7, #4]
 8000d40:	f000 f872 	bl	8000e28 <circPerm>
        circPerm(cube, angle, U_MR, R_DM, D_ML, U_UM);
 8000d44:	78b9      	ldrb	r1, [r7, #2]
 8000d46:	2343      	movs	r3, #67	; 0x43
 8000d48:	9301      	str	r3, [sp, #4]
 8000d4a:	2351      	movs	r3, #81	; 0x51
 8000d4c:	9300      	str	r3, [sp, #0]
 8000d4e:	2335      	movs	r3, #53	; 0x35
 8000d50:	2247      	movs	r2, #71	; 0x47
 8000d52:	6878      	ldr	r0, [r7, #4]
 8000d54:	f000 f868 	bl	8000e28 <circPerm>
        break;
 8000d58:	bf00      	nop
    }
  }
}
 8000d5a:	bf00      	nop
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop

08000d64 <swap>:

// ----------------------------------------------------------------------------
// swap() function (private)
// ----------------------------------------------------------------------------
static void swap(rgbLedType (*cube)[9], uint8_t src, uint8_t dest)
{
 8000d64:	b490      	push	{r4, r7}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	460b      	mov	r3, r1
 8000d6e:	70fb      	strb	r3, [r7, #3]
 8000d70:	4613      	mov	r3, r2
 8000d72:	70bb      	strb	r3, [r7, #2]
  rgbLedType tmp;
  uint8_t src_face, src_square;
  uint8_t dest_face, dest_square;

  // Convert 1D index to 2D index
  src_square  = src & 0x0F;
 8000d74:	78fb      	ldrb	r3, [r7, #3]
 8000d76:	f003 030f 	and.w	r3, r3, #15
 8000d7a:	73fb      	strb	r3, [r7, #15]
  src_face    = (src & 0xF0) >> 4;
 8000d7c:	78fb      	ldrb	r3, [r7, #3]
 8000d7e:	091b      	lsrs	r3, r3, #4
 8000d80:	73bb      	strb	r3, [r7, #14]
  dest_square = dest & 0x0F;
 8000d82:	78bb      	ldrb	r3, [r7, #2]
 8000d84:	f003 030f 	and.w	r3, r3, #15
 8000d88:	737b      	strb	r3, [r7, #13]
  dest_face   = (dest & 0xF0) >> 4;
 8000d8a:	78bb      	ldrb	r3, [r7, #2]
 8000d8c:	091b      	lsrs	r3, r3, #4
 8000d8e:	733b      	strb	r3, [r7, #12]

  tmp = cube[dest_face][dest_square];
 8000d90:	7b3a      	ldrb	r2, [r7, #12]
 8000d92:	4613      	mov	r3, r2
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	4413      	add	r3, r2
 8000d98:	00da      	lsls	r2, r3, #3
 8000d9a:	4413      	add	r3, r2
 8000d9c:	687a      	ldr	r2, [r7, #4]
 8000d9e:	18d1      	adds	r1, r2, r3
 8000da0:	7b7a      	ldrb	r2, [r7, #13]
 8000da2:	4613      	mov	r3, r2
 8000da4:	005b      	lsls	r3, r3, #1
 8000da6:	4413      	add	r3, r2
 8000da8:	18ca      	adds	r2, r1, r3
 8000daa:	f107 0308 	add.w	r3, r7, #8
 8000dae:	8811      	ldrh	r1, [r2, #0]
 8000db0:	7892      	ldrb	r2, [r2, #2]
 8000db2:	8019      	strh	r1, [r3, #0]
 8000db4:	709a      	strb	r2, [r3, #2]
  cube[dest_face][dest_square] = cube[src_face][src_square];
 8000db6:	7bba      	ldrb	r2, [r7, #14]
 8000db8:	4613      	mov	r3, r2
 8000dba:	005b      	lsls	r3, r3, #1
 8000dbc:	4413      	add	r3, r2
 8000dbe:	00da      	lsls	r2, r3, #3
 8000dc0:	4413      	add	r3, r2
 8000dc2:	687a      	ldr	r2, [r7, #4]
 8000dc4:	18d0      	adds	r0, r2, r3
 8000dc6:	7bfa      	ldrb	r2, [r7, #15]
 8000dc8:	7b39      	ldrb	r1, [r7, #12]
 8000dca:	460b      	mov	r3, r1
 8000dcc:	005b      	lsls	r3, r3, #1
 8000dce:	440b      	add	r3, r1
 8000dd0:	00d9      	lsls	r1, r3, #3
 8000dd2:	440b      	add	r3, r1
 8000dd4:	6879      	ldr	r1, [r7, #4]
 8000dd6:	18cc      	adds	r4, r1, r3
 8000dd8:	7b79      	ldrb	r1, [r7, #13]
 8000dda:	460b      	mov	r3, r1
 8000ddc:	005b      	lsls	r3, r3, #1
 8000dde:	440b      	add	r3, r1
 8000de0:	18e1      	adds	r1, r4, r3
 8000de2:	4613      	mov	r3, r2
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	4413      	add	r3, r2
 8000de8:	18c2      	adds	r2, r0, r3
 8000dea:	460b      	mov	r3, r1
 8000dec:	8811      	ldrh	r1, [r2, #0]
 8000dee:	7892      	ldrb	r2, [r2, #2]
 8000df0:	8019      	strh	r1, [r3, #0]
 8000df2:	709a      	strb	r2, [r3, #2]
  cube[src_face][src_square] = tmp;
 8000df4:	7bba      	ldrb	r2, [r7, #14]
 8000df6:	4613      	mov	r3, r2
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	4413      	add	r3, r2
 8000dfc:	00da      	lsls	r2, r3, #3
 8000dfe:	4413      	add	r3, r2
 8000e00:	687a      	ldr	r2, [r7, #4]
 8000e02:	18d1      	adds	r1, r2, r3
 8000e04:	7bfa      	ldrb	r2, [r7, #15]
 8000e06:	4613      	mov	r3, r2
 8000e08:	005b      	lsls	r3, r3, #1
 8000e0a:	4413      	add	r3, r2
 8000e0c:	440b      	add	r3, r1
 8000e0e:	461a      	mov	r2, r3
 8000e10:	f107 0308 	add.w	r3, r7, #8
 8000e14:	8819      	ldrh	r1, [r3, #0]
 8000e16:	789b      	ldrb	r3, [r3, #2]
 8000e18:	8011      	strh	r1, [r2, #0]
 8000e1a:	7093      	strb	r3, [r2, #2]
}
 8000e1c:	bf00      	nop
 8000e1e:	3710      	adds	r7, #16
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bc90      	pop	{r4, r7}
 8000e24:	4770      	bx	lr
	...

08000e28 <circPerm>:
// circPerm() function (private)
// ----------------------------------------------------------------------------
// Note: cyclic permutation can be seen as product of transpositions (aka swaps)
// So a swap describes them all.
static void circPerm(rgbLedType (*cube)[9], uint8_t angle, uint8_t square_0, uint8_t square_1, uint8_t square_2, uint8_t square_3)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	4608      	mov	r0, r1
 8000e32:	4611      	mov	r1, r2
 8000e34:	461a      	mov	r2, r3
 8000e36:	4603      	mov	r3, r0
 8000e38:	70fb      	strb	r3, [r7, #3]
 8000e3a:	460b      	mov	r3, r1
 8000e3c:	70bb      	strb	r3, [r7, #2]
 8000e3e:	4613      	mov	r3, r2
 8000e40:	707b      	strb	r3, [r7, #1]
  switch(angle)
 8000e42:	78fb      	ldrb	r3, [r7, #3]
 8000e44:	2b03      	cmp	r3, #3
 8000e46:	d83f      	bhi.n	8000ec8 <circPerm+0xa0>
 8000e48:	a201      	add	r2, pc, #4	; (adr r2, 8000e50 <circPerm+0x28>)
 8000e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e4e:	bf00      	nop
 8000e50:	08000ec7 	.word	0x08000ec7
 8000e54:	08000e61 	.word	0x08000e61
 8000e58:	08000e87 	.word	0x08000e87
 8000e5c:	08000ea1 	.word	0x08000ea1
    case ROTATE_0 :
      // Nothing to do.
      break;

    case ROTATE_90 :
      swap(cube, square_3, square_2);
 8000e60:	7c3a      	ldrb	r2, [r7, #16]
 8000e62:	7d3b      	ldrb	r3, [r7, #20]
 8000e64:	4619      	mov	r1, r3
 8000e66:	6878      	ldr	r0, [r7, #4]
 8000e68:	f7ff ff7c 	bl	8000d64 <swap>
      swap(cube, square_2, square_1);
 8000e6c:	787a      	ldrb	r2, [r7, #1]
 8000e6e:	7c3b      	ldrb	r3, [r7, #16]
 8000e70:	4619      	mov	r1, r3
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f7ff ff76 	bl	8000d64 <swap>
      swap(cube, square_1, square_0);
 8000e78:	78ba      	ldrb	r2, [r7, #2]
 8000e7a:	787b      	ldrb	r3, [r7, #1]
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	6878      	ldr	r0, [r7, #4]
 8000e80:	f7ff ff70 	bl	8000d64 <swap>
      break;
 8000e84:	e020      	b.n	8000ec8 <circPerm+0xa0>

    case ROTATE_180 :
      swap(cube, square_0, square_2);
 8000e86:	7c3a      	ldrb	r2, [r7, #16]
 8000e88:	78bb      	ldrb	r3, [r7, #2]
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	6878      	ldr	r0, [r7, #4]
 8000e8e:	f7ff ff69 	bl	8000d64 <swap>
      swap(cube, square_1, square_3);
 8000e92:	7d3a      	ldrb	r2, [r7, #20]
 8000e94:	787b      	ldrb	r3, [r7, #1]
 8000e96:	4619      	mov	r1, r3
 8000e98:	6878      	ldr	r0, [r7, #4]
 8000e9a:	f7ff ff63 	bl	8000d64 <swap>
      break;
 8000e9e:	e013      	b.n	8000ec8 <circPerm+0xa0>

    case ROTATE_270 :
      swap(cube, square_0, square_1);
 8000ea0:	787a      	ldrb	r2, [r7, #1]
 8000ea2:	78bb      	ldrb	r3, [r7, #2]
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	6878      	ldr	r0, [r7, #4]
 8000ea8:	f7ff ff5c 	bl	8000d64 <swap>
      swap(cube, square_1, square_2);
 8000eac:	7c3a      	ldrb	r2, [r7, #16]
 8000eae:	787b      	ldrb	r3, [r7, #1]
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	f7ff ff56 	bl	8000d64 <swap>
      swap(cube, square_2, square_3);
 8000eb8:	7d3a      	ldrb	r2, [r7, #20]
 8000eba:	7c3b      	ldrb	r3, [r7, #16]
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	6878      	ldr	r0, [r7, #4]
 8000ec0:	f7ff ff50 	bl	8000d64 <swap>
      break;
 8000ec4:	e000      	b.n	8000ec8 <circPerm+0xa0>
      break;
 8000ec6:	bf00      	nop

    // TODO: handle unsupported angle value
  }
}
 8000ec8:	bf00      	nop
 8000eca:	3708      	adds	r7, #8
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <paintFace>:
// TODO: 
// - Rename and remove the LED value init (redundant with LEDs_update)
// - Make use of the I2C LLD return value?
// 
void paintFace(rgbLedType *face, rgbLedType ledColor)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b085      	sub	sp, #20
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	6039      	str	r1, [r7, #0]
  uint8_t i;
  
  for(i = 0U; i < 9U; i++)
 8000eda:	2300      	movs	r3, #0
 8000edc:	73fb      	strb	r3, [r7, #15]
 8000ede:	e01a      	b.n	8000f16 <paintFace+0x46>
  {
    face[i].r = ledColor.r;
 8000ee0:	7bfa      	ldrb	r2, [r7, #15]
 8000ee2:	4613      	mov	r3, r2
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	4413      	add	r3, r2
 8000ee8:	687a      	ldr	r2, [r7, #4]
 8000eea:	4413      	add	r3, r2
 8000eec:	783a      	ldrb	r2, [r7, #0]
 8000eee:	701a      	strb	r2, [r3, #0]
    face[i].g = ledColor.g;
 8000ef0:	7bfa      	ldrb	r2, [r7, #15]
 8000ef2:	4613      	mov	r3, r2
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	4413      	add	r3, r2
 8000ef8:	687a      	ldr	r2, [r7, #4]
 8000efa:	4413      	add	r3, r2
 8000efc:	787a      	ldrb	r2, [r7, #1]
 8000efe:	705a      	strb	r2, [r3, #1]
    face[i].b = ledColor.b;
 8000f00:	7bfa      	ldrb	r2, [r7, #15]
 8000f02:	4613      	mov	r3, r2
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	4413      	add	r3, r2
 8000f08:	687a      	ldr	r2, [r7, #4]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	78ba      	ldrb	r2, [r7, #2]
 8000f0e:	709a      	strb	r2, [r3, #2]
  for(i = 0U; i < 9U; i++)
 8000f10:	7bfb      	ldrb	r3, [r7, #15]
 8000f12:	3301      	adds	r3, #1
 8000f14:	73fb      	strb	r3, [r7, #15]
 8000f16:	7bfb      	ldrb	r3, [r7, #15]
 8000f18:	2b08      	cmp	r3, #8
 8000f1a:	d9e1      	bls.n	8000ee0 <paintFace+0x10>
  }
}
 8000f1c:	bf00      	nop
 8000f1e:	bf00      	nop
 8000f20:	3714      	adds	r7, #20
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
	...

08000f2c <ledInitDriver>:
// TODO: 
// - Rename and remove the LED value init (redundant with LEDs_update)
// - Make use of the I2C LLD return value?
// 
void ledInitDriver(void)
{
 8000f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f2e:	b087      	sub	sp, #28
 8000f30:	af02      	add	r7, sp, #8
 8000f32:	466b      	mov	r3, sp
 8000f34:	461e      	mov	r6, r3
  const uint8_t nBytes = 17;
 8000f36:	2311      	movs	r3, #17
 8000f38:	73bb      	strb	r3, [r7, #14]
  uint8_t I2C_buff[nBytes];
 8000f3a:	7bbb      	ldrb	r3, [r7, #14]
 8000f3c:	3b01      	subs	r3, #1
 8000f3e:	60bb      	str	r3, [r7, #8]
 8000f40:	7bbb      	ldrb	r3, [r7, #14]
 8000f42:	2200      	movs	r2, #0
 8000f44:	461c      	mov	r4, r3
 8000f46:	4615      	mov	r5, r2
 8000f48:	f04f 0200 	mov.w	r2, #0
 8000f4c:	f04f 0300 	mov.w	r3, #0
 8000f50:	00eb      	lsls	r3, r5, #3
 8000f52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000f56:	00e2      	lsls	r2, r4, #3
 8000f58:	7bbb      	ldrb	r3, [r7, #14]
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	4611      	mov	r1, r2
 8000f60:	f04f 0200 	mov.w	r2, #0
 8000f64:	f04f 0300 	mov.w	r3, #0
 8000f68:	00cb      	lsls	r3, r1, #3
 8000f6a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000f6e:	00c2      	lsls	r2, r0, #3
 8000f70:	7bbb      	ldrb	r3, [r7, #14]
 8000f72:	3307      	adds	r3, #7
 8000f74:	08db      	lsrs	r3, r3, #3
 8000f76:	00db      	lsls	r3, r3, #3
 8000f78:	ebad 0d03 	sub.w	sp, sp, r3
 8000f7c:	ab02      	add	r3, sp, #8
 8000f7e:	3300      	adds	r3, #0
 8000f80:	607b      	str	r3, [r7, #4]
  uint8_t LED = 0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	70fb      	strb	r3, [r7, #3]
  uint8_t i = 0;
 8000f86:	2300      	movs	r3, #0
 8000f88:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef I2C_stat;

  // Release hardware reset
  HAL_GPIO_WritePin(GPIOA, DRIVER_0_RESET_Pin | DRIVER_1_RESET_Pin, GPIO_PIN_SET);
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	2103      	movs	r1, #3
 8000f8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f92:	f001 f897 	bl	80020c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, DRIVER_0_OE_Pin | DRIVER_1_OE_Pin, GPIO_PIN_RESET);
 8000f96:	2200      	movs	r2, #0
 8000f98:	210c      	movs	r1, #12
 8000f9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f9e:	f001 f891 	bl	80020c4 <HAL_GPIO_WritePin>

  // Initialise configuration
  I2C_buff[0] = REG_MODE1;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	701a      	strb	r2, [r3, #0]
  I2C_buff[1] = 0x00;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2200      	movs	r2, #0
 8000fac:	705a      	strb	r2, [r3, #1]
  I2C_stat = HAL_I2C_Master_Transmit(&hi2c1, ADDR_LED_DRV_0, I2C_buff, 2, HAL_MAX_DELAY);
 8000fae:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb2:	9300      	str	r3, [sp, #0]
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	687a      	ldr	r2, [r7, #4]
 8000fb8:	212a      	movs	r1, #42	; 0x2a
 8000fba:	4831      	ldr	r0, [pc, #196]	; (8001080 <ledInitDriver+0x154>)
 8000fbc:	f001 f92a 	bl	8002214 <HAL_I2C_Master_Transmit>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	70bb      	strb	r3, [r7, #2]
  I2C_stat = HAL_I2C_Master_Transmit(&hi2c1, ADDR_LED_DRV_1, I2C_buff, 2, HAL_MAX_DELAY);
 8000fc4:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc8:	9300      	str	r3, [sp, #0]
 8000fca:	2302      	movs	r3, #2
 8000fcc:	687a      	ldr	r2, [r7, #4]
 8000fce:	2132      	movs	r1, #50	; 0x32
 8000fd0:	482b      	ldr	r0, [pc, #172]	; (8001080 <ledInitDriver+0x154>)
 8000fd2:	f001 f91f 	bl	8002214 <HAL_I2C_Master_Transmit>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	70bb      	strb	r3, [r7, #2]
  
  // Set LEDs control to PWM drive
  I2C_buff[0] = REG_LEDOUT0 | AUTO_INC_OPT;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2282      	movs	r2, #130	; 0x82
 8000fde:	701a      	strb	r2, [r3, #0]
  I2C_buff[1] = 0xAA;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	22aa      	movs	r2, #170	; 0xaa
 8000fe4:	705a      	strb	r2, [r3, #1]
  I2C_buff[2] = 0xAA;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	22aa      	movs	r2, #170	; 0xaa
 8000fea:	709a      	strb	r2, [r3, #2]
  I2C_buff[3] = 0xAA;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	22aa      	movs	r2, #170	; 0xaa
 8000ff0:	70da      	strb	r2, [r3, #3]
  I2C_buff[4] = 0xAA;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	22aa      	movs	r2, #170	; 0xaa
 8000ff6:	711a      	strb	r2, [r3, #4]
  I2C_stat = HAL_I2C_Master_Transmit(&hi2c1, ADDR_LED_DRV_0, I2C_buff, 5, HAL_MAX_DELAY);
 8000ff8:	f04f 33ff 	mov.w	r3, #4294967295
 8000ffc:	9300      	str	r3, [sp, #0]
 8000ffe:	2305      	movs	r3, #5
 8001000:	687a      	ldr	r2, [r7, #4]
 8001002:	212a      	movs	r1, #42	; 0x2a
 8001004:	481e      	ldr	r0, [pc, #120]	; (8001080 <ledInitDriver+0x154>)
 8001006:	f001 f905 	bl	8002214 <HAL_I2C_Master_Transmit>
 800100a:	4603      	mov	r3, r0
 800100c:	70bb      	strb	r3, [r7, #2]
  I2C_stat = HAL_I2C_Master_Transmit(&hi2c1, ADDR_LED_DRV_1, I2C_buff, 5, HAL_MAX_DELAY);
 800100e:	f04f 33ff 	mov.w	r3, #4294967295
 8001012:	9300      	str	r3, [sp, #0]
 8001014:	2305      	movs	r3, #5
 8001016:	687a      	ldr	r2, [r7, #4]
 8001018:	2132      	movs	r1, #50	; 0x32
 800101a:	4819      	ldr	r0, [pc, #100]	; (8001080 <ledInitDriver+0x154>)
 800101c:	f001 f8fa 	bl	8002214 <HAL_I2C_Master_Transmit>
 8001020:	4603      	mov	r3, r0
 8001022:	70bb      	strb	r3, [r7, #2]
  //   I2C_buff[1 + (LED*3) + 2] = RED_LED.g; // green channel
  // }
  // I2C_stat = HAL_I2C_Master_Transmit(&hi2c1, ADDR_LED_DRV_1, I2C_buff, 12+1, HAL_MAX_DELAY);

  // Individual LED reference current (global brightness)
  I2C_buff[0] = REG_IREF0 | AUTO_INC_OPT;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2298      	movs	r2, #152	; 0x98
 8001028:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 16; i++)
 800102a:	2300      	movs	r3, #0
 800102c:	73fb      	strb	r3, [r7, #15]
 800102e:	e007      	b.n	8001040 <ledInitDriver+0x114>
  {
    I2C_buff[i+1] = 0x10;
 8001030:	7bfb      	ldrb	r3, [r7, #15]
 8001032:	3301      	adds	r3, #1
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	2110      	movs	r1, #16
 8001038:	54d1      	strb	r1, [r2, r3]
  for (i = 0; i < 16; i++)
 800103a:	7bfb      	ldrb	r3, [r7, #15]
 800103c:	3301      	adds	r3, #1
 800103e:	73fb      	strb	r3, [r7, #15]
 8001040:	7bfb      	ldrb	r3, [r7, #15]
 8001042:	2b0f      	cmp	r3, #15
 8001044:	d9f4      	bls.n	8001030 <ledInitDriver+0x104>
  }
  I2C_stat = HAL_I2C_Master_Transmit(&hi2c1, ADDR_LED_DRV_0, I2C_buff, nBytes, HAL_MAX_DELAY);
 8001046:	7bbb      	ldrb	r3, [r7, #14]
 8001048:	b29b      	uxth	r3, r3
 800104a:	f04f 32ff 	mov.w	r2, #4294967295
 800104e:	9200      	str	r2, [sp, #0]
 8001050:	687a      	ldr	r2, [r7, #4]
 8001052:	212a      	movs	r1, #42	; 0x2a
 8001054:	480a      	ldr	r0, [pc, #40]	; (8001080 <ledInitDriver+0x154>)
 8001056:	f001 f8dd 	bl	8002214 <HAL_I2C_Master_Transmit>
 800105a:	4603      	mov	r3, r0
 800105c:	70bb      	strb	r3, [r7, #2]
  I2C_stat = HAL_I2C_Master_Transmit(&hi2c1, ADDR_LED_DRV_1, I2C_buff, nBytes, HAL_MAX_DELAY);
 800105e:	7bbb      	ldrb	r3, [r7, #14]
 8001060:	b29b      	uxth	r3, r3
 8001062:	f04f 32ff 	mov.w	r2, #4294967295
 8001066:	9200      	str	r2, [sp, #0]
 8001068:	687a      	ldr	r2, [r7, #4]
 800106a:	2132      	movs	r1, #50	; 0x32
 800106c:	4804      	ldr	r0, [pc, #16]	; (8001080 <ledInitDriver+0x154>)
 800106e:	f001 f8d1 	bl	8002214 <HAL_I2C_Master_Transmit>
 8001072:	4603      	mov	r3, r0
 8001074:	70bb      	strb	r3, [r7, #2]
 8001076:	46b5      	mov	sp, r6
}
 8001078:	bf00      	nop
 800107a:	3714      	adds	r7, #20
 800107c:	46bd      	mov	sp, r7
 800107e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001080:	20000028 	.word	0x20000028

08001084 <ledUpdateFace>:
// Attention; suivant le board ID, la correspondance tableau <-> LEDs peut être permutée (miroir ? rotation ?) 
// Tout dépend comment la carte a été orientée.
// Dans tous les cas, il faut être capable de l'indiquer.
// Ce sont des considérations bas niveau et les fonctions de rotation dans la librairie cube.c n'ont pas à s'en préoccuper
void ledUpdateFace(rgbLedType (*cube)[9], uint8_t face)
{
 8001084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001088:	b08d      	sub	sp, #52	; 0x34
 800108a:	af02      	add	r7, sp, #8
 800108c:	60f8      	str	r0, [r7, #12]
 800108e:	460b      	mov	r3, r1
 8001090:	72fb      	strb	r3, [r7, #11]
 8001092:	466b      	mov	r3, sp
 8001094:	461e      	mov	r6, r3
  const uint8_t nBytes = 17;
 8001096:	2311      	movs	r3, #17
 8001098:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t ledDriver0Buff[nBytes];
 800109c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80010a0:	3b01      	subs	r3, #1
 80010a2:	627b      	str	r3, [r7, #36]	; 0x24
 80010a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80010a8:	2200      	movs	r2, #0
 80010aa:	603b      	str	r3, [r7, #0]
 80010ac:	607a      	str	r2, [r7, #4]
 80010ae:	f04f 0200 	mov.w	r2, #0
 80010b2:	f04f 0300 	mov.w	r3, #0
 80010b6:	6879      	ldr	r1, [r7, #4]
 80010b8:	00cb      	lsls	r3, r1, #3
 80010ba:	6839      	ldr	r1, [r7, #0]
 80010bc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80010c0:	6839      	ldr	r1, [r7, #0]
 80010c2:	00ca      	lsls	r2, r1, #3
 80010c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80010c8:	2200      	movs	r2, #0
 80010ca:	469a      	mov	sl, r3
 80010cc:	4693      	mov	fp, r2
 80010ce:	f04f 0200 	mov.w	r2, #0
 80010d2:	f04f 0300 	mov.w	r3, #0
 80010d6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80010da:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80010de:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80010e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80010e6:	3307      	adds	r3, #7
 80010e8:	08db      	lsrs	r3, r3, #3
 80010ea:	00db      	lsls	r3, r3, #3
 80010ec:	ebad 0d03 	sub.w	sp, sp, r3
 80010f0:	ab02      	add	r3, sp, #8
 80010f2:	3300      	adds	r3, #0
 80010f4:	61fb      	str	r3, [r7, #28]
  uint8_t ledDriver1Buff[nBytes];
 80010f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80010fa:	3b01      	subs	r3, #1
 80010fc:	61bb      	str	r3, [r7, #24]
 80010fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001102:	2200      	movs	r2, #0
 8001104:	4698      	mov	r8, r3
 8001106:	4691      	mov	r9, r2
 8001108:	f04f 0200 	mov.w	r2, #0
 800110c:	f04f 0300 	mov.w	r3, #0
 8001110:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001114:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001118:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800111c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001120:	2200      	movs	r2, #0
 8001122:	461c      	mov	r4, r3
 8001124:	4615      	mov	r5, r2
 8001126:	f04f 0200 	mov.w	r2, #0
 800112a:	f04f 0300 	mov.w	r3, #0
 800112e:	00eb      	lsls	r3, r5, #3
 8001130:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001134:	00e2      	lsls	r2, r4, #3
 8001136:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800113a:	3307      	adds	r3, #7
 800113c:	08db      	lsrs	r3, r3, #3
 800113e:	00db      	lsls	r3, r3, #3
 8001140:	ebad 0d03 	sub.w	sp, sp, r3
 8001144:	ab02      	add	r3, sp, #8
 8001146:	3300      	adds	r3, #0
 8001148:	617b      	str	r3, [r7, #20]

  // --------------------------------------------------------------------------
  // Build I2C message for the first LED driver
  // --------------------------------------------------------------------------
  ledDriver0Buff[0] = REG_PWM0 | AUTO_INC_OPT;
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	2288      	movs	r2, #136	; 0x88
 800114e:	701a      	strb	r2, [r3, #0]

  ledDriver0Buff[1] = cube[face][6].r;
 8001150:	7afa      	ldrb	r2, [r7, #11]
 8001152:	4613      	mov	r3, r2
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	4413      	add	r3, r2
 8001158:	00da      	lsls	r2, r3, #3
 800115a:	4413      	add	r3, r2
 800115c:	68fa      	ldr	r2, [r7, #12]
 800115e:	4413      	add	r3, r2
 8001160:	7c9a      	ldrb	r2, [r3, #18]
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	705a      	strb	r2, [r3, #1]
  ledDriver0Buff[2] = cube[face][6].b;
 8001166:	7afa      	ldrb	r2, [r7, #11]
 8001168:	4613      	mov	r3, r2
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	4413      	add	r3, r2
 800116e:	00da      	lsls	r2, r3, #3
 8001170:	4413      	add	r3, r2
 8001172:	68fa      	ldr	r2, [r7, #12]
 8001174:	4413      	add	r3, r2
 8001176:	7d1a      	ldrb	r2, [r3, #20]
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	709a      	strb	r2, [r3, #2]
  ledDriver0Buff[3] = cube[face][6].g;
 800117c:	7afa      	ldrb	r2, [r7, #11]
 800117e:	4613      	mov	r3, r2
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	4413      	add	r3, r2
 8001184:	00da      	lsls	r2, r3, #3
 8001186:	4413      	add	r3, r2
 8001188:	68fa      	ldr	r2, [r7, #12]
 800118a:	4413      	add	r3, r2
 800118c:	7cda      	ldrb	r2, [r3, #19]
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	70da      	strb	r2, [r3, #3]

  ledDriver0Buff[4] = cube[face][4].r;
 8001192:	7afa      	ldrb	r2, [r7, #11]
 8001194:	4613      	mov	r3, r2
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	4413      	add	r3, r2
 800119a:	00da      	lsls	r2, r3, #3
 800119c:	4413      	add	r3, r2
 800119e:	68fa      	ldr	r2, [r7, #12]
 80011a0:	4413      	add	r3, r2
 80011a2:	7b1a      	ldrb	r2, [r3, #12]
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	711a      	strb	r2, [r3, #4]
  ledDriver0Buff[5] = cube[face][4].b;
 80011a8:	7afa      	ldrb	r2, [r7, #11]
 80011aa:	4613      	mov	r3, r2
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	4413      	add	r3, r2
 80011b0:	00da      	lsls	r2, r3, #3
 80011b2:	4413      	add	r3, r2
 80011b4:	68fa      	ldr	r2, [r7, #12]
 80011b6:	4413      	add	r3, r2
 80011b8:	7b9a      	ldrb	r2, [r3, #14]
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	715a      	strb	r2, [r3, #5]
  ledDriver0Buff[6] = cube[face][4].g;
 80011be:	7afa      	ldrb	r2, [r7, #11]
 80011c0:	4613      	mov	r3, r2
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	4413      	add	r3, r2
 80011c6:	00da      	lsls	r2, r3, #3
 80011c8:	4413      	add	r3, r2
 80011ca:	68fa      	ldr	r2, [r7, #12]
 80011cc:	4413      	add	r3, r2
 80011ce:	7b5a      	ldrb	r2, [r3, #13]
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	719a      	strb	r2, [r3, #6]

  ledDriver0Buff[7] = cube[face][1].r;
 80011d4:	7afa      	ldrb	r2, [r7, #11]
 80011d6:	4613      	mov	r3, r2
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	4413      	add	r3, r2
 80011dc:	00da      	lsls	r2, r3, #3
 80011de:	4413      	add	r3, r2
 80011e0:	68fa      	ldr	r2, [r7, #12]
 80011e2:	4413      	add	r3, r2
 80011e4:	78da      	ldrb	r2, [r3, #3]
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	71da      	strb	r2, [r3, #7]
  ledDriver0Buff[8] = cube[face][1].b;
 80011ea:	7afa      	ldrb	r2, [r7, #11]
 80011ec:	4613      	mov	r3, r2
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	4413      	add	r3, r2
 80011f2:	00da      	lsls	r2, r3, #3
 80011f4:	4413      	add	r3, r2
 80011f6:	68fa      	ldr	r2, [r7, #12]
 80011f8:	4413      	add	r3, r2
 80011fa:	795a      	ldrb	r2, [r3, #5]
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	721a      	strb	r2, [r3, #8]
  ledDriver0Buff[9] = cube[face][1].g;
 8001200:	7afa      	ldrb	r2, [r7, #11]
 8001202:	4613      	mov	r3, r2
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	4413      	add	r3, r2
 8001208:	00da      	lsls	r2, r3, #3
 800120a:	4413      	add	r3, r2
 800120c:	68fa      	ldr	r2, [r7, #12]
 800120e:	4413      	add	r3, r2
 8001210:	791a      	ldrb	r2, [r3, #4]
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	725a      	strb	r2, [r3, #9]

  ledDriver0Buff[10] = cube[face][3].r;
 8001216:	7afa      	ldrb	r2, [r7, #11]
 8001218:	4613      	mov	r3, r2
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	4413      	add	r3, r2
 800121e:	00da      	lsls	r2, r3, #3
 8001220:	4413      	add	r3, r2
 8001222:	68fa      	ldr	r2, [r7, #12]
 8001224:	4413      	add	r3, r2
 8001226:	7a5a      	ldrb	r2, [r3, #9]
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	729a      	strb	r2, [r3, #10]
  ledDriver0Buff[11] = cube[face][3].b;
 800122c:	7afa      	ldrb	r2, [r7, #11]
 800122e:	4613      	mov	r3, r2
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	4413      	add	r3, r2
 8001234:	00da      	lsls	r2, r3, #3
 8001236:	4413      	add	r3, r2
 8001238:	68fa      	ldr	r2, [r7, #12]
 800123a:	4413      	add	r3, r2
 800123c:	7ada      	ldrb	r2, [r3, #11]
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	72da      	strb	r2, [r3, #11]
  ledDriver0Buff[12] = cube[face][3].g;
 8001242:	7afa      	ldrb	r2, [r7, #11]
 8001244:	4613      	mov	r3, r2
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	4413      	add	r3, r2
 800124a:	00da      	lsls	r2, r3, #3
 800124c:	4413      	add	r3, r2
 800124e:	68fa      	ldr	r2, [r7, #12]
 8001250:	4413      	add	r3, r2
 8001252:	7a9a      	ldrb	r2, [r3, #10]
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	731a      	strb	r2, [r3, #12]

  ledDriver0Buff[13] = cube[face][0].r;
 8001258:	7afa      	ldrb	r2, [r7, #11]
 800125a:	4613      	mov	r3, r2
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	4413      	add	r3, r2
 8001260:	00da      	lsls	r2, r3, #3
 8001262:	4413      	add	r3, r2
 8001264:	68fa      	ldr	r2, [r7, #12]
 8001266:	4413      	add	r3, r2
 8001268:	781a      	ldrb	r2, [r3, #0]
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	735a      	strb	r2, [r3, #13]
  ledDriver0Buff[14] = cube[face][0].b;
 800126e:	7afa      	ldrb	r2, [r7, #11]
 8001270:	4613      	mov	r3, r2
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	4413      	add	r3, r2
 8001276:	00da      	lsls	r2, r3, #3
 8001278:	4413      	add	r3, r2
 800127a:	68fa      	ldr	r2, [r7, #12]
 800127c:	4413      	add	r3, r2
 800127e:	789a      	ldrb	r2, [r3, #2]
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	739a      	strb	r2, [r3, #14]
  ledDriver0Buff[15] = cube[face][0].g;
 8001284:	7afa      	ldrb	r2, [r7, #11]
 8001286:	4613      	mov	r3, r2
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	4413      	add	r3, r2
 800128c:	00da      	lsls	r2, r3, #3
 800128e:	4413      	add	r3, r2
 8001290:	68fa      	ldr	r2, [r7, #12]
 8001292:	4413      	add	r3, r2
 8001294:	785a      	ldrb	r2, [r3, #1]
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	73da      	strb	r2, [r3, #15]

  // Last output of the first driver is not connected.
  ledDriver0Buff[16] = 0x00;
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	2200      	movs	r2, #0
 800129e:	741a      	strb	r2, [r3, #16]

  // --------------------------------------------------------------------------
  // Build I2C message for the second LED driver
  // --------------------------------------------------------------------------
  ledDriver1Buff[0] = REG_PWM0 | AUTO_INC_OPT;
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	2288      	movs	r2, #136	; 0x88
 80012a4:	701a      	strb	r2, [r3, #0]

  ledDriver1Buff[1] = cube[face][2].r;
 80012a6:	7afa      	ldrb	r2, [r7, #11]
 80012a8:	4613      	mov	r3, r2
 80012aa:	005b      	lsls	r3, r3, #1
 80012ac:	4413      	add	r3, r2
 80012ae:	00da      	lsls	r2, r3, #3
 80012b0:	4413      	add	r3, r2
 80012b2:	68fa      	ldr	r2, [r7, #12]
 80012b4:	4413      	add	r3, r2
 80012b6:	799a      	ldrb	r2, [r3, #6]
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	705a      	strb	r2, [r3, #1]
  ledDriver1Buff[2] = cube[face][2].b;
 80012bc:	7afa      	ldrb	r2, [r7, #11]
 80012be:	4613      	mov	r3, r2
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	4413      	add	r3, r2
 80012c4:	00da      	lsls	r2, r3, #3
 80012c6:	4413      	add	r3, r2
 80012c8:	68fa      	ldr	r2, [r7, #12]
 80012ca:	4413      	add	r3, r2
 80012cc:	7a1a      	ldrb	r2, [r3, #8]
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	709a      	strb	r2, [r3, #2]
  ledDriver1Buff[3] = cube[face][2].g;
 80012d2:	7afa      	ldrb	r2, [r7, #11]
 80012d4:	4613      	mov	r3, r2
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	4413      	add	r3, r2
 80012da:	00da      	lsls	r2, r3, #3
 80012dc:	4413      	add	r3, r2
 80012de:	68fa      	ldr	r2, [r7, #12]
 80012e0:	4413      	add	r3, r2
 80012e2:	79da      	ldrb	r2, [r3, #7]
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	70da      	strb	r2, [r3, #3]

  ledDriver1Buff[4] = cube[face][7].r;
 80012e8:	7afa      	ldrb	r2, [r7, #11]
 80012ea:	4613      	mov	r3, r2
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	4413      	add	r3, r2
 80012f0:	00da      	lsls	r2, r3, #3
 80012f2:	4413      	add	r3, r2
 80012f4:	68fa      	ldr	r2, [r7, #12]
 80012f6:	4413      	add	r3, r2
 80012f8:	7d5a      	ldrb	r2, [r3, #21]
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	711a      	strb	r2, [r3, #4]
  ledDriver1Buff[5] = cube[face][7].b;
 80012fe:	7afa      	ldrb	r2, [r7, #11]
 8001300:	4613      	mov	r3, r2
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	4413      	add	r3, r2
 8001306:	00da      	lsls	r2, r3, #3
 8001308:	4413      	add	r3, r2
 800130a:	68fa      	ldr	r2, [r7, #12]
 800130c:	4413      	add	r3, r2
 800130e:	7dda      	ldrb	r2, [r3, #23]
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	715a      	strb	r2, [r3, #5]
  ledDriver1Buff[6] = cube[face][7].g;
 8001314:	7afa      	ldrb	r2, [r7, #11]
 8001316:	4613      	mov	r3, r2
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	4413      	add	r3, r2
 800131c:	00da      	lsls	r2, r3, #3
 800131e:	4413      	add	r3, r2
 8001320:	68fa      	ldr	r2, [r7, #12]
 8001322:	4413      	add	r3, r2
 8001324:	7d9a      	ldrb	r2, [r3, #22]
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	719a      	strb	r2, [r3, #6]

  ledDriver1Buff[7] = cube[face][5].r;
 800132a:	7afa      	ldrb	r2, [r7, #11]
 800132c:	4613      	mov	r3, r2
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	4413      	add	r3, r2
 8001332:	00da      	lsls	r2, r3, #3
 8001334:	4413      	add	r3, r2
 8001336:	68fa      	ldr	r2, [r7, #12]
 8001338:	4413      	add	r3, r2
 800133a:	7bda      	ldrb	r2, [r3, #15]
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	71da      	strb	r2, [r3, #7]
  ledDriver1Buff[8] = cube[face][5].b;
 8001340:	7afa      	ldrb	r2, [r7, #11]
 8001342:	4613      	mov	r3, r2
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	4413      	add	r3, r2
 8001348:	00da      	lsls	r2, r3, #3
 800134a:	4413      	add	r3, r2
 800134c:	68fa      	ldr	r2, [r7, #12]
 800134e:	4413      	add	r3, r2
 8001350:	7c5a      	ldrb	r2, [r3, #17]
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	721a      	strb	r2, [r3, #8]
  ledDriver1Buff[9] = cube[face][5].g;
 8001356:	7afa      	ldrb	r2, [r7, #11]
 8001358:	4613      	mov	r3, r2
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	4413      	add	r3, r2
 800135e:	00da      	lsls	r2, r3, #3
 8001360:	4413      	add	r3, r2
 8001362:	68fa      	ldr	r2, [r7, #12]
 8001364:	4413      	add	r3, r2
 8001366:	7c1a      	ldrb	r2, [r3, #16]
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	725a      	strb	r2, [r3, #9]

  ledDriver1Buff[10] = cube[face][8].r;
 800136c:	7afa      	ldrb	r2, [r7, #11]
 800136e:	4613      	mov	r3, r2
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	4413      	add	r3, r2
 8001374:	00da      	lsls	r2, r3, #3
 8001376:	4413      	add	r3, r2
 8001378:	68fa      	ldr	r2, [r7, #12]
 800137a:	4413      	add	r3, r2
 800137c:	7e1a      	ldrb	r2, [r3, #24]
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	729a      	strb	r2, [r3, #10]
  ledDriver1Buff[11] = cube[face][8].b;
 8001382:	7afa      	ldrb	r2, [r7, #11]
 8001384:	4613      	mov	r3, r2
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	4413      	add	r3, r2
 800138a:	00da      	lsls	r2, r3, #3
 800138c:	4413      	add	r3, r2
 800138e:	68fa      	ldr	r2, [r7, #12]
 8001390:	4413      	add	r3, r2
 8001392:	7e9a      	ldrb	r2, [r3, #26]
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	72da      	strb	r2, [r3, #11]
  ledDriver1Buff[12] = cube[face][8].g;
 8001398:	7afa      	ldrb	r2, [r7, #11]
 800139a:	4613      	mov	r3, r2
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	4413      	add	r3, r2
 80013a0:	00da      	lsls	r2, r3, #3
 80013a2:	4413      	add	r3, r2
 80013a4:	68fa      	ldr	r2, [r7, #12]
 80013a6:	4413      	add	r3, r2
 80013a8:	7e5a      	ldrb	r2, [r3, #25]
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	731a      	strb	r2, [r3, #12]

  // Last output of the second driver are not connected.
  ledDriver1Buff[13] = 0x00;
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	2200      	movs	r2, #0
 80013b2:	735a      	strb	r2, [r3, #13]
  ledDriver1Buff[14] = 0x00;
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	2200      	movs	r2, #0
 80013b8:	739a      	strb	r2, [r3, #14]
  ledDriver1Buff[15] = 0x00;
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	2200      	movs	r2, #0
 80013be:	73da      	strb	r2, [r3, #15]
  ledDriver1Buff[16] = 0x00;
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	2200      	movs	r2, #0
 80013c4:	741a      	strb	r2, [r3, #16]

  // Commit to I2C
  if (face == CUBE_FACE_F)
 80013c6:	7afb      	ldrb	r3, [r7, #11]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d115      	bne.n	80013f8 <ledUpdateFace+0x374>
  {
    HAL_I2C_Master_Transmit(&hi2c1, ADDR_LED_DRV_0, ledDriver0Buff, nBytes, HAL_MAX_DELAY);
 80013cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80013d0:	b29b      	uxth	r3, r3
 80013d2:	f04f 32ff 	mov.w	r2, #4294967295
 80013d6:	9200      	str	r2, [sp, #0]
 80013d8:	69fa      	ldr	r2, [r7, #28]
 80013da:	212a      	movs	r1, #42	; 0x2a
 80013dc:	4809      	ldr	r0, [pc, #36]	; (8001404 <ledUpdateFace+0x380>)
 80013de:	f000 ff19 	bl	8002214 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Transmit(&hi2c1, ADDR_LED_DRV_1, ledDriver1Buff, nBytes, HAL_MAX_DELAY);
 80013e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	f04f 32ff 	mov.w	r2, #4294967295
 80013ec:	9200      	str	r2, [sp, #0]
 80013ee:	697a      	ldr	r2, [r7, #20]
 80013f0:	2132      	movs	r1, #50	; 0x32
 80013f2:	4804      	ldr	r0, [pc, #16]	; (8001404 <ledUpdateFace+0x380>)
 80013f4:	f000 ff0e 	bl	8002214 <HAL_I2C_Master_Transmit>
 80013f8:	46b5      	mov	sp, r6
  }
}
 80013fa:	bf00      	nop
 80013fc:	372c      	adds	r7, #44	; 0x2c
 80013fe:	46bd      	mov	sp, r7
 8001400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001404:	20000028 	.word	0x20000028

08001408 <main>:

// ============================================================================
// Main code
// ============================================================================
int main(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b0ac      	sub	sp, #176	; 0xb0
 800140c:	af00      	add	r7, sp, #0

  // Array of RGB 6 faces x 9 LEDs representing the cube
  rgbLedType cube[6][9];
  
  uint8_t pb[6] = {0};
 800140e:	2300      	movs	r3, #0
 8001410:	607b      	str	r3, [r7, #4]
 8001412:	2300      	movs	r3, #0
 8001414:	813b      	strh	r3, [r7, #8]
  uint8_t state = 0;
 8001416:	2300      	movs	r3, #0
 8001418:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf


  // -----------------
  // MCU configuration
  // -----------------
  cpuInit();
 800141c:	f7ff f87e 	bl	800051c <cpuInit>

  // Read the board ID
  uint8_t boardID = getBoardID();
 8001420:	f7ff faae 	bl	8000980 <getBoardID>
 8001424:	4603      	mov	r3, r0
 8001426:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae

  // Initialise the LED driver
  HAL_Delay(1);
 800142a:	2001      	movs	r0, #1
 800142c:	f000 fb7e 	bl	8001b2c <HAL_Delay>
  ledInitDriver();
 8001430:	f7ff fd7c 	bl	8000f2c <ledInitDriver>
  
  // Init the colors of each face
  paintFace(cube[CUBE_FACE_F], ORANGE_LED);
 8001434:	4b8f      	ldr	r3, [pc, #572]	; (8001674 <main+0x26c>)
 8001436:	f107 000c 	add.w	r0, r7, #12
 800143a:	781a      	ldrb	r2, [r3, #0]
 800143c:	7859      	ldrb	r1, [r3, #1]
 800143e:	0209      	lsls	r1, r1, #8
 8001440:	430a      	orrs	r2, r1
 8001442:	789b      	ldrb	r3, [r3, #2]
 8001444:	041b      	lsls	r3, r3, #16
 8001446:	431a      	orrs	r2, r3
 8001448:	2300      	movs	r3, #0
 800144a:	f362 0317 	bfi	r3, r2, #0, #24
 800144e:	4619      	mov	r1, r3
 8001450:	f7ff fd3e 	bl	8000ed0 <paintFace>
  paintFace(cube[CUBE_FACE_B], RED_LED);
 8001454:	4b88      	ldr	r3, [pc, #544]	; (8001678 <main+0x270>)
 8001456:	f107 020c 	add.w	r2, r7, #12
 800145a:	f102 001b 	add.w	r0, r2, #27
 800145e:	781a      	ldrb	r2, [r3, #0]
 8001460:	7859      	ldrb	r1, [r3, #1]
 8001462:	0209      	lsls	r1, r1, #8
 8001464:	430a      	orrs	r2, r1
 8001466:	789b      	ldrb	r3, [r3, #2]
 8001468:	041b      	lsls	r3, r3, #16
 800146a:	431a      	orrs	r2, r3
 800146c:	2300      	movs	r3, #0
 800146e:	f362 0317 	bfi	r3, r2, #0, #24
 8001472:	4619      	mov	r1, r3
 8001474:	f7ff fd2c 	bl	8000ed0 <paintFace>
  paintFace(cube[CUBE_FACE_L], BLUE_LED);
 8001478:	4b80      	ldr	r3, [pc, #512]	; (800167c <main+0x274>)
 800147a:	f107 020c 	add.w	r2, r7, #12
 800147e:	f102 0036 	add.w	r0, r2, #54	; 0x36
 8001482:	781a      	ldrb	r2, [r3, #0]
 8001484:	7859      	ldrb	r1, [r3, #1]
 8001486:	0209      	lsls	r1, r1, #8
 8001488:	430a      	orrs	r2, r1
 800148a:	789b      	ldrb	r3, [r3, #2]
 800148c:	041b      	lsls	r3, r3, #16
 800148e:	431a      	orrs	r2, r3
 8001490:	2300      	movs	r3, #0
 8001492:	f362 0317 	bfi	r3, r2, #0, #24
 8001496:	4619      	mov	r1, r3
 8001498:	f7ff fd1a 	bl	8000ed0 <paintFace>
  paintFace(cube[CUBE_FACE_R], GREEN_LED);
 800149c:	4b78      	ldr	r3, [pc, #480]	; (8001680 <main+0x278>)
 800149e:	f107 020c 	add.w	r2, r7, #12
 80014a2:	f102 0051 	add.w	r0, r2, #81	; 0x51
 80014a6:	781a      	ldrb	r2, [r3, #0]
 80014a8:	7859      	ldrb	r1, [r3, #1]
 80014aa:	0209      	lsls	r1, r1, #8
 80014ac:	430a      	orrs	r2, r1
 80014ae:	789b      	ldrb	r3, [r3, #2]
 80014b0:	041b      	lsls	r3, r3, #16
 80014b2:	431a      	orrs	r2, r3
 80014b4:	2300      	movs	r3, #0
 80014b6:	f362 0317 	bfi	r3, r2, #0, #24
 80014ba:	4619      	mov	r1, r3
 80014bc:	f7ff fd08 	bl	8000ed0 <paintFace>
  paintFace(cube[CUBE_FACE_U], PINK_LED);
 80014c0:	4b70      	ldr	r3, [pc, #448]	; (8001684 <main+0x27c>)
 80014c2:	f107 020c 	add.w	r2, r7, #12
 80014c6:	f102 006c 	add.w	r0, r2, #108	; 0x6c
 80014ca:	781a      	ldrb	r2, [r3, #0]
 80014cc:	7859      	ldrb	r1, [r3, #1]
 80014ce:	0209      	lsls	r1, r1, #8
 80014d0:	430a      	orrs	r2, r1
 80014d2:	789b      	ldrb	r3, [r3, #2]
 80014d4:	041b      	lsls	r3, r3, #16
 80014d6:	431a      	orrs	r2, r3
 80014d8:	2300      	movs	r3, #0
 80014da:	f362 0317 	bfi	r3, r2, #0, #24
 80014de:	4619      	mov	r1, r3
 80014e0:	f7ff fcf6 	bl	8000ed0 <paintFace>
  paintFace(cube[CUBE_FACE_D], YELLOW_LED);
 80014e4:	4b68      	ldr	r3, [pc, #416]	; (8001688 <main+0x280>)
 80014e6:	f107 020c 	add.w	r2, r7, #12
 80014ea:	f102 0087 	add.w	r0, r2, #135	; 0x87
 80014ee:	781a      	ldrb	r2, [r3, #0]
 80014f0:	7859      	ldrb	r1, [r3, #1]
 80014f2:	0209      	lsls	r1, r1, #8
 80014f4:	430a      	orrs	r2, r1
 80014f6:	789b      	ldrb	r3, [r3, #2]
 80014f8:	041b      	lsls	r3, r3, #16
 80014fa:	431a      	orrs	r2, r3
 80014fc:	2300      	movs	r3, #0
 80014fe:	f362 0317 	bfi	r3, r2, #0, #24
 8001502:	4619      	mov	r1, r3
 8001504:	f7ff fce4 	bl	8000ed0 <paintFace>
  
  // Commit the changes to the LEDs
  ledUpdateFace(cube, CUBE_FACE_F);
 8001508:	f107 030c 	add.w	r3, r7, #12
 800150c:	2100      	movs	r1, #0
 800150e:	4618      	mov	r0, r3
 8001510:	f7ff fdb8 	bl	8001084 <ledUpdateFace>
  // ledUpdateFace(cube, CUBE_FACE_F);

  while (1)
  {

    if (timer2_expired)
 8001514:	4b5d      	ldr	r3, [pc, #372]	; (800168c <main+0x284>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	b2db      	uxtb	r3, r3
 800151a:	2b00      	cmp	r3, #0
 800151c:	d0fa      	beq.n	8001514 <main+0x10c>
    {
      timer2_expired = 0;
 800151e:	4b5b      	ldr	r3, [pc, #364]	; (800168c <main+0x284>)
 8001520:	2200      	movs	r2, #0
 8001522:	701a      	strb	r2, [r3, #0]

      if (state == 0)
 8001524:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8001528:	2b00      	cmp	r3, #0
 800152a:	d110      	bne.n	800154e <main+0x146>
      {
        move(cube, CUBE_FACE_D, ROTATE_90);
 800152c:	f107 030c 	add.w	r3, r7, #12
 8001530:	2201      	movs	r2, #1
 8001532:	2105      	movs	r1, #5
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff fa5b 	bl	80009f0 <move>
        ledUpdateFace(cube, CUBE_FACE_F);
 800153a:	f107 030c 	add.w	r3, r7, #12
 800153e:	2100      	movs	r1, #0
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff fd9f 	bl	8001084 <ledUpdateFace>
        state = 1;
 8001546:	2301      	movs	r3, #1
 8001548:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 800154c:	e04e      	b.n	80015ec <main+0x1e4>
      }
      else if (state == 1)
 800154e:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8001552:	2b01      	cmp	r3, #1
 8001554:	d110      	bne.n	8001578 <main+0x170>
      {
        move(cube, CUBE_FACE_R, ROTATE_90);
 8001556:	f107 030c 	add.w	r3, r7, #12
 800155a:	2201      	movs	r2, #1
 800155c:	2103      	movs	r1, #3
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff fa46 	bl	80009f0 <move>
        ledUpdateFace(cube, CUBE_FACE_F);
 8001564:	f107 030c 	add.w	r3, r7, #12
 8001568:	2100      	movs	r1, #0
 800156a:	4618      	mov	r0, r3
 800156c:	f7ff fd8a 	bl	8001084 <ledUpdateFace>
        state = 2;
 8001570:	2302      	movs	r3, #2
 8001572:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 8001576:	e039      	b.n	80015ec <main+0x1e4>
      }
      else if (state == 2)
 8001578:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800157c:	2b02      	cmp	r3, #2
 800157e:	d110      	bne.n	80015a2 <main+0x19a>
      {
        move(cube, CUBE_FACE_U, ROTATE_90);      
 8001580:	f107 030c 	add.w	r3, r7, #12
 8001584:	2201      	movs	r2, #1
 8001586:	2104      	movs	r1, #4
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff fa31 	bl	80009f0 <move>
        ledUpdateFace(cube, CUBE_FACE_F);
 800158e:	f107 030c 	add.w	r3, r7, #12
 8001592:	2100      	movs	r1, #0
 8001594:	4618      	mov	r0, r3
 8001596:	f7ff fd75 	bl	8001084 <ledUpdateFace>
        state = 3;
 800159a:	2303      	movs	r3, #3
 800159c:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 80015a0:	e024      	b.n	80015ec <main+0x1e4>
      }
      else if (state == 3)
 80015a2:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80015a6:	2b03      	cmp	r3, #3
 80015a8:	d110      	bne.n	80015cc <main+0x1c4>
      {
        move(cube, CUBE_FACE_L, ROTATE_90);
 80015aa:	f107 030c 	add.w	r3, r7, #12
 80015ae:	2201      	movs	r2, #1
 80015b0:	2102      	movs	r1, #2
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7ff fa1c 	bl	80009f0 <move>
        ledUpdateFace(cube, CUBE_FACE_F);
 80015b8:	f107 030c 	add.w	r3, r7, #12
 80015bc:	2100      	movs	r1, #0
 80015be:	4618      	mov	r0, r3
 80015c0:	f7ff fd60 	bl	8001084 <ledUpdateFace>
        state = 4;
 80015c4:	2304      	movs	r3, #4
 80015c6:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 80015ca:	e00f      	b.n	80015ec <main+0x1e4>
      }
      else
      {
        move(cube, CUBE_FACE_F, ROTATE_90);
 80015cc:	f107 030c 	add.w	r3, r7, #12
 80015d0:	2201      	movs	r2, #1
 80015d2:	2100      	movs	r1, #0
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff fa0b 	bl	80009f0 <move>
        ledUpdateFace(cube, CUBE_FACE_F);
 80015da:	f107 030c 	add.w	r3, r7, #12
 80015de:	2100      	movs	r1, #0
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff fd4f 	bl	8001084 <ledUpdateFace>
        state = 0;
 80015e6:	2300      	movs	r3, #0
 80015e8:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
      }

      // Probe the push button arrays (one hot coding)
      pb[CUBE_FACE_F] = 0U;
 80015ec:	2300      	movs	r3, #0
 80015ee:	713b      	strb	r3, [r7, #4]
      pb[CUBE_FACE_F] |= (HAL_GPIO_ReadPin(PB_left_GPIO_Port, PB_left_Pin)    == 0 ? PB_L_MASK : 0x00);
 80015f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015f8:	f000 fd4c 	bl	8002094 <HAL_GPIO_ReadPin>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d101      	bne.n	8001606 <main+0x1fe>
 8001602:	2301      	movs	r3, #1
 8001604:	e000      	b.n	8001608 <main+0x200>
 8001606:	2300      	movs	r3, #0
 8001608:	793a      	ldrb	r2, [r7, #4]
 800160a:	b2db      	uxtb	r3, r3
 800160c:	4313      	orrs	r3, r2
 800160e:	b2db      	uxtb	r3, r3
 8001610:	713b      	strb	r3, [r7, #4]
      pb[CUBE_FACE_F] |= (HAL_GPIO_ReadPin(PB_right_GPIO_Port, PB_right_Pin)  == 0 ? PB_R_MASK : 0x00);
 8001612:	2120      	movs	r1, #32
 8001614:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001618:	f000 fd3c 	bl	8002094 <HAL_GPIO_ReadPin>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d101      	bne.n	8001626 <main+0x21e>
 8001622:	2302      	movs	r3, #2
 8001624:	e000      	b.n	8001628 <main+0x220>
 8001626:	2300      	movs	r3, #0
 8001628:	793a      	ldrb	r2, [r7, #4]
 800162a:	b2db      	uxtb	r3, r3
 800162c:	4313      	orrs	r3, r2
 800162e:	b2db      	uxtb	r3, r3
 8001630:	713b      	strb	r3, [r7, #4]
      pb[CUBE_FACE_F] |= (HAL_GPIO_ReadPin(PB_up_GPIO_Port, PB_up_Pin)        == 0 ? PB_U_MASK : 0x00);
 8001632:	2110      	movs	r1, #16
 8001634:	4816      	ldr	r0, [pc, #88]	; (8001690 <main+0x288>)
 8001636:	f000 fd2d 	bl	8002094 <HAL_GPIO_ReadPin>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d101      	bne.n	8001644 <main+0x23c>
 8001640:	2304      	movs	r3, #4
 8001642:	e000      	b.n	8001646 <main+0x23e>
 8001644:	2300      	movs	r3, #0
 8001646:	793a      	ldrb	r2, [r7, #4]
 8001648:	b2db      	uxtb	r3, r3
 800164a:	4313      	orrs	r3, r2
 800164c:	b2db      	uxtb	r3, r3
 800164e:	713b      	strb	r3, [r7, #4]
      pb[CUBE_FACE_F] |= (HAL_GPIO_ReadPin(PB_down_GPIO_Port, PB_down_Pin)    == 0 ? PB_D_MASK : 0x00);
 8001650:	2180      	movs	r1, #128	; 0x80
 8001652:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001656:	f000 fd1d 	bl	8002094 <HAL_GPIO_ReadPin>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d101      	bne.n	8001664 <main+0x25c>
 8001660:	2308      	movs	r3, #8
 8001662:	e000      	b.n	8001666 <main+0x25e>
 8001664:	2300      	movs	r3, #0
 8001666:	793a      	ldrb	r2, [r7, #4]
 8001668:	b2db      	uxtb	r3, r3
 800166a:	4313      	orrs	r3, r2
 800166c:	b2db      	uxtb	r3, r3
 800166e:	713b      	strb	r3, [r7, #4]
    if (timer2_expired)
 8001670:	e750      	b.n	8001514 <main+0x10c>
 8001672:	bf00      	nop
 8001674:	08004fb0 	.word	0x08004fb0
 8001678:	08004fa0 	.word	0x08004fa0
 800167c:	08004fa8 	.word	0x08004fa8
 8001680:	08004fa4 	.word	0x08004fa4
 8001684:	08004fb4 	.word	0x08004fb4
 8001688:	08004fac 	.word	0x08004fac
 800168c:	2000019c 	.word	0x2000019c
 8001690:	48000400 	.word	0x48000400

08001694 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800169a:	4b0f      	ldr	r3, [pc, #60]	; (80016d8 <HAL_MspInit+0x44>)
 800169c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800169e:	4a0e      	ldr	r2, [pc, #56]	; (80016d8 <HAL_MspInit+0x44>)
 80016a0:	f043 0301 	orr.w	r3, r3, #1
 80016a4:	6613      	str	r3, [r2, #96]	; 0x60
 80016a6:	4b0c      	ldr	r3, [pc, #48]	; (80016d8 <HAL_MspInit+0x44>)
 80016a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	607b      	str	r3, [r7, #4]
 80016b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016b2:	4b09      	ldr	r3, [pc, #36]	; (80016d8 <HAL_MspInit+0x44>)
 80016b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016b6:	4a08      	ldr	r2, [pc, #32]	; (80016d8 <HAL_MspInit+0x44>)
 80016b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016bc:	6593      	str	r3, [r2, #88]	; 0x58
 80016be:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <HAL_MspInit+0x44>)
 80016c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c6:	603b      	str	r3, [r7, #0]
 80016c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80016ca:	f001 f9d1 	bl	8002a70 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ce:	bf00      	nop
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	40021000 	.word	0x40021000

080016dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b08e      	sub	sp, #56	; 0x38
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	605a      	str	r2, [r3, #4]
 80016ee:	609a      	str	r2, [r3, #8]
 80016f0:	60da      	str	r2, [r3, #12]
 80016f2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a4f      	ldr	r2, [pc, #316]	; (8001838 <HAL_I2C_MspInit+0x15c>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d14c      	bne.n	8001798 <HAL_I2C_MspInit+0xbc>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016fe:	4b4f      	ldr	r3, [pc, #316]	; (800183c <HAL_I2C_MspInit+0x160>)
 8001700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001702:	4a4e      	ldr	r2, [pc, #312]	; (800183c <HAL_I2C_MspInit+0x160>)
 8001704:	f043 0301 	orr.w	r3, r3, #1
 8001708:	64d3      	str	r3, [r2, #76]	; 0x4c
 800170a:	4b4c      	ldr	r3, [pc, #304]	; (800183c <HAL_I2C_MspInit+0x160>)
 800170c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800170e:	f003 0301 	and.w	r3, r3, #1
 8001712:	623b      	str	r3, [r7, #32]
 8001714:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001716:	4b49      	ldr	r3, [pc, #292]	; (800183c <HAL_I2C_MspInit+0x160>)
 8001718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800171a:	4a48      	ldr	r2, [pc, #288]	; (800183c <HAL_I2C_MspInit+0x160>)
 800171c:	f043 0302 	orr.w	r3, r3, #2
 8001720:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001722:	4b46      	ldr	r3, [pc, #280]	; (800183c <HAL_I2C_MspInit+0x160>)
 8001724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001726:	f003 0302 	and.w	r3, r3, #2
 800172a:	61fb      	str	r3, [r7, #28]
 800172c:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_LED_DRV_SCL_Pin;
 800172e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001732:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001734:	2312      	movs	r3, #18
 8001736:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001738:	2300      	movs	r3, #0
 800173a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173c:	2300      	movs	r3, #0
 800173e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001740:	2304      	movs	r3, #4
 8001742:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2C1_LED_DRV_SCL_GPIO_Port, &GPIO_InitStruct);
 8001744:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001748:	4619      	mov	r1, r3
 800174a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800174e:	f000 fb1f 	bl	8001d90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C1_LED_DRV_SDA_Pin;
 8001752:	2380      	movs	r3, #128	; 0x80
 8001754:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001756:	2312      	movs	r3, #18
 8001758:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175a:	2300      	movs	r3, #0
 800175c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175e:	2300      	movs	r3, #0
 8001760:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001762:	2304      	movs	r3, #4
 8001764:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2C1_LED_DRV_SDA_GPIO_Port, &GPIO_InitStruct);
 8001766:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800176a:	4619      	mov	r1, r3
 800176c:	4834      	ldr	r0, [pc, #208]	; (8001840 <HAL_I2C_MspInit+0x164>)
 800176e:	f000 fb0f 	bl	8001d90 <HAL_GPIO_Init>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB7);
 8001772:	4b34      	ldr	r3, [pc, #208]	; (8001844 <HAL_I2C_MspInit+0x168>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	4a33      	ldr	r2, [pc, #204]	; (8001844 <HAL_I2C_MspInit+0x168>)
 8001778:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800177c:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800177e:	4b2f      	ldr	r3, [pc, #188]	; (800183c <HAL_I2C_MspInit+0x160>)
 8001780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001782:	4a2e      	ldr	r2, [pc, #184]	; (800183c <HAL_I2C_MspInit+0x160>)
 8001784:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001788:	6593      	str	r3, [r2, #88]	; 0x58
 800178a:	4b2c      	ldr	r3, [pc, #176]	; (800183c <HAL_I2C_MspInit+0x160>)
 800178c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800178e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001792:	61bb      	str	r3, [r7, #24]
 8001794:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001796:	e04a      	b.n	800182e <HAL_I2C_MspInit+0x152>
  else if(hi2c->Instance==I2C2)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a2a      	ldr	r2, [pc, #168]	; (8001848 <HAL_I2C_MspInit+0x16c>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d145      	bne.n	800182e <HAL_I2C_MspInit+0x152>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80017a2:	4b26      	ldr	r3, [pc, #152]	; (800183c <HAL_I2C_MspInit+0x160>)
 80017a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017a6:	4a25      	ldr	r2, [pc, #148]	; (800183c <HAL_I2C_MspInit+0x160>)
 80017a8:	f043 0320 	orr.w	r3, r3, #32
 80017ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017ae:	4b23      	ldr	r3, [pc, #140]	; (800183c <HAL_I2C_MspInit+0x160>)
 80017b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b2:	f003 0320 	and.w	r3, r3, #32
 80017b6:	617b      	str	r3, [r7, #20]
 80017b8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ba:	4b20      	ldr	r3, [pc, #128]	; (800183c <HAL_I2C_MspInit+0x160>)
 80017bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017be:	4a1f      	ldr	r2, [pc, #124]	; (800183c <HAL_I2C_MspInit+0x160>)
 80017c0:	f043 0301 	orr.w	r3, r3, #1
 80017c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017c6:	4b1d      	ldr	r3, [pc, #116]	; (800183c <HAL_I2C_MspInit+0x160>)
 80017c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	613b      	str	r3, [r7, #16]
 80017d0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C2_COMM_SDA_Pin;
 80017d2:	2301      	movs	r3, #1
 80017d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017d6:	2312      	movs	r3, #18
 80017d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017da:	2301      	movs	r3, #1
 80017dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017de:	2300      	movs	r3, #0
 80017e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80017e2:	2304      	movs	r3, #4
 80017e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2C2_COMM_SDA_GPIO_Port, &GPIO_InitStruct);
 80017e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ea:	4619      	mov	r1, r3
 80017ec:	4817      	ldr	r0, [pc, #92]	; (800184c <HAL_I2C_MspInit+0x170>)
 80017ee:	f000 facf 	bl	8001d90 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2C2_COMM_SCL_Pin;
 80017f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017f8:	2312      	movs	r3, #18
 80017fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017fc:	2301      	movs	r3, #1
 80017fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001800:	2300      	movs	r3, #0
 8001802:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001804:	2304      	movs	r3, #4
 8001806:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2C2_COMM_SCL_GPIO_Port, &GPIO_InitStruct);
 8001808:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800180c:	4619      	mov	r1, r3
 800180e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001812:	f000 fabd 	bl	8001d90 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001816:	4b09      	ldr	r3, [pc, #36]	; (800183c <HAL_I2C_MspInit+0x160>)
 8001818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800181a:	4a08      	ldr	r2, [pc, #32]	; (800183c <HAL_I2C_MspInit+0x160>)
 800181c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001820:	6593      	str	r3, [r2, #88]	; 0x58
 8001822:	4b06      	ldr	r3, [pc, #24]	; (800183c <HAL_I2C_MspInit+0x160>)
 8001824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001826:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	68fb      	ldr	r3, [r7, #12]
}
 800182e:	bf00      	nop
 8001830:	3738      	adds	r7, #56	; 0x38
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	40005400 	.word	0x40005400
 800183c:	40021000 	.word	0x40021000
 8001840:	48000400 	.word	0x48000400
 8001844:	40010000 	.word	0x40010000
 8001848:	40005800 	.word	0x40005800
 800184c:	48001400 	.word	0x48001400

08001850 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001860:	d113      	bne.n	800188a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001862:	4b0c      	ldr	r3, [pc, #48]	; (8001894 <HAL_TIM_Base_MspInit+0x44>)
 8001864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001866:	4a0b      	ldr	r2, [pc, #44]	; (8001894 <HAL_TIM_Base_MspInit+0x44>)
 8001868:	f043 0301 	orr.w	r3, r3, #1
 800186c:	6593      	str	r3, [r2, #88]	; 0x58
 800186e:	4b09      	ldr	r3, [pc, #36]	; (8001894 <HAL_TIM_Base_MspInit+0x44>)
 8001870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	60fb      	str	r3, [r7, #12]
 8001878:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800187a:	2200      	movs	r2, #0
 800187c:	2100      	movs	r1, #0
 800187e:	201c      	movs	r0, #28
 8001880:	f000 fa51 	bl	8001d26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001884:	201c      	movs	r0, #28
 8001886:	f000 fa68 	bl	8001d5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800188a:	bf00      	nop
 800188c:	3710      	adds	r7, #16
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	40021000 	.word	0x40021000

08001898 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b08a      	sub	sp, #40	; 0x28
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a0:	f107 0314 	add.w	r3, r7, #20
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	605a      	str	r2, [r3, #4]
 80018aa:	609a      	str	r2, [r3, #8]
 80018ac:	60da      	str	r2, [r3, #12]
 80018ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a26      	ldr	r2, [pc, #152]	; (8001950 <HAL_UART_MspInit+0xb8>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d145      	bne.n	8001946 <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018ba:	4b26      	ldr	r3, [pc, #152]	; (8001954 <HAL_UART_MspInit+0xbc>)
 80018bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018be:	4a25      	ldr	r2, [pc, #148]	; (8001954 <HAL_UART_MspInit+0xbc>)
 80018c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018c4:	6613      	str	r3, [r2, #96]	; 0x60
 80018c6:	4b23      	ldr	r3, [pc, #140]	; (8001954 <HAL_UART_MspInit+0xbc>)
 80018c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018ce:	613b      	str	r3, [r7, #16]
 80018d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d2:	4b20      	ldr	r3, [pc, #128]	; (8001954 <HAL_UART_MspInit+0xbc>)
 80018d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d6:	4a1f      	ldr	r2, [pc, #124]	; (8001954 <HAL_UART_MspInit+0xbc>)
 80018d8:	f043 0301 	orr.w	r3, r3, #1
 80018dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018de:	4b1d      	ldr	r3, [pc, #116]	; (8001954 <HAL_UART_MspInit+0xbc>)
 80018e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	60fb      	str	r3, [r7, #12]
 80018e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ea:	4b1a      	ldr	r3, [pc, #104]	; (8001954 <HAL_UART_MspInit+0xbc>)
 80018ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ee:	4a19      	ldr	r2, [pc, #100]	; (8001954 <HAL_UART_MspInit+0xbc>)
 80018f0:	f043 0302 	orr.w	r3, r3, #2
 80018f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018f6:	4b17      	ldr	r3, [pc, #92]	; (8001954 <HAL_UART_MspInit+0xbc>)
 80018f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018fa:	f003 0302 	and.w	r3, r3, #2
 80018fe:	60bb      	str	r3, [r7, #8]
 8001900:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001902:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001906:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001908:	2302      	movs	r3, #2
 800190a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190c:	2300      	movs	r3, #0
 800190e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001910:	2300      	movs	r3, #0
 8001912:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001914:	2307      	movs	r3, #7
 8001916:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001918:	f107 0314 	add.w	r3, r7, #20
 800191c:	4619      	mov	r1, r3
 800191e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001922:	f000 fa35 	bl	8001d90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001926:	2340      	movs	r3, #64	; 0x40
 8001928:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192a:	2302      	movs	r3, #2
 800192c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192e:	2300      	movs	r3, #0
 8001930:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001932:	2300      	movs	r3, #0
 8001934:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001936:	2307      	movs	r3, #7
 8001938:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800193a:	f107 0314 	add.w	r3, r7, #20
 800193e:	4619      	mov	r1, r3
 8001940:	4805      	ldr	r0, [pc, #20]	; (8001958 <HAL_UART_MspInit+0xc0>)
 8001942:	f000 fa25 	bl	8001d90 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001946:	bf00      	nop
 8001948:	3728      	adds	r7, #40	; 0x28
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	40013800 	.word	0x40013800
 8001954:	40021000 	.word	0x40021000
 8001958:	48000400 	.word	0x48000400

0800195c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001960:	bf00      	nop
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr

0800196a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800196a:	b480      	push	{r7}
 800196c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800196e:	e7fe      	b.n	800196e <HardFault_Handler+0x4>

08001970 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001974:	e7fe      	b.n	8001974 <MemManage_Handler+0x4>

08001976 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001976:	b480      	push	{r7}
 8001978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800197a:	e7fe      	b.n	800197a <BusFault_Handler+0x4>

0800197c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001980:	e7fe      	b.n	8001980 <UsageFault_Handler+0x4>

08001982 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001982:	b480      	push	{r7}
 8001984:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001986:	bf00      	nop
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001994:	bf00      	nop
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr

0800199e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800199e:	b480      	push	{r7}
 80019a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019a2:	bf00      	nop
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019b0:	f000 f89e 	bl	8001af0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019b4:	bf00      	nop
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019bc:	4802      	ldr	r0, [pc, #8]	; (80019c8 <TIM2_IRQHandler+0x10>)
 80019be:	f002 f84d 	bl	8003a5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80019c2:	bf00      	nop
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	200000c0 	.word	0x200000c0

080019cc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80019d0:	4b08      	ldr	r3, [pc, #32]	; (80019f4 <SystemInit+0x28>)
 80019d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019d6:	4a07      	ldr	r2, [pc, #28]	; (80019f4 <SystemInit+0x28>)
 80019d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80019e0:	4b04      	ldr	r3, [pc, #16]	; (80019f4 <SystemInit+0x28>)
 80019e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019e6:	609a      	str	r2, [r3, #8]
#endif
}
 80019e8:	bf00      	nop
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	e000ed00 	.word	0xe000ed00

080019f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80019f8:	480d      	ldr	r0, [pc, #52]	; (8001a30 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80019fa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019fc:	480d      	ldr	r0, [pc, #52]	; (8001a34 <LoopForever+0x6>)
  ldr r1, =_edata
 80019fe:	490e      	ldr	r1, [pc, #56]	; (8001a38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a00:	4a0e      	ldr	r2, [pc, #56]	; (8001a3c <LoopForever+0xe>)
  movs r3, #0
 8001a02:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001a04:	e002      	b.n	8001a0c <LoopCopyDataInit>

08001a06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a0a:	3304      	adds	r3, #4

08001a0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a10:	d3f9      	bcc.n	8001a06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a12:	4a0b      	ldr	r2, [pc, #44]	; (8001a40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a14:	4c0b      	ldr	r4, [pc, #44]	; (8001a44 <LoopForever+0x16>)
  movs r3, #0
 8001a16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a18:	e001      	b.n	8001a1e <LoopFillZerobss>

08001a1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a1c:	3204      	adds	r2, #4

08001a1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a20:	d3fb      	bcc.n	8001a1a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a22:	f7ff ffd3 	bl	80019cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a26:	f003 fa83 	bl	8004f30 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a2a:	f7ff fced 	bl	8001408 <main>

08001a2e <LoopForever>:

LoopForever:
    b LoopForever
 8001a2e:	e7fe      	b.n	8001a2e <LoopForever>
  ldr   r0, =_estack
 8001a30:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001a34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a38:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001a3c:	08005008 	.word	0x08005008
  ldr r2, =_sbss
 8001a40:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001a44:	200001a4 	.word	0x200001a4

08001a48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a48:	e7fe      	b.n	8001a48 <ADC1_2_IRQHandler>

08001a4a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b082      	sub	sp, #8
 8001a4e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a50:	2300      	movs	r3, #0
 8001a52:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a54:	2003      	movs	r0, #3
 8001a56:	f000 f95b 	bl	8001d10 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a5a:	2000      	movs	r0, #0
 8001a5c:	f000 f80e 	bl	8001a7c <HAL_InitTick>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d002      	beq.n	8001a6c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	71fb      	strb	r3, [r7, #7]
 8001a6a:	e001      	b.n	8001a70 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a6c:	f7ff fe12 	bl	8001694 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a70:	79fb      	ldrb	r3, [r7, #7]

}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
	...

08001a7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a84:	2300      	movs	r3, #0
 8001a86:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001a88:	4b16      	ldr	r3, [pc, #88]	; (8001ae4 <HAL_InitTick+0x68>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d022      	beq.n	8001ad6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001a90:	4b15      	ldr	r3, [pc, #84]	; (8001ae8 <HAL_InitTick+0x6c>)
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	4b13      	ldr	r3, [pc, #76]	; (8001ae4 <HAL_InitTick+0x68>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001a9c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f000 f966 	bl	8001d76 <HAL_SYSTICK_Config>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d10f      	bne.n	8001ad0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2b0f      	cmp	r3, #15
 8001ab4:	d809      	bhi.n	8001aca <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	6879      	ldr	r1, [r7, #4]
 8001aba:	f04f 30ff 	mov.w	r0, #4294967295
 8001abe:	f000 f932 	bl	8001d26 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ac2:	4a0a      	ldr	r2, [pc, #40]	; (8001aec <HAL_InitTick+0x70>)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6013      	str	r3, [r2, #0]
 8001ac8:	e007      	b.n	8001ada <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	73fb      	strb	r3, [r7, #15]
 8001ace:	e004      	b.n	8001ada <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	73fb      	strb	r3, [r7, #15]
 8001ad4:	e001      	b.n	8001ada <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ada:	7bfb      	ldrb	r3, [r7, #15]
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3710      	adds	r7, #16
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	20000008 	.word	0x20000008
 8001ae8:	20000000 	.word	0x20000000
 8001aec:	20000004 	.word	0x20000004

08001af0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001af4:	4b05      	ldr	r3, [pc, #20]	; (8001b0c <HAL_IncTick+0x1c>)
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	4b05      	ldr	r3, [pc, #20]	; (8001b10 <HAL_IncTick+0x20>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4413      	add	r3, r2
 8001afe:	4a03      	ldr	r2, [pc, #12]	; (8001b0c <HAL_IncTick+0x1c>)
 8001b00:	6013      	str	r3, [r2, #0]
}
 8001b02:	bf00      	nop
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr
 8001b0c:	200001a0 	.word	0x200001a0
 8001b10:	20000008 	.word	0x20000008

08001b14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  return uwTick;
 8001b18:	4b03      	ldr	r3, [pc, #12]	; (8001b28 <HAL_GetTick+0x14>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	200001a0 	.word	0x200001a0

08001b2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b34:	f7ff ffee 	bl	8001b14 <HAL_GetTick>
 8001b38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b44:	d004      	beq.n	8001b50 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b46:	4b09      	ldr	r3, [pc, #36]	; (8001b6c <HAL_Delay+0x40>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	68fa      	ldr	r2, [r7, #12]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b50:	bf00      	nop
 8001b52:	f7ff ffdf 	bl	8001b14 <HAL_GetTick>
 8001b56:	4602      	mov	r2, r0
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	68fa      	ldr	r2, [r7, #12]
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d8f7      	bhi.n	8001b52 <HAL_Delay+0x26>
  {
  }
}
 8001b62:	bf00      	nop
 8001b64:	bf00      	nop
 8001b66:	3710      	adds	r7, #16
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	20000008 	.word	0x20000008

08001b70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b085      	sub	sp, #20
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f003 0307 	and.w	r3, r3, #7
 8001b7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b80:	4b0c      	ldr	r3, [pc, #48]	; (8001bb4 <__NVIC_SetPriorityGrouping+0x44>)
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b86:	68ba      	ldr	r2, [r7, #8]
 8001b88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ba0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ba2:	4a04      	ldr	r2, [pc, #16]	; (8001bb4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	60d3      	str	r3, [r2, #12]
}
 8001ba8:	bf00      	nop
 8001baa:	3714      	adds	r7, #20
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr
 8001bb4:	e000ed00 	.word	0xe000ed00

08001bb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bbc:	4b04      	ldr	r3, [pc, #16]	; (8001bd0 <__NVIC_GetPriorityGrouping+0x18>)
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	0a1b      	lsrs	r3, r3, #8
 8001bc2:	f003 0307 	and.w	r3, r3, #7
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr
 8001bd0:	e000ed00 	.word	0xe000ed00

08001bd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	4603      	mov	r3, r0
 8001bdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	db0b      	blt.n	8001bfe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001be6:	79fb      	ldrb	r3, [r7, #7]
 8001be8:	f003 021f 	and.w	r2, r3, #31
 8001bec:	4907      	ldr	r1, [pc, #28]	; (8001c0c <__NVIC_EnableIRQ+0x38>)
 8001bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf2:	095b      	lsrs	r3, r3, #5
 8001bf4:	2001      	movs	r0, #1
 8001bf6:	fa00 f202 	lsl.w	r2, r0, r2
 8001bfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001bfe:	bf00      	nop
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	e000e100 	.word	0xe000e100

08001c10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	4603      	mov	r3, r0
 8001c18:	6039      	str	r1, [r7, #0]
 8001c1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	db0a      	blt.n	8001c3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	b2da      	uxtb	r2, r3
 8001c28:	490c      	ldr	r1, [pc, #48]	; (8001c5c <__NVIC_SetPriority+0x4c>)
 8001c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2e:	0112      	lsls	r2, r2, #4
 8001c30:	b2d2      	uxtb	r2, r2
 8001c32:	440b      	add	r3, r1
 8001c34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c38:	e00a      	b.n	8001c50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	b2da      	uxtb	r2, r3
 8001c3e:	4908      	ldr	r1, [pc, #32]	; (8001c60 <__NVIC_SetPriority+0x50>)
 8001c40:	79fb      	ldrb	r3, [r7, #7]
 8001c42:	f003 030f 	and.w	r3, r3, #15
 8001c46:	3b04      	subs	r3, #4
 8001c48:	0112      	lsls	r2, r2, #4
 8001c4a:	b2d2      	uxtb	r2, r2
 8001c4c:	440b      	add	r3, r1
 8001c4e:	761a      	strb	r2, [r3, #24]
}
 8001c50:	bf00      	nop
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr
 8001c5c:	e000e100 	.word	0xe000e100
 8001c60:	e000ed00 	.word	0xe000ed00

08001c64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b089      	sub	sp, #36	; 0x24
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	60f8      	str	r0, [r7, #12]
 8001c6c:	60b9      	str	r1, [r7, #8]
 8001c6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f003 0307 	and.w	r3, r3, #7
 8001c76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	f1c3 0307 	rsb	r3, r3, #7
 8001c7e:	2b04      	cmp	r3, #4
 8001c80:	bf28      	it	cs
 8001c82:	2304      	movcs	r3, #4
 8001c84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	3304      	adds	r3, #4
 8001c8a:	2b06      	cmp	r3, #6
 8001c8c:	d902      	bls.n	8001c94 <NVIC_EncodePriority+0x30>
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	3b03      	subs	r3, #3
 8001c92:	e000      	b.n	8001c96 <NVIC_EncodePriority+0x32>
 8001c94:	2300      	movs	r3, #0
 8001c96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c98:	f04f 32ff 	mov.w	r2, #4294967295
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	43da      	mvns	r2, r3
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	401a      	ands	r2, r3
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cac:	f04f 31ff 	mov.w	r1, #4294967295
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb6:	43d9      	mvns	r1, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cbc:	4313      	orrs	r3, r2
         );
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3724      	adds	r7, #36	; 0x24
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
	...

08001ccc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	3b01      	subs	r3, #1
 8001cd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cdc:	d301      	bcc.n	8001ce2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e00f      	b.n	8001d02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ce2:	4a0a      	ldr	r2, [pc, #40]	; (8001d0c <SysTick_Config+0x40>)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	3b01      	subs	r3, #1
 8001ce8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cea:	210f      	movs	r1, #15
 8001cec:	f04f 30ff 	mov.w	r0, #4294967295
 8001cf0:	f7ff ff8e 	bl	8001c10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cf4:	4b05      	ldr	r3, [pc, #20]	; (8001d0c <SysTick_Config+0x40>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cfa:	4b04      	ldr	r3, [pc, #16]	; (8001d0c <SysTick_Config+0x40>)
 8001cfc:	2207      	movs	r2, #7
 8001cfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	e000e010 	.word	0xe000e010

08001d10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f7ff ff29 	bl	8001b70 <__NVIC_SetPriorityGrouping>
}
 8001d1e:	bf00      	nop
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b086      	sub	sp, #24
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	60b9      	str	r1, [r7, #8]
 8001d30:	607a      	str	r2, [r7, #4]
 8001d32:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d34:	f7ff ff40 	bl	8001bb8 <__NVIC_GetPriorityGrouping>
 8001d38:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	68b9      	ldr	r1, [r7, #8]
 8001d3e:	6978      	ldr	r0, [r7, #20]
 8001d40:	f7ff ff90 	bl	8001c64 <NVIC_EncodePriority>
 8001d44:	4602      	mov	r2, r0
 8001d46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d4a:	4611      	mov	r1, r2
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff ff5f 	bl	8001c10 <__NVIC_SetPriority>
}
 8001d52:	bf00      	nop
 8001d54:	3718      	adds	r7, #24
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b082      	sub	sp, #8
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	4603      	mov	r3, r0
 8001d62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7ff ff33 	bl	8001bd4 <__NVIC_EnableIRQ>
}
 8001d6e:	bf00      	nop
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b082      	sub	sp, #8
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f7ff ffa4 	bl	8001ccc <SysTick_Config>
 8001d84:	4603      	mov	r3, r0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
	...

08001d90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b087      	sub	sp, #28
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001d9e:	e15a      	b.n	8002056 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	2101      	movs	r1, #1
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dac:	4013      	ands	r3, r2
 8001dae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	f000 814c 	beq.w	8002050 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f003 0303 	and.w	r3, r3, #3
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d005      	beq.n	8001dd0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d130      	bne.n	8001e32 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	2203      	movs	r2, #3
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	43db      	mvns	r3, r3
 8001de2:	693a      	ldr	r2, [r7, #16]
 8001de4:	4013      	ands	r3, r2
 8001de6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	68da      	ldr	r2, [r3, #12]
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	693a      	ldr	r2, [r7, #16]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	693a      	ldr	r2, [r7, #16]
 8001dfe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e06:	2201      	movs	r2, #1
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0e:	43db      	mvns	r3, r3
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	4013      	ands	r3, r2
 8001e14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	091b      	lsrs	r3, r3, #4
 8001e1c:	f003 0201 	and.w	r2, r3, #1
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	fa02 f303 	lsl.w	r3, r2, r3
 8001e26:	693a      	ldr	r2, [r7, #16]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	693a      	ldr	r2, [r7, #16]
 8001e30:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f003 0303 	and.w	r3, r3, #3
 8001e3a:	2b03      	cmp	r3, #3
 8001e3c:	d017      	beq.n	8001e6e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	2203      	movs	r2, #3
 8001e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4e:	43db      	mvns	r3, r3
 8001e50:	693a      	ldr	r2, [r7, #16]
 8001e52:	4013      	ands	r3, r2
 8001e54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	689a      	ldr	r2, [r3, #8]
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	693a      	ldr	r2, [r7, #16]
 8001e6c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f003 0303 	and.w	r3, r3, #3
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d123      	bne.n	8001ec2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	08da      	lsrs	r2, r3, #3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	3208      	adds	r2, #8
 8001e82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e86:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	f003 0307 	and.w	r3, r3, #7
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	220f      	movs	r2, #15
 8001e92:	fa02 f303 	lsl.w	r3, r2, r3
 8001e96:	43db      	mvns	r3, r3
 8001e98:	693a      	ldr	r2, [r7, #16]
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	691a      	ldr	r2, [r3, #16]
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	f003 0307 	and.w	r3, r3, #7
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	08da      	lsrs	r2, r3, #3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	3208      	adds	r2, #8
 8001ebc:	6939      	ldr	r1, [r7, #16]
 8001ebe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	2203      	movs	r2, #3
 8001ece:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed2:	43db      	mvns	r3, r3
 8001ed4:	693a      	ldr	r2, [r7, #16]
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f003 0203 	and.w	r2, r3, #3
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eea:	693a      	ldr	r2, [r7, #16]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	f000 80a6 	beq.w	8002050 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f04:	4b5b      	ldr	r3, [pc, #364]	; (8002074 <HAL_GPIO_Init+0x2e4>)
 8001f06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f08:	4a5a      	ldr	r2, [pc, #360]	; (8002074 <HAL_GPIO_Init+0x2e4>)
 8001f0a:	f043 0301 	orr.w	r3, r3, #1
 8001f0e:	6613      	str	r3, [r2, #96]	; 0x60
 8001f10:	4b58      	ldr	r3, [pc, #352]	; (8002074 <HAL_GPIO_Init+0x2e4>)
 8001f12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f14:	f003 0301 	and.w	r3, r3, #1
 8001f18:	60bb      	str	r3, [r7, #8]
 8001f1a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f1c:	4a56      	ldr	r2, [pc, #344]	; (8002078 <HAL_GPIO_Init+0x2e8>)
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	089b      	lsrs	r3, r3, #2
 8001f22:	3302      	adds	r3, #2
 8001f24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f28:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	f003 0303 	and.w	r3, r3, #3
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	220f      	movs	r2, #15
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	43db      	mvns	r3, r3
 8001f3a:	693a      	ldr	r2, [r7, #16]
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001f46:	d01f      	beq.n	8001f88 <HAL_GPIO_Init+0x1f8>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	4a4c      	ldr	r2, [pc, #304]	; (800207c <HAL_GPIO_Init+0x2ec>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d019      	beq.n	8001f84 <HAL_GPIO_Init+0x1f4>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	4a4b      	ldr	r2, [pc, #300]	; (8002080 <HAL_GPIO_Init+0x2f0>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d013      	beq.n	8001f80 <HAL_GPIO_Init+0x1f0>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	4a4a      	ldr	r2, [pc, #296]	; (8002084 <HAL_GPIO_Init+0x2f4>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d00d      	beq.n	8001f7c <HAL_GPIO_Init+0x1ec>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	4a49      	ldr	r2, [pc, #292]	; (8002088 <HAL_GPIO_Init+0x2f8>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d007      	beq.n	8001f78 <HAL_GPIO_Init+0x1e8>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	4a48      	ldr	r2, [pc, #288]	; (800208c <HAL_GPIO_Init+0x2fc>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d101      	bne.n	8001f74 <HAL_GPIO_Init+0x1e4>
 8001f70:	2305      	movs	r3, #5
 8001f72:	e00a      	b.n	8001f8a <HAL_GPIO_Init+0x1fa>
 8001f74:	2306      	movs	r3, #6
 8001f76:	e008      	b.n	8001f8a <HAL_GPIO_Init+0x1fa>
 8001f78:	2304      	movs	r3, #4
 8001f7a:	e006      	b.n	8001f8a <HAL_GPIO_Init+0x1fa>
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e004      	b.n	8001f8a <HAL_GPIO_Init+0x1fa>
 8001f80:	2302      	movs	r3, #2
 8001f82:	e002      	b.n	8001f8a <HAL_GPIO_Init+0x1fa>
 8001f84:	2301      	movs	r3, #1
 8001f86:	e000      	b.n	8001f8a <HAL_GPIO_Init+0x1fa>
 8001f88:	2300      	movs	r3, #0
 8001f8a:	697a      	ldr	r2, [r7, #20]
 8001f8c:	f002 0203 	and.w	r2, r2, #3
 8001f90:	0092      	lsls	r2, r2, #2
 8001f92:	4093      	lsls	r3, r2
 8001f94:	693a      	ldr	r2, [r7, #16]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f9a:	4937      	ldr	r1, [pc, #220]	; (8002078 <HAL_GPIO_Init+0x2e8>)
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	089b      	lsrs	r3, r3, #2
 8001fa0:	3302      	adds	r3, #2
 8001fa2:	693a      	ldr	r2, [r7, #16]
 8001fa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001fa8:	4b39      	ldr	r3, [pc, #228]	; (8002090 <HAL_GPIO_Init+0x300>)
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	43db      	mvns	r3, r3
 8001fb2:	693a      	ldr	r2, [r7, #16]
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d003      	beq.n	8001fcc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001fc4:	693a      	ldr	r2, [r7, #16]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001fcc:	4a30      	ldr	r2, [pc, #192]	; (8002090 <HAL_GPIO_Init+0x300>)
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001fd2:	4b2f      	ldr	r3, [pc, #188]	; (8002090 <HAL_GPIO_Init+0x300>)
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	43db      	mvns	r3, r3
 8001fdc:	693a      	ldr	r2, [r7, #16]
 8001fde:	4013      	ands	r3, r2
 8001fe0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d003      	beq.n	8001ff6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001fee:	693a      	ldr	r2, [r7, #16]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ff6:	4a26      	ldr	r2, [pc, #152]	; (8002090 <HAL_GPIO_Init+0x300>)
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001ffc:	4b24      	ldr	r3, [pc, #144]	; (8002090 <HAL_GPIO_Init+0x300>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	43db      	mvns	r3, r3
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	4013      	ands	r3, r2
 800200a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d003      	beq.n	8002020 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002018:	693a      	ldr	r2, [r7, #16]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	4313      	orrs	r3, r2
 800201e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002020:	4a1b      	ldr	r2, [pc, #108]	; (8002090 <HAL_GPIO_Init+0x300>)
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002026:	4b1a      	ldr	r3, [pc, #104]	; (8002090 <HAL_GPIO_Init+0x300>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	43db      	mvns	r3, r3
 8002030:	693a      	ldr	r2, [r7, #16]
 8002032:	4013      	ands	r3, r2
 8002034:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d003      	beq.n	800204a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002042:	693a      	ldr	r2, [r7, #16]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	4313      	orrs	r3, r2
 8002048:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800204a:	4a11      	ldr	r2, [pc, #68]	; (8002090 <HAL_GPIO_Init+0x300>)
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	3301      	adds	r3, #1
 8002054:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	fa22 f303 	lsr.w	r3, r2, r3
 8002060:	2b00      	cmp	r3, #0
 8002062:	f47f ae9d 	bne.w	8001da0 <HAL_GPIO_Init+0x10>
  }
}
 8002066:	bf00      	nop
 8002068:	bf00      	nop
 800206a:	371c      	adds	r7, #28
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr
 8002074:	40021000 	.word	0x40021000
 8002078:	40010000 	.word	0x40010000
 800207c:	48000400 	.word	0x48000400
 8002080:	48000800 	.word	0x48000800
 8002084:	48000c00 	.word	0x48000c00
 8002088:	48001000 	.word	0x48001000
 800208c:	48001400 	.word	0x48001400
 8002090:	40010400 	.word	0x40010400

08002094 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002094:	b480      	push	{r7}
 8002096:	b085      	sub	sp, #20
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	460b      	mov	r3, r1
 800209e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	691a      	ldr	r2, [r3, #16]
 80020a4:	887b      	ldrh	r3, [r7, #2]
 80020a6:	4013      	ands	r3, r2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d002      	beq.n	80020b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020ac:	2301      	movs	r3, #1
 80020ae:	73fb      	strb	r3, [r7, #15]
 80020b0:	e001      	b.n	80020b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020b2:	2300      	movs	r3, #0
 80020b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3714      	adds	r7, #20
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	460b      	mov	r3, r1
 80020ce:	807b      	strh	r3, [r7, #2]
 80020d0:	4613      	mov	r3, r2
 80020d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020d4:	787b      	ldrb	r3, [r7, #1]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d003      	beq.n	80020e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80020da:	887a      	ldrh	r2, [r7, #2]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80020e0:	e002      	b.n	80020e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020e2:	887a      	ldrh	r2, [r7, #2]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80020e8:	bf00      	nop
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d101      	bne.n	8002106 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e081      	b.n	800220a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800210c:	b2db      	uxtb	r3, r3
 800210e:	2b00      	cmp	r3, #0
 8002110:	d106      	bne.n	8002120 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f7ff fade 	bl	80016dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2224      	movs	r2, #36	; 0x24
 8002124:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f022 0201 	bic.w	r2, r2, #1
 8002136:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685a      	ldr	r2, [r3, #4]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002144:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	689a      	ldr	r2, [r3, #8]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002154:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d107      	bne.n	800216e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	689a      	ldr	r2, [r3, #8]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800216a:	609a      	str	r2, [r3, #8]
 800216c:	e006      	b.n	800217c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	689a      	ldr	r2, [r3, #8]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800217a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	2b02      	cmp	r3, #2
 8002182:	d104      	bne.n	800218e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800218c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	6812      	ldr	r2, [r2, #0]
 8002198:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800219c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021a0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	68da      	ldr	r2, [r3, #12]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021b0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	691a      	ldr	r2, [r3, #16]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	695b      	ldr	r3, [r3, #20]
 80021ba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	699b      	ldr	r3, [r3, #24]
 80021c2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	430a      	orrs	r2, r1
 80021ca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	69d9      	ldr	r1, [r3, #28]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6a1a      	ldr	r2, [r3, #32]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	430a      	orrs	r2, r1
 80021da:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f042 0201 	orr.w	r2, r2, #1
 80021ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2220      	movs	r2, #32
 80021f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
	...

08002214 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b088      	sub	sp, #32
 8002218:	af02      	add	r7, sp, #8
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	607a      	str	r2, [r7, #4]
 800221e:	461a      	mov	r2, r3
 8002220:	460b      	mov	r3, r1
 8002222:	817b      	strh	r3, [r7, #10]
 8002224:	4613      	mov	r3, r2
 8002226:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800222e:	b2db      	uxtb	r3, r3
 8002230:	2b20      	cmp	r3, #32
 8002232:	f040 80da 	bne.w	80023ea <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800223c:	2b01      	cmp	r3, #1
 800223e:	d101      	bne.n	8002244 <HAL_I2C_Master_Transmit+0x30>
 8002240:	2302      	movs	r3, #2
 8002242:	e0d3      	b.n	80023ec <HAL_I2C_Master_Transmit+0x1d8>
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2201      	movs	r2, #1
 8002248:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800224c:	f7ff fc62 	bl	8001b14 <HAL_GetTick>
 8002250:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	9300      	str	r3, [sp, #0]
 8002256:	2319      	movs	r3, #25
 8002258:	2201      	movs	r2, #1
 800225a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800225e:	68f8      	ldr	r0, [r7, #12]
 8002260:	f000 f8f0 	bl	8002444 <I2C_WaitOnFlagUntilTimeout>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e0be      	b.n	80023ec <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2221      	movs	r2, #33	; 0x21
 8002272:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2210      	movs	r2, #16
 800227a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2200      	movs	r2, #0
 8002282:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	893a      	ldrh	r2, [r7, #8]
 800228e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2200      	movs	r2, #0
 8002294:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800229a:	b29b      	uxth	r3, r3
 800229c:	2bff      	cmp	r3, #255	; 0xff
 800229e:	d90e      	bls.n	80022be <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	22ff      	movs	r2, #255	; 0xff
 80022a4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022aa:	b2da      	uxtb	r2, r3
 80022ac:	8979      	ldrh	r1, [r7, #10]
 80022ae:	4b51      	ldr	r3, [pc, #324]	; (80023f4 <HAL_I2C_Master_Transmit+0x1e0>)
 80022b0:	9300      	str	r3, [sp, #0]
 80022b2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022b6:	68f8      	ldr	r0, [r7, #12]
 80022b8:	f000 fa6c 	bl	8002794 <I2C_TransferConfig>
 80022bc:	e06c      	b.n	8002398 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022c2:	b29a      	uxth	r2, r3
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022cc:	b2da      	uxtb	r2, r3
 80022ce:	8979      	ldrh	r1, [r7, #10]
 80022d0:	4b48      	ldr	r3, [pc, #288]	; (80023f4 <HAL_I2C_Master_Transmit+0x1e0>)
 80022d2:	9300      	str	r3, [sp, #0]
 80022d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022d8:	68f8      	ldr	r0, [r7, #12]
 80022da:	f000 fa5b 	bl	8002794 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80022de:	e05b      	b.n	8002398 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022e0:	697a      	ldr	r2, [r7, #20]
 80022e2:	6a39      	ldr	r1, [r7, #32]
 80022e4:	68f8      	ldr	r0, [r7, #12]
 80022e6:	f000 f8ed 	bl	80024c4 <I2C_WaitOnTXISFlagUntilTimeout>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d001      	beq.n	80022f4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e07b      	b.n	80023ec <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f8:	781a      	ldrb	r2, [r3, #0]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002304:	1c5a      	adds	r2, r3, #1
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800230e:	b29b      	uxth	r3, r3
 8002310:	3b01      	subs	r3, #1
 8002312:	b29a      	uxth	r2, r3
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800231c:	3b01      	subs	r3, #1
 800231e:	b29a      	uxth	r2, r3
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002328:	b29b      	uxth	r3, r3
 800232a:	2b00      	cmp	r3, #0
 800232c:	d034      	beq.n	8002398 <HAL_I2C_Master_Transmit+0x184>
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002332:	2b00      	cmp	r3, #0
 8002334:	d130      	bne.n	8002398 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	9300      	str	r3, [sp, #0]
 800233a:	6a3b      	ldr	r3, [r7, #32]
 800233c:	2200      	movs	r2, #0
 800233e:	2180      	movs	r1, #128	; 0x80
 8002340:	68f8      	ldr	r0, [r7, #12]
 8002342:	f000 f87f 	bl	8002444 <I2C_WaitOnFlagUntilTimeout>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e04d      	b.n	80023ec <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002354:	b29b      	uxth	r3, r3
 8002356:	2bff      	cmp	r3, #255	; 0xff
 8002358:	d90e      	bls.n	8002378 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	22ff      	movs	r2, #255	; 0xff
 800235e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002364:	b2da      	uxtb	r2, r3
 8002366:	8979      	ldrh	r1, [r7, #10]
 8002368:	2300      	movs	r3, #0
 800236a:	9300      	str	r3, [sp, #0]
 800236c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002370:	68f8      	ldr	r0, [r7, #12]
 8002372:	f000 fa0f 	bl	8002794 <I2C_TransferConfig>
 8002376:	e00f      	b.n	8002398 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800237c:	b29a      	uxth	r2, r3
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002386:	b2da      	uxtb	r2, r3
 8002388:	8979      	ldrh	r1, [r7, #10]
 800238a:	2300      	movs	r3, #0
 800238c:	9300      	str	r3, [sp, #0]
 800238e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002392:	68f8      	ldr	r0, [r7, #12]
 8002394:	f000 f9fe 	bl	8002794 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800239c:	b29b      	uxth	r3, r3
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d19e      	bne.n	80022e0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023a2:	697a      	ldr	r2, [r7, #20]
 80023a4:	6a39      	ldr	r1, [r7, #32]
 80023a6:	68f8      	ldr	r0, [r7, #12]
 80023a8:	f000 f8cc 	bl	8002544 <I2C_WaitOnSTOPFlagUntilTimeout>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e01a      	b.n	80023ec <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	2220      	movs	r2, #32
 80023bc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	6859      	ldr	r1, [r3, #4]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	4b0b      	ldr	r3, [pc, #44]	; (80023f8 <HAL_I2C_Master_Transmit+0x1e4>)
 80023ca:	400b      	ands	r3, r1
 80023cc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2220      	movs	r2, #32
 80023d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2200      	movs	r2, #0
 80023da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80023e6:	2300      	movs	r3, #0
 80023e8:	e000      	b.n	80023ec <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80023ea:	2302      	movs	r3, #2
  }
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3718      	adds	r7, #24
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	80002000 	.word	0x80002000
 80023f8:	fe00e800 	.word	0xfe00e800

080023fc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	699b      	ldr	r3, [r3, #24]
 800240a:	f003 0302 	and.w	r3, r3, #2
 800240e:	2b02      	cmp	r3, #2
 8002410:	d103      	bne.n	800241a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	2200      	movs	r2, #0
 8002418:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	699b      	ldr	r3, [r3, #24]
 8002420:	f003 0301 	and.w	r3, r3, #1
 8002424:	2b01      	cmp	r3, #1
 8002426:	d007      	beq.n	8002438 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	699a      	ldr	r2, [r3, #24]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f042 0201 	orr.w	r2, r2, #1
 8002436:	619a      	str	r2, [r3, #24]
  }
}
 8002438:	bf00      	nop
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	60b9      	str	r1, [r7, #8]
 800244e:	603b      	str	r3, [r7, #0]
 8002450:	4613      	mov	r3, r2
 8002452:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002454:	e022      	b.n	800249c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800245c:	d01e      	beq.n	800249c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800245e:	f7ff fb59 	bl	8001b14 <HAL_GetTick>
 8002462:	4602      	mov	r2, r0
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	683a      	ldr	r2, [r7, #0]
 800246a:	429a      	cmp	r2, r3
 800246c:	d302      	bcc.n	8002474 <I2C_WaitOnFlagUntilTimeout+0x30>
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d113      	bne.n	800249c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002478:	f043 0220 	orr.w	r2, r3, #32
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2220      	movs	r2, #32
 8002484:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2200      	movs	r2, #0
 800248c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2200      	movs	r2, #0
 8002494:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e00f      	b.n	80024bc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	699a      	ldr	r2, [r3, #24]
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	4013      	ands	r3, r2
 80024a6:	68ba      	ldr	r2, [r7, #8]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	bf0c      	ite	eq
 80024ac:	2301      	moveq	r3, #1
 80024ae:	2300      	movne	r3, #0
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	461a      	mov	r2, r3
 80024b4:	79fb      	ldrb	r3, [r7, #7]
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d0cd      	beq.n	8002456 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80024ba:	2300      	movs	r3, #0
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3710      	adds	r7, #16
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	60f8      	str	r0, [r7, #12]
 80024cc:	60b9      	str	r1, [r7, #8]
 80024ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80024d0:	e02c      	b.n	800252c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	68b9      	ldr	r1, [r7, #8]
 80024d6:	68f8      	ldr	r0, [r7, #12]
 80024d8:	f000 f870 	bl	80025bc <I2C_IsErrorOccurred>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e02a      	b.n	800253c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024ec:	d01e      	beq.n	800252c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024ee:	f7ff fb11 	bl	8001b14 <HAL_GetTick>
 80024f2:	4602      	mov	r2, r0
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	68ba      	ldr	r2, [r7, #8]
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d302      	bcc.n	8002504 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d113      	bne.n	800252c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002508:	f043 0220 	orr.w	r2, r3, #32
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2220      	movs	r2, #32
 8002514:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2200      	movs	r2, #0
 800251c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e007      	b.n	800253c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	699b      	ldr	r3, [r3, #24]
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	2b02      	cmp	r3, #2
 8002538:	d1cb      	bne.n	80024d2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800253a:	2300      	movs	r3, #0
}
 800253c:	4618      	mov	r0, r3
 800253e:	3710      	adds	r7, #16
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	60b9      	str	r1, [r7, #8]
 800254e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002550:	e028      	b.n	80025a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	68b9      	ldr	r1, [r7, #8]
 8002556:	68f8      	ldr	r0, [r7, #12]
 8002558:	f000 f830 	bl	80025bc <I2C_IsErrorOccurred>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e026      	b.n	80025b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002566:	f7ff fad5 	bl	8001b14 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	68ba      	ldr	r2, [r7, #8]
 8002572:	429a      	cmp	r2, r3
 8002574:	d302      	bcc.n	800257c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d113      	bne.n	80025a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002580:	f043 0220 	orr.w	r2, r3, #32
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2220      	movs	r2, #32
 800258c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2200      	movs	r2, #0
 8002594:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2200      	movs	r2, #0
 800259c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e007      	b.n	80025b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	699b      	ldr	r3, [r3, #24]
 80025aa:	f003 0320 	and.w	r3, r3, #32
 80025ae:	2b20      	cmp	r3, #32
 80025b0:	d1cf      	bne.n	8002552 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80025b2:	2300      	movs	r3, #0
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3710      	adds	r7, #16
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}

080025bc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b08a      	sub	sp, #40	; 0x28
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	60b9      	str	r1, [r7, #8]
 80025c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025c8:	2300      	movs	r3, #0
 80025ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	699b      	ldr	r3, [r3, #24]
 80025d4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80025d6:	2300      	movs	r3, #0
 80025d8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	f003 0310 	and.w	r3, r3, #16
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d075      	beq.n	80026d4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2210      	movs	r2, #16
 80025ee:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80025f0:	e056      	b.n	80026a0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025f8:	d052      	beq.n	80026a0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80025fa:	f7ff fa8b 	bl	8001b14 <HAL_GetTick>
 80025fe:	4602      	mov	r2, r0
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	68ba      	ldr	r2, [r7, #8]
 8002606:	429a      	cmp	r2, r3
 8002608:	d302      	bcc.n	8002610 <I2C_IsErrorOccurred+0x54>
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d147      	bne.n	80026a0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800261a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002622:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	699b      	ldr	r3, [r3, #24]
 800262a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800262e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002632:	d12e      	bne.n	8002692 <I2C_IsErrorOccurred+0xd6>
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800263a:	d02a      	beq.n	8002692 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800263c:	7cfb      	ldrb	r3, [r7, #19]
 800263e:	2b20      	cmp	r3, #32
 8002640:	d027      	beq.n	8002692 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	685a      	ldr	r2, [r3, #4]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002650:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002652:	f7ff fa5f 	bl	8001b14 <HAL_GetTick>
 8002656:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002658:	e01b      	b.n	8002692 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800265a:	f7ff fa5b 	bl	8001b14 <HAL_GetTick>
 800265e:	4602      	mov	r2, r0
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	2b19      	cmp	r3, #25
 8002666:	d914      	bls.n	8002692 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266c:	f043 0220 	orr.w	r2, r3, #32
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2220      	movs	r2, #32
 8002678:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2200      	movs	r2, #0
 8002680:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2200      	movs	r2, #0
 8002688:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	699b      	ldr	r3, [r3, #24]
 8002698:	f003 0320 	and.w	r3, r3, #32
 800269c:	2b20      	cmp	r3, #32
 800269e:	d1dc      	bne.n	800265a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	699b      	ldr	r3, [r3, #24]
 80026a6:	f003 0320 	and.w	r3, r3, #32
 80026aa:	2b20      	cmp	r3, #32
 80026ac:	d003      	beq.n	80026b6 <I2C_IsErrorOccurred+0xfa>
 80026ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d09d      	beq.n	80025f2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80026b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d103      	bne.n	80026c6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	2220      	movs	r2, #32
 80026c4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80026c6:	6a3b      	ldr	r3, [r7, #32]
 80026c8:	f043 0304 	orr.w	r3, r3, #4
 80026cc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	699b      	ldr	r3, [r3, #24]
 80026da:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d00b      	beq.n	80026fe <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80026e6:	6a3b      	ldr	r3, [r7, #32]
 80026e8:	f043 0301 	orr.w	r3, r3, #1
 80026ec:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026f6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002704:	2b00      	cmp	r3, #0
 8002706:	d00b      	beq.n	8002720 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002708:	6a3b      	ldr	r3, [r7, #32]
 800270a:	f043 0308 	orr.w	r3, r3, #8
 800270e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002718:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002726:	2b00      	cmp	r3, #0
 8002728:	d00b      	beq.n	8002742 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800272a:	6a3b      	ldr	r3, [r7, #32]
 800272c:	f043 0302 	orr.w	r3, r3, #2
 8002730:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f44f 7200 	mov.w	r2, #512	; 0x200
 800273a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002742:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002746:	2b00      	cmp	r3, #0
 8002748:	d01c      	beq.n	8002784 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800274a:	68f8      	ldr	r0, [r7, #12]
 800274c:	f7ff fe56 	bl	80023fc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	6859      	ldr	r1, [r3, #4]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	4b0d      	ldr	r3, [pc, #52]	; (8002790 <I2C_IsErrorOccurred+0x1d4>)
 800275c:	400b      	ands	r3, r1
 800275e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002764:	6a3b      	ldr	r3, [r7, #32]
 8002766:	431a      	orrs	r2, r3
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2220      	movs	r2, #32
 8002770:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2200      	movs	r2, #0
 8002778:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2200      	movs	r2, #0
 8002780:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002784:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002788:	4618      	mov	r0, r3
 800278a:	3728      	adds	r7, #40	; 0x28
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	fe00e800 	.word	0xfe00e800

08002794 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002794:	b480      	push	{r7}
 8002796:	b087      	sub	sp, #28
 8002798:	af00      	add	r7, sp, #0
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	607b      	str	r3, [r7, #4]
 800279e:	460b      	mov	r3, r1
 80027a0:	817b      	strh	r3, [r7, #10]
 80027a2:	4613      	mov	r3, r2
 80027a4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80027a6:	897b      	ldrh	r3, [r7, #10]
 80027a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80027ac:	7a7b      	ldrb	r3, [r7, #9]
 80027ae:	041b      	lsls	r3, r3, #16
 80027b0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80027b4:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80027ba:	6a3b      	ldr	r3, [r7, #32]
 80027bc:	4313      	orrs	r3, r2
 80027be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80027c2:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	685a      	ldr	r2, [r3, #4]
 80027ca:	6a3b      	ldr	r3, [r7, #32]
 80027cc:	0d5b      	lsrs	r3, r3, #21
 80027ce:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80027d2:	4b08      	ldr	r3, [pc, #32]	; (80027f4 <I2C_TransferConfig+0x60>)
 80027d4:	430b      	orrs	r3, r1
 80027d6:	43db      	mvns	r3, r3
 80027d8:	ea02 0103 	and.w	r1, r2, r3
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	697a      	ldr	r2, [r7, #20]
 80027e2:	430a      	orrs	r2, r1
 80027e4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80027e6:	bf00      	nop
 80027e8:	371c      	adds	r7, #28
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	03ff63ff 	.word	0x03ff63ff

080027f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002808:	b2db      	uxtb	r3, r3
 800280a:	2b20      	cmp	r3, #32
 800280c:	d138      	bne.n	8002880 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002814:	2b01      	cmp	r3, #1
 8002816:	d101      	bne.n	800281c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002818:	2302      	movs	r3, #2
 800281a:	e032      	b.n	8002882 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2224      	movs	r2, #36	; 0x24
 8002828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f022 0201 	bic.w	r2, r2, #1
 800283a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800284a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	6819      	ldr	r1, [r3, #0]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	683a      	ldr	r2, [r7, #0]
 8002858:	430a      	orrs	r2, r1
 800285a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f042 0201 	orr.w	r2, r2, #1
 800286a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2220      	movs	r2, #32
 8002870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800287c:	2300      	movs	r3, #0
 800287e:	e000      	b.n	8002882 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002880:	2302      	movs	r3, #2
  }
}
 8002882:	4618      	mov	r0, r3
 8002884:	370c      	adds	r7, #12
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr

0800288e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800288e:	b480      	push	{r7}
 8002890:	b085      	sub	sp, #20
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
 8002896:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	2b20      	cmp	r3, #32
 80028a2:	d139      	bne.n	8002918 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d101      	bne.n	80028b2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80028ae:	2302      	movs	r3, #2
 80028b0:	e033      	b.n	800291a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2201      	movs	r2, #1
 80028b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2224      	movs	r2, #36	; 0x24
 80028be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f022 0201 	bic.w	r2, r2, #1
 80028d0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80028e0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	021b      	lsls	r3, r3, #8
 80028e6:	68fa      	ldr	r2, [r7, #12]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	68fa      	ldr	r2, [r7, #12]
 80028f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f042 0201 	orr.w	r2, r2, #1
 8002902:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2220      	movs	r2, #32
 8002908:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002914:	2300      	movs	r3, #0
 8002916:	e000      	b.n	800291a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002918:	2302      	movs	r3, #2
  }
}
 800291a:	4618      	mov	r0, r3
 800291c:	3714      	adds	r7, #20
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
	...

08002928 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002928:	b480      	push	{r7}
 800292a:	b085      	sub	sp, #20
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d141      	bne.n	80029ba <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002936:	4b4b      	ldr	r3, [pc, #300]	; (8002a64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800293e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002942:	d131      	bne.n	80029a8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002944:	4b47      	ldr	r3, [pc, #284]	; (8002a64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002946:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800294a:	4a46      	ldr	r2, [pc, #280]	; (8002a64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800294c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002950:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002954:	4b43      	ldr	r3, [pc, #268]	; (8002a64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800295c:	4a41      	ldr	r2, [pc, #260]	; (8002a64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800295e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002962:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002964:	4b40      	ldr	r3, [pc, #256]	; (8002a68 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2232      	movs	r2, #50	; 0x32
 800296a:	fb02 f303 	mul.w	r3, r2, r3
 800296e:	4a3f      	ldr	r2, [pc, #252]	; (8002a6c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002970:	fba2 2303 	umull	r2, r3, r2, r3
 8002974:	0c9b      	lsrs	r3, r3, #18
 8002976:	3301      	adds	r3, #1
 8002978:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800297a:	e002      	b.n	8002982 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	3b01      	subs	r3, #1
 8002980:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002982:	4b38      	ldr	r3, [pc, #224]	; (8002a64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002984:	695b      	ldr	r3, [r3, #20]
 8002986:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800298a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800298e:	d102      	bne.n	8002996 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d1f2      	bne.n	800297c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002996:	4b33      	ldr	r3, [pc, #204]	; (8002a64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002998:	695b      	ldr	r3, [r3, #20]
 800299a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800299e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029a2:	d158      	bne.n	8002a56 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	e057      	b.n	8002a58 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80029a8:	4b2e      	ldr	r3, [pc, #184]	; (8002a64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029ae:	4a2d      	ldr	r2, [pc, #180]	; (8002a64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029b4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80029b8:	e04d      	b.n	8002a56 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029c0:	d141      	bne.n	8002a46 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80029c2:	4b28      	ldr	r3, [pc, #160]	; (8002a64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80029ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029ce:	d131      	bne.n	8002a34 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80029d0:	4b24      	ldr	r3, [pc, #144]	; (8002a64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029d6:	4a23      	ldr	r2, [pc, #140]	; (8002a64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80029e0:	4b20      	ldr	r3, [pc, #128]	; (8002a64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80029e8:	4a1e      	ldr	r2, [pc, #120]	; (8002a64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029ee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80029f0:	4b1d      	ldr	r3, [pc, #116]	; (8002a68 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2232      	movs	r2, #50	; 0x32
 80029f6:	fb02 f303 	mul.w	r3, r2, r3
 80029fa:	4a1c      	ldr	r2, [pc, #112]	; (8002a6c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80029fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002a00:	0c9b      	lsrs	r3, r3, #18
 8002a02:	3301      	adds	r3, #1
 8002a04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a06:	e002      	b.n	8002a0e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a0e:	4b15      	ldr	r3, [pc, #84]	; (8002a64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a10:	695b      	ldr	r3, [r3, #20]
 8002a12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a1a:	d102      	bne.n	8002a22 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d1f2      	bne.n	8002a08 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a22:	4b10      	ldr	r3, [pc, #64]	; (8002a64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a24:	695b      	ldr	r3, [r3, #20]
 8002a26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a2e:	d112      	bne.n	8002a56 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e011      	b.n	8002a58 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a34:	4b0b      	ldr	r3, [pc, #44]	; (8002a64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a3a:	4a0a      	ldr	r2, [pc, #40]	; (8002a64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a40:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002a44:	e007      	b.n	8002a56 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002a46:	4b07      	ldr	r3, [pc, #28]	; (8002a64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a4e:	4a05      	ldr	r2, [pc, #20]	; (8002a64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a50:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a54:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002a56:	2300      	movs	r3, #0
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3714      	adds	r7, #20
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr
 8002a64:	40007000 	.word	0x40007000
 8002a68:	20000000 	.word	0x20000000
 8002a6c:	431bde83 	.word	0x431bde83

08002a70 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002a70:	b480      	push	{r7}
 8002a72:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002a74:	4b05      	ldr	r3, [pc, #20]	; (8002a8c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	4a04      	ldr	r2, [pc, #16]	; (8002a8c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002a7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a7e:	6093      	str	r3, [r2, #8]
}
 8002a80:	bf00      	nop
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	40007000 	.word	0x40007000

08002a90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b088      	sub	sp, #32
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d101      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e306      	b.n	80030b0 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0301 	and.w	r3, r3, #1
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d075      	beq.n	8002b9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002aae:	4b97      	ldr	r3, [pc, #604]	; (8002d0c <HAL_RCC_OscConfig+0x27c>)
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f003 030c 	and.w	r3, r3, #12
 8002ab6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ab8:	4b94      	ldr	r3, [pc, #592]	; (8002d0c <HAL_RCC_OscConfig+0x27c>)
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	f003 0303 	and.w	r3, r3, #3
 8002ac0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	2b0c      	cmp	r3, #12
 8002ac6:	d102      	bne.n	8002ace <HAL_RCC_OscConfig+0x3e>
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	2b03      	cmp	r3, #3
 8002acc:	d002      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x44>
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	2b08      	cmp	r3, #8
 8002ad2:	d10b      	bne.n	8002aec <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ad4:	4b8d      	ldr	r3, [pc, #564]	; (8002d0c <HAL_RCC_OscConfig+0x27c>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d05b      	beq.n	8002b98 <HAL_RCC_OscConfig+0x108>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d157      	bne.n	8002b98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e2e1      	b.n	80030b0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002af4:	d106      	bne.n	8002b04 <HAL_RCC_OscConfig+0x74>
 8002af6:	4b85      	ldr	r3, [pc, #532]	; (8002d0c <HAL_RCC_OscConfig+0x27c>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a84      	ldr	r2, [pc, #528]	; (8002d0c <HAL_RCC_OscConfig+0x27c>)
 8002afc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b00:	6013      	str	r3, [r2, #0]
 8002b02:	e01d      	b.n	8002b40 <HAL_RCC_OscConfig+0xb0>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b0c:	d10c      	bne.n	8002b28 <HAL_RCC_OscConfig+0x98>
 8002b0e:	4b7f      	ldr	r3, [pc, #508]	; (8002d0c <HAL_RCC_OscConfig+0x27c>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a7e      	ldr	r2, [pc, #504]	; (8002d0c <HAL_RCC_OscConfig+0x27c>)
 8002b14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b18:	6013      	str	r3, [r2, #0]
 8002b1a:	4b7c      	ldr	r3, [pc, #496]	; (8002d0c <HAL_RCC_OscConfig+0x27c>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a7b      	ldr	r2, [pc, #492]	; (8002d0c <HAL_RCC_OscConfig+0x27c>)
 8002b20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b24:	6013      	str	r3, [r2, #0]
 8002b26:	e00b      	b.n	8002b40 <HAL_RCC_OscConfig+0xb0>
 8002b28:	4b78      	ldr	r3, [pc, #480]	; (8002d0c <HAL_RCC_OscConfig+0x27c>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a77      	ldr	r2, [pc, #476]	; (8002d0c <HAL_RCC_OscConfig+0x27c>)
 8002b2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b32:	6013      	str	r3, [r2, #0]
 8002b34:	4b75      	ldr	r3, [pc, #468]	; (8002d0c <HAL_RCC_OscConfig+0x27c>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a74      	ldr	r2, [pc, #464]	; (8002d0c <HAL_RCC_OscConfig+0x27c>)
 8002b3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d013      	beq.n	8002b70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b48:	f7fe ffe4 	bl	8001b14 <HAL_GetTick>
 8002b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b4e:	e008      	b.n	8002b62 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b50:	f7fe ffe0 	bl	8001b14 <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	2b64      	cmp	r3, #100	; 0x64
 8002b5c:	d901      	bls.n	8002b62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e2a6      	b.n	80030b0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b62:	4b6a      	ldr	r3, [pc, #424]	; (8002d0c <HAL_RCC_OscConfig+0x27c>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d0f0      	beq.n	8002b50 <HAL_RCC_OscConfig+0xc0>
 8002b6e:	e014      	b.n	8002b9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b70:	f7fe ffd0 	bl	8001b14 <HAL_GetTick>
 8002b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b76:	e008      	b.n	8002b8a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b78:	f7fe ffcc 	bl	8001b14 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b64      	cmp	r3, #100	; 0x64
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e292      	b.n	80030b0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b8a:	4b60      	ldr	r3, [pc, #384]	; (8002d0c <HAL_RCC_OscConfig+0x27c>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1f0      	bne.n	8002b78 <HAL_RCC_OscConfig+0xe8>
 8002b96:	e000      	b.n	8002b9a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d075      	beq.n	8002c92 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ba6:	4b59      	ldr	r3, [pc, #356]	; (8002d0c <HAL_RCC_OscConfig+0x27c>)
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	f003 030c 	and.w	r3, r3, #12
 8002bae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bb0:	4b56      	ldr	r3, [pc, #344]	; (8002d0c <HAL_RCC_OscConfig+0x27c>)
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	f003 0303 	and.w	r3, r3, #3
 8002bb8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002bba:	69bb      	ldr	r3, [r7, #24]
 8002bbc:	2b0c      	cmp	r3, #12
 8002bbe:	d102      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x136>
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d002      	beq.n	8002bcc <HAL_RCC_OscConfig+0x13c>
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	2b04      	cmp	r3, #4
 8002bca:	d11f      	bne.n	8002c0c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bcc:	4b4f      	ldr	r3, [pc, #316]	; (8002d0c <HAL_RCC_OscConfig+0x27c>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d005      	beq.n	8002be4 <HAL_RCC_OscConfig+0x154>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d101      	bne.n	8002be4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e265      	b.n	80030b0 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002be4:	4b49      	ldr	r3, [pc, #292]	; (8002d0c <HAL_RCC_OscConfig+0x27c>)
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	691b      	ldr	r3, [r3, #16]
 8002bf0:	061b      	lsls	r3, r3, #24
 8002bf2:	4946      	ldr	r1, [pc, #280]	; (8002d0c <HAL_RCC_OscConfig+0x27c>)
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002bf8:	4b45      	ldr	r3, [pc, #276]	; (8002d10 <HAL_RCC_OscConfig+0x280>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7fe ff3d 	bl	8001a7c <HAL_InitTick>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d043      	beq.n	8002c90 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e251      	b.n	80030b0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d023      	beq.n	8002c5c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c14:	4b3d      	ldr	r3, [pc, #244]	; (8002d0c <HAL_RCC_OscConfig+0x27c>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a3c      	ldr	r2, [pc, #240]	; (8002d0c <HAL_RCC_OscConfig+0x27c>)
 8002c1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c20:	f7fe ff78 	bl	8001b14 <HAL_GetTick>
 8002c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c26:	e008      	b.n	8002c3a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c28:	f7fe ff74 	bl	8001b14 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e23a      	b.n	80030b0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c3a:	4b34      	ldr	r3, [pc, #208]	; (8002d0c <HAL_RCC_OscConfig+0x27c>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d0f0      	beq.n	8002c28 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c46:	4b31      	ldr	r3, [pc, #196]	; (8002d0c <HAL_RCC_OscConfig+0x27c>)
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	061b      	lsls	r3, r3, #24
 8002c54:	492d      	ldr	r1, [pc, #180]	; (8002d0c <HAL_RCC_OscConfig+0x27c>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	604b      	str	r3, [r1, #4]
 8002c5a:	e01a      	b.n	8002c92 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c5c:	4b2b      	ldr	r3, [pc, #172]	; (8002d0c <HAL_RCC_OscConfig+0x27c>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a2a      	ldr	r2, [pc, #168]	; (8002d0c <HAL_RCC_OscConfig+0x27c>)
 8002c62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c68:	f7fe ff54 	bl	8001b14 <HAL_GetTick>
 8002c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c6e:	e008      	b.n	8002c82 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c70:	f7fe ff50 	bl	8001b14 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e216      	b.n	80030b0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c82:	4b22      	ldr	r3, [pc, #136]	; (8002d0c <HAL_RCC_OscConfig+0x27c>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d1f0      	bne.n	8002c70 <HAL_RCC_OscConfig+0x1e0>
 8002c8e:	e000      	b.n	8002c92 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c90:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0308 	and.w	r3, r3, #8
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d041      	beq.n	8002d22 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	695b      	ldr	r3, [r3, #20]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d01c      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ca6:	4b19      	ldr	r3, [pc, #100]	; (8002d0c <HAL_RCC_OscConfig+0x27c>)
 8002ca8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cac:	4a17      	ldr	r2, [pc, #92]	; (8002d0c <HAL_RCC_OscConfig+0x27c>)
 8002cae:	f043 0301 	orr.w	r3, r3, #1
 8002cb2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cb6:	f7fe ff2d 	bl	8001b14 <HAL_GetTick>
 8002cba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cbc:	e008      	b.n	8002cd0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cbe:	f7fe ff29 	bl	8001b14 <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d901      	bls.n	8002cd0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e1ef      	b.n	80030b0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cd0:	4b0e      	ldr	r3, [pc, #56]	; (8002d0c <HAL_RCC_OscConfig+0x27c>)
 8002cd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d0ef      	beq.n	8002cbe <HAL_RCC_OscConfig+0x22e>
 8002cde:	e020      	b.n	8002d22 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ce0:	4b0a      	ldr	r3, [pc, #40]	; (8002d0c <HAL_RCC_OscConfig+0x27c>)
 8002ce2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ce6:	4a09      	ldr	r2, [pc, #36]	; (8002d0c <HAL_RCC_OscConfig+0x27c>)
 8002ce8:	f023 0301 	bic.w	r3, r3, #1
 8002cec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cf0:	f7fe ff10 	bl	8001b14 <HAL_GetTick>
 8002cf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002cf6:	e00d      	b.n	8002d14 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cf8:	f7fe ff0c 	bl	8001b14 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d906      	bls.n	8002d14 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e1d2      	b.n	80030b0 <HAL_RCC_OscConfig+0x620>
 8002d0a:	bf00      	nop
 8002d0c:	40021000 	.word	0x40021000
 8002d10:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d14:	4b8c      	ldr	r3, [pc, #560]	; (8002f48 <HAL_RCC_OscConfig+0x4b8>)
 8002d16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d1a:	f003 0302 	and.w	r3, r3, #2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d1ea      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0304 	and.w	r3, r3, #4
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	f000 80a6 	beq.w	8002e7c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d30:	2300      	movs	r3, #0
 8002d32:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002d34:	4b84      	ldr	r3, [pc, #528]	; (8002f48 <HAL_RCC_OscConfig+0x4b8>)
 8002d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d101      	bne.n	8002d44 <HAL_RCC_OscConfig+0x2b4>
 8002d40:	2301      	movs	r3, #1
 8002d42:	e000      	b.n	8002d46 <HAL_RCC_OscConfig+0x2b6>
 8002d44:	2300      	movs	r3, #0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d00d      	beq.n	8002d66 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d4a:	4b7f      	ldr	r3, [pc, #508]	; (8002f48 <HAL_RCC_OscConfig+0x4b8>)
 8002d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d4e:	4a7e      	ldr	r2, [pc, #504]	; (8002f48 <HAL_RCC_OscConfig+0x4b8>)
 8002d50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d54:	6593      	str	r3, [r2, #88]	; 0x58
 8002d56:	4b7c      	ldr	r3, [pc, #496]	; (8002f48 <HAL_RCC_OscConfig+0x4b8>)
 8002d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d5e:	60fb      	str	r3, [r7, #12]
 8002d60:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002d62:	2301      	movs	r3, #1
 8002d64:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d66:	4b79      	ldr	r3, [pc, #484]	; (8002f4c <HAL_RCC_OscConfig+0x4bc>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d118      	bne.n	8002da4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d72:	4b76      	ldr	r3, [pc, #472]	; (8002f4c <HAL_RCC_OscConfig+0x4bc>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a75      	ldr	r2, [pc, #468]	; (8002f4c <HAL_RCC_OscConfig+0x4bc>)
 8002d78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d7e:	f7fe fec9 	bl	8001b14 <HAL_GetTick>
 8002d82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d84:	e008      	b.n	8002d98 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d86:	f7fe fec5 	bl	8001b14 <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d901      	bls.n	8002d98 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	e18b      	b.n	80030b0 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d98:	4b6c      	ldr	r3, [pc, #432]	; (8002f4c <HAL_RCC_OscConfig+0x4bc>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d0f0      	beq.n	8002d86 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d108      	bne.n	8002dbe <HAL_RCC_OscConfig+0x32e>
 8002dac:	4b66      	ldr	r3, [pc, #408]	; (8002f48 <HAL_RCC_OscConfig+0x4b8>)
 8002dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002db2:	4a65      	ldr	r2, [pc, #404]	; (8002f48 <HAL_RCC_OscConfig+0x4b8>)
 8002db4:	f043 0301 	orr.w	r3, r3, #1
 8002db8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002dbc:	e024      	b.n	8002e08 <HAL_RCC_OscConfig+0x378>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	2b05      	cmp	r3, #5
 8002dc4:	d110      	bne.n	8002de8 <HAL_RCC_OscConfig+0x358>
 8002dc6:	4b60      	ldr	r3, [pc, #384]	; (8002f48 <HAL_RCC_OscConfig+0x4b8>)
 8002dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dcc:	4a5e      	ldr	r2, [pc, #376]	; (8002f48 <HAL_RCC_OscConfig+0x4b8>)
 8002dce:	f043 0304 	orr.w	r3, r3, #4
 8002dd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002dd6:	4b5c      	ldr	r3, [pc, #368]	; (8002f48 <HAL_RCC_OscConfig+0x4b8>)
 8002dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ddc:	4a5a      	ldr	r2, [pc, #360]	; (8002f48 <HAL_RCC_OscConfig+0x4b8>)
 8002dde:	f043 0301 	orr.w	r3, r3, #1
 8002de2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002de6:	e00f      	b.n	8002e08 <HAL_RCC_OscConfig+0x378>
 8002de8:	4b57      	ldr	r3, [pc, #348]	; (8002f48 <HAL_RCC_OscConfig+0x4b8>)
 8002dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dee:	4a56      	ldr	r2, [pc, #344]	; (8002f48 <HAL_RCC_OscConfig+0x4b8>)
 8002df0:	f023 0301 	bic.w	r3, r3, #1
 8002df4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002df8:	4b53      	ldr	r3, [pc, #332]	; (8002f48 <HAL_RCC_OscConfig+0x4b8>)
 8002dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dfe:	4a52      	ldr	r2, [pc, #328]	; (8002f48 <HAL_RCC_OscConfig+0x4b8>)
 8002e00:	f023 0304 	bic.w	r3, r3, #4
 8002e04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d016      	beq.n	8002e3e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e10:	f7fe fe80 	bl	8001b14 <HAL_GetTick>
 8002e14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e16:	e00a      	b.n	8002e2e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e18:	f7fe fe7c 	bl	8001b14 <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d901      	bls.n	8002e2e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e140      	b.n	80030b0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e2e:	4b46      	ldr	r3, [pc, #280]	; (8002f48 <HAL_RCC_OscConfig+0x4b8>)
 8002e30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e34:	f003 0302 	and.w	r3, r3, #2
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d0ed      	beq.n	8002e18 <HAL_RCC_OscConfig+0x388>
 8002e3c:	e015      	b.n	8002e6a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e3e:	f7fe fe69 	bl	8001b14 <HAL_GetTick>
 8002e42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e44:	e00a      	b.n	8002e5c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e46:	f7fe fe65 	bl	8001b14 <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d901      	bls.n	8002e5c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e129      	b.n	80030b0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e5c:	4b3a      	ldr	r3, [pc, #232]	; (8002f48 <HAL_RCC_OscConfig+0x4b8>)
 8002e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d1ed      	bne.n	8002e46 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e6a:	7ffb      	ldrb	r3, [r7, #31]
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d105      	bne.n	8002e7c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e70:	4b35      	ldr	r3, [pc, #212]	; (8002f48 <HAL_RCC_OscConfig+0x4b8>)
 8002e72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e74:	4a34      	ldr	r2, [pc, #208]	; (8002f48 <HAL_RCC_OscConfig+0x4b8>)
 8002e76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e7a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0320 	and.w	r3, r3, #32
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d03c      	beq.n	8002f02 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	699b      	ldr	r3, [r3, #24]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d01c      	beq.n	8002eca <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002e90:	4b2d      	ldr	r3, [pc, #180]	; (8002f48 <HAL_RCC_OscConfig+0x4b8>)
 8002e92:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e96:	4a2c      	ldr	r2, [pc, #176]	; (8002f48 <HAL_RCC_OscConfig+0x4b8>)
 8002e98:	f043 0301 	orr.w	r3, r3, #1
 8002e9c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ea0:	f7fe fe38 	bl	8001b14 <HAL_GetTick>
 8002ea4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002ea6:	e008      	b.n	8002eba <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ea8:	f7fe fe34 	bl	8001b14 <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d901      	bls.n	8002eba <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e0fa      	b.n	80030b0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002eba:	4b23      	ldr	r3, [pc, #140]	; (8002f48 <HAL_RCC_OscConfig+0x4b8>)
 8002ebc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ec0:	f003 0302 	and.w	r3, r3, #2
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d0ef      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x418>
 8002ec8:	e01b      	b.n	8002f02 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002eca:	4b1f      	ldr	r3, [pc, #124]	; (8002f48 <HAL_RCC_OscConfig+0x4b8>)
 8002ecc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ed0:	4a1d      	ldr	r2, [pc, #116]	; (8002f48 <HAL_RCC_OscConfig+0x4b8>)
 8002ed2:	f023 0301 	bic.w	r3, r3, #1
 8002ed6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eda:	f7fe fe1b 	bl	8001b14 <HAL_GetTick>
 8002ede:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ee0:	e008      	b.n	8002ef4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ee2:	f7fe fe17 	bl	8001b14 <HAL_GetTick>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d901      	bls.n	8002ef4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	e0dd      	b.n	80030b0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ef4:	4b14      	ldr	r3, [pc, #80]	; (8002f48 <HAL_RCC_OscConfig+0x4b8>)
 8002ef6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002efa:	f003 0302 	and.w	r3, r3, #2
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d1ef      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	69db      	ldr	r3, [r3, #28]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	f000 80d1 	beq.w	80030ae <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f0c:	4b0e      	ldr	r3, [pc, #56]	; (8002f48 <HAL_RCC_OscConfig+0x4b8>)
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	f003 030c 	and.w	r3, r3, #12
 8002f14:	2b0c      	cmp	r3, #12
 8002f16:	f000 808b 	beq.w	8003030 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	69db      	ldr	r3, [r3, #28]
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d15e      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f22:	4b09      	ldr	r3, [pc, #36]	; (8002f48 <HAL_RCC_OscConfig+0x4b8>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a08      	ldr	r2, [pc, #32]	; (8002f48 <HAL_RCC_OscConfig+0x4b8>)
 8002f28:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f2e:	f7fe fdf1 	bl	8001b14 <HAL_GetTick>
 8002f32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f34:	e00c      	b.n	8002f50 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f36:	f7fe fded 	bl	8001b14 <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d905      	bls.n	8002f50 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e0b3      	b.n	80030b0 <HAL_RCC_OscConfig+0x620>
 8002f48:	40021000 	.word	0x40021000
 8002f4c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f50:	4b59      	ldr	r3, [pc, #356]	; (80030b8 <HAL_RCC_OscConfig+0x628>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d1ec      	bne.n	8002f36 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f5c:	4b56      	ldr	r3, [pc, #344]	; (80030b8 <HAL_RCC_OscConfig+0x628>)
 8002f5e:	68da      	ldr	r2, [r3, #12]
 8002f60:	4b56      	ldr	r3, [pc, #344]	; (80030bc <HAL_RCC_OscConfig+0x62c>)
 8002f62:	4013      	ands	r3, r2
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	6a11      	ldr	r1, [r2, #32]
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f6c:	3a01      	subs	r2, #1
 8002f6e:	0112      	lsls	r2, r2, #4
 8002f70:	4311      	orrs	r1, r2
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002f76:	0212      	lsls	r2, r2, #8
 8002f78:	4311      	orrs	r1, r2
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002f7e:	0852      	lsrs	r2, r2, #1
 8002f80:	3a01      	subs	r2, #1
 8002f82:	0552      	lsls	r2, r2, #21
 8002f84:	4311      	orrs	r1, r2
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002f8a:	0852      	lsrs	r2, r2, #1
 8002f8c:	3a01      	subs	r2, #1
 8002f8e:	0652      	lsls	r2, r2, #25
 8002f90:	4311      	orrs	r1, r2
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002f96:	06d2      	lsls	r2, r2, #27
 8002f98:	430a      	orrs	r2, r1
 8002f9a:	4947      	ldr	r1, [pc, #284]	; (80030b8 <HAL_RCC_OscConfig+0x628>)
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fa0:	4b45      	ldr	r3, [pc, #276]	; (80030b8 <HAL_RCC_OscConfig+0x628>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a44      	ldr	r2, [pc, #272]	; (80030b8 <HAL_RCC_OscConfig+0x628>)
 8002fa6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002faa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002fac:	4b42      	ldr	r3, [pc, #264]	; (80030b8 <HAL_RCC_OscConfig+0x628>)
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	4a41      	ldr	r2, [pc, #260]	; (80030b8 <HAL_RCC_OscConfig+0x628>)
 8002fb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fb6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb8:	f7fe fdac 	bl	8001b14 <HAL_GetTick>
 8002fbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fbe:	e008      	b.n	8002fd2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fc0:	f7fe fda8 	bl	8001b14 <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d901      	bls.n	8002fd2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	e06e      	b.n	80030b0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fd2:	4b39      	ldr	r3, [pc, #228]	; (80030b8 <HAL_RCC_OscConfig+0x628>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d0f0      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x530>
 8002fde:	e066      	b.n	80030ae <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fe0:	4b35      	ldr	r3, [pc, #212]	; (80030b8 <HAL_RCC_OscConfig+0x628>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a34      	ldr	r2, [pc, #208]	; (80030b8 <HAL_RCC_OscConfig+0x628>)
 8002fe6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fea:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002fec:	4b32      	ldr	r3, [pc, #200]	; (80030b8 <HAL_RCC_OscConfig+0x628>)
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	4a31      	ldr	r2, [pc, #196]	; (80030b8 <HAL_RCC_OscConfig+0x628>)
 8002ff2:	f023 0303 	bic.w	r3, r3, #3
 8002ff6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002ff8:	4b2f      	ldr	r3, [pc, #188]	; (80030b8 <HAL_RCC_OscConfig+0x628>)
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	4a2e      	ldr	r2, [pc, #184]	; (80030b8 <HAL_RCC_OscConfig+0x628>)
 8002ffe:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003002:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003006:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003008:	f7fe fd84 	bl	8001b14 <HAL_GetTick>
 800300c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800300e:	e008      	b.n	8003022 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003010:	f7fe fd80 	bl	8001b14 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b02      	cmp	r3, #2
 800301c:	d901      	bls.n	8003022 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e046      	b.n	80030b0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003022:	4b25      	ldr	r3, [pc, #148]	; (80030b8 <HAL_RCC_OscConfig+0x628>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d1f0      	bne.n	8003010 <HAL_RCC_OscConfig+0x580>
 800302e:	e03e      	b.n	80030ae <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	69db      	ldr	r3, [r3, #28]
 8003034:	2b01      	cmp	r3, #1
 8003036:	d101      	bne.n	800303c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e039      	b.n	80030b0 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800303c:	4b1e      	ldr	r3, [pc, #120]	; (80030b8 <HAL_RCC_OscConfig+0x628>)
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	f003 0203 	and.w	r2, r3, #3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a1b      	ldr	r3, [r3, #32]
 800304c:	429a      	cmp	r2, r3
 800304e:	d12c      	bne.n	80030aa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305a:	3b01      	subs	r3, #1
 800305c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800305e:	429a      	cmp	r2, r3
 8003060:	d123      	bne.n	80030aa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800306c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800306e:	429a      	cmp	r2, r3
 8003070:	d11b      	bne.n	80030aa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800307c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800307e:	429a      	cmp	r2, r3
 8003080:	d113      	bne.n	80030aa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800308c:	085b      	lsrs	r3, r3, #1
 800308e:	3b01      	subs	r3, #1
 8003090:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003092:	429a      	cmp	r2, r3
 8003094:	d109      	bne.n	80030aa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030a0:	085b      	lsrs	r3, r3, #1
 80030a2:	3b01      	subs	r3, #1
 80030a4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d001      	beq.n	80030ae <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e000      	b.n	80030b0 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80030ae:	2300      	movs	r3, #0
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3720      	adds	r7, #32
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	40021000 	.word	0x40021000
 80030bc:	019f800c 	.word	0x019f800c

080030c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b086      	sub	sp, #24
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80030ca:	2300      	movs	r3, #0
 80030cc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d101      	bne.n	80030d8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e11e      	b.n	8003316 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030d8:	4b91      	ldr	r3, [pc, #580]	; (8003320 <HAL_RCC_ClockConfig+0x260>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 030f 	and.w	r3, r3, #15
 80030e0:	683a      	ldr	r2, [r7, #0]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d910      	bls.n	8003108 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030e6:	4b8e      	ldr	r3, [pc, #568]	; (8003320 <HAL_RCC_ClockConfig+0x260>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f023 020f 	bic.w	r2, r3, #15
 80030ee:	498c      	ldr	r1, [pc, #560]	; (8003320 <HAL_RCC_ClockConfig+0x260>)
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030f6:	4b8a      	ldr	r3, [pc, #552]	; (8003320 <HAL_RCC_ClockConfig+0x260>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 030f 	and.w	r3, r3, #15
 80030fe:	683a      	ldr	r2, [r7, #0]
 8003100:	429a      	cmp	r2, r3
 8003102:	d001      	beq.n	8003108 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e106      	b.n	8003316 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0301 	and.w	r3, r3, #1
 8003110:	2b00      	cmp	r3, #0
 8003112:	d073      	beq.n	80031fc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	2b03      	cmp	r3, #3
 800311a:	d129      	bne.n	8003170 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800311c:	4b81      	ldr	r3, [pc, #516]	; (8003324 <HAL_RCC_ClockConfig+0x264>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d101      	bne.n	800312c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e0f4      	b.n	8003316 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800312c:	f000 f99e 	bl	800346c <RCC_GetSysClockFreqFromPLLSource>
 8003130:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	4a7c      	ldr	r2, [pc, #496]	; (8003328 <HAL_RCC_ClockConfig+0x268>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d93f      	bls.n	80031ba <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800313a:	4b7a      	ldr	r3, [pc, #488]	; (8003324 <HAL_RCC_ClockConfig+0x264>)
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d009      	beq.n	800315a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800314e:	2b00      	cmp	r3, #0
 8003150:	d033      	beq.n	80031ba <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003156:	2b00      	cmp	r3, #0
 8003158:	d12f      	bne.n	80031ba <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800315a:	4b72      	ldr	r3, [pc, #456]	; (8003324 <HAL_RCC_ClockConfig+0x264>)
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003162:	4a70      	ldr	r2, [pc, #448]	; (8003324 <HAL_RCC_ClockConfig+0x264>)
 8003164:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003168:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800316a:	2380      	movs	r3, #128	; 0x80
 800316c:	617b      	str	r3, [r7, #20]
 800316e:	e024      	b.n	80031ba <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	2b02      	cmp	r3, #2
 8003176:	d107      	bne.n	8003188 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003178:	4b6a      	ldr	r3, [pc, #424]	; (8003324 <HAL_RCC_ClockConfig+0x264>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d109      	bne.n	8003198 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e0c6      	b.n	8003316 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003188:	4b66      	ldr	r3, [pc, #408]	; (8003324 <HAL_RCC_ClockConfig+0x264>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003190:	2b00      	cmp	r3, #0
 8003192:	d101      	bne.n	8003198 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e0be      	b.n	8003316 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003198:	f000 f8ce 	bl	8003338 <HAL_RCC_GetSysClockFreq>
 800319c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	4a61      	ldr	r2, [pc, #388]	; (8003328 <HAL_RCC_ClockConfig+0x268>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d909      	bls.n	80031ba <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80031a6:	4b5f      	ldr	r3, [pc, #380]	; (8003324 <HAL_RCC_ClockConfig+0x264>)
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80031ae:	4a5d      	ldr	r2, [pc, #372]	; (8003324 <HAL_RCC_ClockConfig+0x264>)
 80031b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031b4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80031b6:	2380      	movs	r3, #128	; 0x80
 80031b8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80031ba:	4b5a      	ldr	r3, [pc, #360]	; (8003324 <HAL_RCC_ClockConfig+0x264>)
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	f023 0203 	bic.w	r2, r3, #3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	4957      	ldr	r1, [pc, #348]	; (8003324 <HAL_RCC_ClockConfig+0x264>)
 80031c8:	4313      	orrs	r3, r2
 80031ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031cc:	f7fe fca2 	bl	8001b14 <HAL_GetTick>
 80031d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031d2:	e00a      	b.n	80031ea <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031d4:	f7fe fc9e 	bl	8001b14 <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	f241 3288 	movw	r2, #5000	; 0x1388
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d901      	bls.n	80031ea <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e095      	b.n	8003316 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ea:	4b4e      	ldr	r3, [pc, #312]	; (8003324 <HAL_RCC_ClockConfig+0x264>)
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	f003 020c 	and.w	r2, r3, #12
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d1eb      	bne.n	80031d4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0302 	and.w	r3, r3, #2
 8003204:	2b00      	cmp	r3, #0
 8003206:	d023      	beq.n	8003250 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0304 	and.w	r3, r3, #4
 8003210:	2b00      	cmp	r3, #0
 8003212:	d005      	beq.n	8003220 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003214:	4b43      	ldr	r3, [pc, #268]	; (8003324 <HAL_RCC_ClockConfig+0x264>)
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	4a42      	ldr	r2, [pc, #264]	; (8003324 <HAL_RCC_ClockConfig+0x264>)
 800321a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800321e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0308 	and.w	r3, r3, #8
 8003228:	2b00      	cmp	r3, #0
 800322a:	d007      	beq.n	800323c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800322c:	4b3d      	ldr	r3, [pc, #244]	; (8003324 <HAL_RCC_ClockConfig+0x264>)
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003234:	4a3b      	ldr	r2, [pc, #236]	; (8003324 <HAL_RCC_ClockConfig+0x264>)
 8003236:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800323a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800323c:	4b39      	ldr	r3, [pc, #228]	; (8003324 <HAL_RCC_ClockConfig+0x264>)
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	4936      	ldr	r1, [pc, #216]	; (8003324 <HAL_RCC_ClockConfig+0x264>)
 800324a:	4313      	orrs	r3, r2
 800324c:	608b      	str	r3, [r1, #8]
 800324e:	e008      	b.n	8003262 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	2b80      	cmp	r3, #128	; 0x80
 8003254:	d105      	bne.n	8003262 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003256:	4b33      	ldr	r3, [pc, #204]	; (8003324 <HAL_RCC_ClockConfig+0x264>)
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	4a32      	ldr	r2, [pc, #200]	; (8003324 <HAL_RCC_ClockConfig+0x264>)
 800325c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003260:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003262:	4b2f      	ldr	r3, [pc, #188]	; (8003320 <HAL_RCC_ClockConfig+0x260>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 030f 	and.w	r3, r3, #15
 800326a:	683a      	ldr	r2, [r7, #0]
 800326c:	429a      	cmp	r2, r3
 800326e:	d21d      	bcs.n	80032ac <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003270:	4b2b      	ldr	r3, [pc, #172]	; (8003320 <HAL_RCC_ClockConfig+0x260>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f023 020f 	bic.w	r2, r3, #15
 8003278:	4929      	ldr	r1, [pc, #164]	; (8003320 <HAL_RCC_ClockConfig+0x260>)
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	4313      	orrs	r3, r2
 800327e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003280:	f7fe fc48 	bl	8001b14 <HAL_GetTick>
 8003284:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003286:	e00a      	b.n	800329e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003288:	f7fe fc44 	bl	8001b14 <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	f241 3288 	movw	r2, #5000	; 0x1388
 8003296:	4293      	cmp	r3, r2
 8003298:	d901      	bls.n	800329e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e03b      	b.n	8003316 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800329e:	4b20      	ldr	r3, [pc, #128]	; (8003320 <HAL_RCC_ClockConfig+0x260>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 030f 	and.w	r3, r3, #15
 80032a6:	683a      	ldr	r2, [r7, #0]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d1ed      	bne.n	8003288 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0304 	and.w	r3, r3, #4
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d008      	beq.n	80032ca <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032b8:	4b1a      	ldr	r3, [pc, #104]	; (8003324 <HAL_RCC_ClockConfig+0x264>)
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	4917      	ldr	r1, [pc, #92]	; (8003324 <HAL_RCC_ClockConfig+0x264>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0308 	and.w	r3, r3, #8
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d009      	beq.n	80032ea <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032d6:	4b13      	ldr	r3, [pc, #76]	; (8003324 <HAL_RCC_ClockConfig+0x264>)
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	691b      	ldr	r3, [r3, #16]
 80032e2:	00db      	lsls	r3, r3, #3
 80032e4:	490f      	ldr	r1, [pc, #60]	; (8003324 <HAL_RCC_ClockConfig+0x264>)
 80032e6:	4313      	orrs	r3, r2
 80032e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80032ea:	f000 f825 	bl	8003338 <HAL_RCC_GetSysClockFreq>
 80032ee:	4602      	mov	r2, r0
 80032f0:	4b0c      	ldr	r3, [pc, #48]	; (8003324 <HAL_RCC_ClockConfig+0x264>)
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	091b      	lsrs	r3, r3, #4
 80032f6:	f003 030f 	and.w	r3, r3, #15
 80032fa:	490c      	ldr	r1, [pc, #48]	; (800332c <HAL_RCC_ClockConfig+0x26c>)
 80032fc:	5ccb      	ldrb	r3, [r1, r3]
 80032fe:	f003 031f 	and.w	r3, r3, #31
 8003302:	fa22 f303 	lsr.w	r3, r2, r3
 8003306:	4a0a      	ldr	r2, [pc, #40]	; (8003330 <HAL_RCC_ClockConfig+0x270>)
 8003308:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800330a:	4b0a      	ldr	r3, [pc, #40]	; (8003334 <HAL_RCC_ClockConfig+0x274>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4618      	mov	r0, r3
 8003310:	f7fe fbb4 	bl	8001a7c <HAL_InitTick>
 8003314:	4603      	mov	r3, r0
}
 8003316:	4618      	mov	r0, r3
 8003318:	3718      	adds	r7, #24
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	40022000 	.word	0x40022000
 8003324:	40021000 	.word	0x40021000
 8003328:	04c4b400 	.word	0x04c4b400
 800332c:	08004fb8 	.word	0x08004fb8
 8003330:	20000000 	.word	0x20000000
 8003334:	20000004 	.word	0x20000004

08003338 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003338:	b480      	push	{r7}
 800333a:	b087      	sub	sp, #28
 800333c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800333e:	4b2c      	ldr	r3, [pc, #176]	; (80033f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	f003 030c 	and.w	r3, r3, #12
 8003346:	2b04      	cmp	r3, #4
 8003348:	d102      	bne.n	8003350 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800334a:	4b2a      	ldr	r3, [pc, #168]	; (80033f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800334c:	613b      	str	r3, [r7, #16]
 800334e:	e047      	b.n	80033e0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003350:	4b27      	ldr	r3, [pc, #156]	; (80033f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	f003 030c 	and.w	r3, r3, #12
 8003358:	2b08      	cmp	r3, #8
 800335a:	d102      	bne.n	8003362 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800335c:	4b26      	ldr	r3, [pc, #152]	; (80033f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800335e:	613b      	str	r3, [r7, #16]
 8003360:	e03e      	b.n	80033e0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003362:	4b23      	ldr	r3, [pc, #140]	; (80033f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f003 030c 	and.w	r3, r3, #12
 800336a:	2b0c      	cmp	r3, #12
 800336c:	d136      	bne.n	80033dc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800336e:	4b20      	ldr	r3, [pc, #128]	; (80033f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	f003 0303 	and.w	r3, r3, #3
 8003376:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003378:	4b1d      	ldr	r3, [pc, #116]	; (80033f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	091b      	lsrs	r3, r3, #4
 800337e:	f003 030f 	and.w	r3, r3, #15
 8003382:	3301      	adds	r3, #1
 8003384:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2b03      	cmp	r3, #3
 800338a:	d10c      	bne.n	80033a6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800338c:	4a1a      	ldr	r2, [pc, #104]	; (80033f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	fbb2 f3f3 	udiv	r3, r2, r3
 8003394:	4a16      	ldr	r2, [pc, #88]	; (80033f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003396:	68d2      	ldr	r2, [r2, #12]
 8003398:	0a12      	lsrs	r2, r2, #8
 800339a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800339e:	fb02 f303 	mul.w	r3, r2, r3
 80033a2:	617b      	str	r3, [r7, #20]
      break;
 80033a4:	e00c      	b.n	80033c0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80033a6:	4a13      	ldr	r2, [pc, #76]	; (80033f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ae:	4a10      	ldr	r2, [pc, #64]	; (80033f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80033b0:	68d2      	ldr	r2, [r2, #12]
 80033b2:	0a12      	lsrs	r2, r2, #8
 80033b4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80033b8:	fb02 f303 	mul.w	r3, r2, r3
 80033bc:	617b      	str	r3, [r7, #20]
      break;
 80033be:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80033c0:	4b0b      	ldr	r3, [pc, #44]	; (80033f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	0e5b      	lsrs	r3, r3, #25
 80033c6:	f003 0303 	and.w	r3, r3, #3
 80033ca:	3301      	adds	r3, #1
 80033cc:	005b      	lsls	r3, r3, #1
 80033ce:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80033d0:	697a      	ldr	r2, [r7, #20]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033d8:	613b      	str	r3, [r7, #16]
 80033da:	e001      	b.n	80033e0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80033dc:	2300      	movs	r3, #0
 80033de:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80033e0:	693b      	ldr	r3, [r7, #16]
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	371c      	adds	r7, #28
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	40021000 	.word	0x40021000
 80033f4:	00f42400 	.word	0x00f42400
 80033f8:	007a1200 	.word	0x007a1200

080033fc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033fc:	b480      	push	{r7}
 80033fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003400:	4b03      	ldr	r3, [pc, #12]	; (8003410 <HAL_RCC_GetHCLKFreq+0x14>)
 8003402:	681b      	ldr	r3, [r3, #0]
}
 8003404:	4618      	mov	r0, r3
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	20000000 	.word	0x20000000

08003414 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003418:	f7ff fff0 	bl	80033fc <HAL_RCC_GetHCLKFreq>
 800341c:	4602      	mov	r2, r0
 800341e:	4b06      	ldr	r3, [pc, #24]	; (8003438 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	0a1b      	lsrs	r3, r3, #8
 8003424:	f003 0307 	and.w	r3, r3, #7
 8003428:	4904      	ldr	r1, [pc, #16]	; (800343c <HAL_RCC_GetPCLK1Freq+0x28>)
 800342a:	5ccb      	ldrb	r3, [r1, r3]
 800342c:	f003 031f 	and.w	r3, r3, #31
 8003430:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003434:	4618      	mov	r0, r3
 8003436:	bd80      	pop	{r7, pc}
 8003438:	40021000 	.word	0x40021000
 800343c:	08004fc8 	.word	0x08004fc8

08003440 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003444:	f7ff ffda 	bl	80033fc <HAL_RCC_GetHCLKFreq>
 8003448:	4602      	mov	r2, r0
 800344a:	4b06      	ldr	r3, [pc, #24]	; (8003464 <HAL_RCC_GetPCLK2Freq+0x24>)
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	0adb      	lsrs	r3, r3, #11
 8003450:	f003 0307 	and.w	r3, r3, #7
 8003454:	4904      	ldr	r1, [pc, #16]	; (8003468 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003456:	5ccb      	ldrb	r3, [r1, r3]
 8003458:	f003 031f 	and.w	r3, r3, #31
 800345c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003460:	4618      	mov	r0, r3
 8003462:	bd80      	pop	{r7, pc}
 8003464:	40021000 	.word	0x40021000
 8003468:	08004fc8 	.word	0x08004fc8

0800346c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800346c:	b480      	push	{r7}
 800346e:	b087      	sub	sp, #28
 8003470:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003472:	4b1e      	ldr	r3, [pc, #120]	; (80034ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	f003 0303 	and.w	r3, r3, #3
 800347a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800347c:	4b1b      	ldr	r3, [pc, #108]	; (80034ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	091b      	lsrs	r3, r3, #4
 8003482:	f003 030f 	and.w	r3, r3, #15
 8003486:	3301      	adds	r3, #1
 8003488:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	2b03      	cmp	r3, #3
 800348e:	d10c      	bne.n	80034aa <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003490:	4a17      	ldr	r2, [pc, #92]	; (80034f0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	fbb2 f3f3 	udiv	r3, r2, r3
 8003498:	4a14      	ldr	r2, [pc, #80]	; (80034ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800349a:	68d2      	ldr	r2, [r2, #12]
 800349c:	0a12      	lsrs	r2, r2, #8
 800349e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80034a2:	fb02 f303 	mul.w	r3, r2, r3
 80034a6:	617b      	str	r3, [r7, #20]
    break;
 80034a8:	e00c      	b.n	80034c4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80034aa:	4a12      	ldr	r2, [pc, #72]	; (80034f4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80034b2:	4a0e      	ldr	r2, [pc, #56]	; (80034ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80034b4:	68d2      	ldr	r2, [r2, #12]
 80034b6:	0a12      	lsrs	r2, r2, #8
 80034b8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80034bc:	fb02 f303 	mul.w	r3, r2, r3
 80034c0:	617b      	str	r3, [r7, #20]
    break;
 80034c2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80034c4:	4b09      	ldr	r3, [pc, #36]	; (80034ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	0e5b      	lsrs	r3, r3, #25
 80034ca:	f003 0303 	and.w	r3, r3, #3
 80034ce:	3301      	adds	r3, #1
 80034d0:	005b      	lsls	r3, r3, #1
 80034d2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80034d4:	697a      	ldr	r2, [r7, #20]
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034dc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80034de:	687b      	ldr	r3, [r7, #4]
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	371c      	adds	r7, #28
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr
 80034ec:	40021000 	.word	0x40021000
 80034f0:	007a1200 	.word	0x007a1200
 80034f4:	00f42400 	.word	0x00f42400

080034f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b086      	sub	sp, #24
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003500:	2300      	movs	r3, #0
 8003502:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003504:	2300      	movs	r3, #0
 8003506:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003510:	2b00      	cmp	r3, #0
 8003512:	f000 8098 	beq.w	8003646 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003516:	2300      	movs	r3, #0
 8003518:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800351a:	4b43      	ldr	r3, [pc, #268]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800351c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800351e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d10d      	bne.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003526:	4b40      	ldr	r3, [pc, #256]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800352a:	4a3f      	ldr	r2, [pc, #252]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800352c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003530:	6593      	str	r3, [r2, #88]	; 0x58
 8003532:	4b3d      	ldr	r3, [pc, #244]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800353a:	60bb      	str	r3, [r7, #8]
 800353c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800353e:	2301      	movs	r3, #1
 8003540:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003542:	4b3a      	ldr	r3, [pc, #232]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a39      	ldr	r2, [pc, #228]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003548:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800354c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800354e:	f7fe fae1 	bl	8001b14 <HAL_GetTick>
 8003552:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003554:	e009      	b.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003556:	f7fe fadd 	bl	8001b14 <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	2b02      	cmp	r3, #2
 8003562:	d902      	bls.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	74fb      	strb	r3, [r7, #19]
        break;
 8003568:	e005      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800356a:	4b30      	ldr	r3, [pc, #192]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003572:	2b00      	cmp	r3, #0
 8003574:	d0ef      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003576:	7cfb      	ldrb	r3, [r7, #19]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d159      	bne.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800357c:	4b2a      	ldr	r3, [pc, #168]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800357e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003582:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003586:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d01e      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003592:	697a      	ldr	r2, [r7, #20]
 8003594:	429a      	cmp	r2, r3
 8003596:	d019      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003598:	4b23      	ldr	r3, [pc, #140]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800359a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800359e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035a2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80035a4:	4b20      	ldr	r3, [pc, #128]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035aa:	4a1f      	ldr	r2, [pc, #124]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80035b4:	4b1c      	ldr	r3, [pc, #112]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ba:	4a1b      	ldr	r2, [pc, #108]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80035c4:	4a18      	ldr	r2, [pc, #96]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	f003 0301 	and.w	r3, r3, #1
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d016      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035d6:	f7fe fa9d 	bl	8001b14 <HAL_GetTick>
 80035da:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035dc:	e00b      	b.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035de:	f7fe fa99 	bl	8001b14 <HAL_GetTick>
 80035e2:	4602      	mov	r2, r0
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d902      	bls.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	74fb      	strb	r3, [r7, #19]
            break;
 80035f4:	e006      	b.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035f6:	4b0c      	ldr	r3, [pc, #48]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035fc:	f003 0302 	and.w	r3, r3, #2
 8003600:	2b00      	cmp	r3, #0
 8003602:	d0ec      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003604:	7cfb      	ldrb	r3, [r7, #19]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d10b      	bne.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800360a:	4b07      	ldr	r3, [pc, #28]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800360c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003610:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003618:	4903      	ldr	r1, [pc, #12]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800361a:	4313      	orrs	r3, r2
 800361c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003620:	e008      	b.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003622:	7cfb      	ldrb	r3, [r7, #19]
 8003624:	74bb      	strb	r3, [r7, #18]
 8003626:	e005      	b.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003628:	40021000 	.word	0x40021000
 800362c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003630:	7cfb      	ldrb	r3, [r7, #19]
 8003632:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003634:	7c7b      	ldrb	r3, [r7, #17]
 8003636:	2b01      	cmp	r3, #1
 8003638:	d105      	bne.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800363a:	4ba6      	ldr	r3, [pc, #664]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800363c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800363e:	4aa5      	ldr	r2, [pc, #660]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003640:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003644:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0301 	and.w	r3, r3, #1
 800364e:	2b00      	cmp	r3, #0
 8003650:	d00a      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003652:	4ba0      	ldr	r3, [pc, #640]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003654:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003658:	f023 0203 	bic.w	r2, r3, #3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	499c      	ldr	r1, [pc, #624]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003662:	4313      	orrs	r3, r2
 8003664:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0302 	and.w	r3, r3, #2
 8003670:	2b00      	cmp	r3, #0
 8003672:	d00a      	beq.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003674:	4b97      	ldr	r3, [pc, #604]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800367a:	f023 020c 	bic.w	r2, r3, #12
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	4994      	ldr	r1, [pc, #592]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003684:	4313      	orrs	r3, r2
 8003686:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0304 	and.w	r3, r3, #4
 8003692:	2b00      	cmp	r3, #0
 8003694:	d00a      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003696:	4b8f      	ldr	r3, [pc, #572]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003698:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800369c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	498b      	ldr	r1, [pc, #556]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036a6:	4313      	orrs	r3, r2
 80036a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0308 	and.w	r3, r3, #8
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d00a      	beq.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80036b8:	4b86      	ldr	r3, [pc, #536]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036be:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	4983      	ldr	r1, [pc, #524]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036c8:	4313      	orrs	r3, r2
 80036ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0320 	and.w	r3, r3, #32
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d00a      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80036da:	4b7e      	ldr	r3, [pc, #504]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036e0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	695b      	ldr	r3, [r3, #20]
 80036e8:	497a      	ldr	r1, [pc, #488]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036ea:	4313      	orrs	r3, r2
 80036ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d00a      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80036fc:	4b75      	ldr	r3, [pc, #468]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003702:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	699b      	ldr	r3, [r3, #24]
 800370a:	4972      	ldr	r1, [pc, #456]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800370c:	4313      	orrs	r3, r2
 800370e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800371a:	2b00      	cmp	r3, #0
 800371c:	d00a      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800371e:	4b6d      	ldr	r3, [pc, #436]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003720:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003724:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	69db      	ldr	r3, [r3, #28]
 800372c:	4969      	ldr	r1, [pc, #420]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800372e:	4313      	orrs	r3, r2
 8003730:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800373c:	2b00      	cmp	r3, #0
 800373e:	d00a      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003740:	4b64      	ldr	r3, [pc, #400]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003746:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a1b      	ldr	r3, [r3, #32]
 800374e:	4961      	ldr	r1, [pc, #388]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003750:	4313      	orrs	r3, r2
 8003752:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800375e:	2b00      	cmp	r3, #0
 8003760:	d00a      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003762:	4b5c      	ldr	r3, [pc, #368]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003764:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003768:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003770:	4958      	ldr	r1, [pc, #352]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003772:	4313      	orrs	r3, r2
 8003774:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003780:	2b00      	cmp	r3, #0
 8003782:	d015      	beq.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003784:	4b53      	ldr	r3, [pc, #332]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800378a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003792:	4950      	ldr	r1, [pc, #320]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003794:	4313      	orrs	r3, r2
 8003796:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800379e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037a2:	d105      	bne.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037a4:	4b4b      	ldr	r3, [pc, #300]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	4a4a      	ldr	r2, [pc, #296]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037ae:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d015      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80037bc:	4b45      	ldr	r3, [pc, #276]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037c2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ca:	4942      	ldr	r1, [pc, #264]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037cc:	4313      	orrs	r3, r2
 80037ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037da:	d105      	bne.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037dc:	4b3d      	ldr	r3, [pc, #244]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	4a3c      	ldr	r2, [pc, #240]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037e6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d015      	beq.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80037f4:	4b37      	ldr	r3, [pc, #220]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037fa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003802:	4934      	ldr	r1, [pc, #208]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003804:	4313      	orrs	r3, r2
 8003806:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003812:	d105      	bne.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003814:	4b2f      	ldr	r3, [pc, #188]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	4a2e      	ldr	r2, [pc, #184]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800381a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800381e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d015      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800382c:	4b29      	ldr	r3, [pc, #164]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800382e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003832:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800383a:	4926      	ldr	r1, [pc, #152]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800383c:	4313      	orrs	r3, r2
 800383e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003846:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800384a:	d105      	bne.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800384c:	4b21      	ldr	r3, [pc, #132]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	4a20      	ldr	r2, [pc, #128]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003852:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003856:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d015      	beq.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003864:	4b1b      	ldr	r3, [pc, #108]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800386a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003872:	4918      	ldr	r1, [pc, #96]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003874:	4313      	orrs	r3, r2
 8003876:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800387e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003882:	d105      	bne.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003884:	4b13      	ldr	r3, [pc, #76]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	4a12      	ldr	r2, [pc, #72]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800388a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800388e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d015      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800389c:	4b0d      	ldr	r3, [pc, #52]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800389e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038a2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038aa:	490a      	ldr	r1, [pc, #40]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038ac:	4313      	orrs	r3, r2
 80038ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80038ba:	d105      	bne.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80038bc:	4b05      	ldr	r3, [pc, #20]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	4a04      	ldr	r2, [pc, #16]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038c6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80038c8:	7cbb      	ldrb	r3, [r7, #18]
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3718      	adds	r7, #24
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	40021000 	.word	0x40021000

080038d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d101      	bne.n	80038ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e049      	b.n	800397e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d106      	bne.n	8003904 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f7fd ffa6 	bl	8001850 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2202      	movs	r2, #2
 8003908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	3304      	adds	r3, #4
 8003914:	4619      	mov	r1, r3
 8003916:	4610      	mov	r0, r2
 8003918:	f000 fb42 	bl	8003fa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	3708      	adds	r7, #8
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
	...

08003988 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003988:	b480      	push	{r7}
 800398a:	b085      	sub	sp, #20
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003996:	b2db      	uxtb	r3, r3
 8003998:	2b01      	cmp	r3, #1
 800399a:	d001      	beq.n	80039a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e04a      	b.n	8003a36 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2202      	movs	r2, #2
 80039a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68da      	ldr	r2, [r3, #12]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f042 0201 	orr.w	r2, r2, #1
 80039b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a21      	ldr	r2, [pc, #132]	; (8003a44 <HAL_TIM_Base_Start_IT+0xbc>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d018      	beq.n	80039f4 <HAL_TIM_Base_Start_IT+0x6c>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039ca:	d013      	beq.n	80039f4 <HAL_TIM_Base_Start_IT+0x6c>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a1d      	ldr	r2, [pc, #116]	; (8003a48 <HAL_TIM_Base_Start_IT+0xc0>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d00e      	beq.n	80039f4 <HAL_TIM_Base_Start_IT+0x6c>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a1c      	ldr	r2, [pc, #112]	; (8003a4c <HAL_TIM_Base_Start_IT+0xc4>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d009      	beq.n	80039f4 <HAL_TIM_Base_Start_IT+0x6c>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a1a      	ldr	r2, [pc, #104]	; (8003a50 <HAL_TIM_Base_Start_IT+0xc8>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d004      	beq.n	80039f4 <HAL_TIM_Base_Start_IT+0x6c>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a19      	ldr	r2, [pc, #100]	; (8003a54 <HAL_TIM_Base_Start_IT+0xcc>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d115      	bne.n	8003a20 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	689a      	ldr	r2, [r3, #8]
 80039fa:	4b17      	ldr	r3, [pc, #92]	; (8003a58 <HAL_TIM_Base_Start_IT+0xd0>)
 80039fc:	4013      	ands	r3, r2
 80039fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2b06      	cmp	r3, #6
 8003a04:	d015      	beq.n	8003a32 <HAL_TIM_Base_Start_IT+0xaa>
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a0c:	d011      	beq.n	8003a32 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f042 0201 	orr.w	r2, r2, #1
 8003a1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a1e:	e008      	b.n	8003a32 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f042 0201 	orr.w	r2, r2, #1
 8003a2e:	601a      	str	r2, [r3, #0]
 8003a30:	e000      	b.n	8003a34 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a32:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003a34:	2300      	movs	r3, #0
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3714      	adds	r7, #20
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr
 8003a42:	bf00      	nop
 8003a44:	40012c00 	.word	0x40012c00
 8003a48:	40000400 	.word	0x40000400
 8003a4c:	40000800 	.word	0x40000800
 8003a50:	40013400 	.word	0x40013400
 8003a54:	40014000 	.word	0x40014000
 8003a58:	00010007 	.word	0x00010007

08003a5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b082      	sub	sp, #8
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	f003 0302 	and.w	r3, r3, #2
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d122      	bne.n	8003ab8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	f003 0302 	and.w	r3, r3, #2
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d11b      	bne.n	8003ab8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f06f 0202 	mvn.w	r2, #2
 8003a88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	699b      	ldr	r3, [r3, #24]
 8003a96:	f003 0303 	and.w	r3, r3, #3
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d003      	beq.n	8003aa6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 fa60 	bl	8003f64 <HAL_TIM_IC_CaptureCallback>
 8003aa4:	e005      	b.n	8003ab2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 fa52 	bl	8003f50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f000 fa63 	bl	8003f78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	f003 0304 	and.w	r3, r3, #4
 8003ac2:	2b04      	cmp	r3, #4
 8003ac4:	d122      	bne.n	8003b0c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	f003 0304 	and.w	r3, r3, #4
 8003ad0:	2b04      	cmp	r3, #4
 8003ad2:	d11b      	bne.n	8003b0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f06f 0204 	mvn.w	r2, #4
 8003adc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2202      	movs	r2, #2
 8003ae2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	699b      	ldr	r3, [r3, #24]
 8003aea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d003      	beq.n	8003afa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f000 fa36 	bl	8003f64 <HAL_TIM_IC_CaptureCallback>
 8003af8:	e005      	b.n	8003b06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f000 fa28 	bl	8003f50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f000 fa39 	bl	8003f78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	f003 0308 	and.w	r3, r3, #8
 8003b16:	2b08      	cmp	r3, #8
 8003b18:	d122      	bne.n	8003b60 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	f003 0308 	and.w	r3, r3, #8
 8003b24:	2b08      	cmp	r3, #8
 8003b26:	d11b      	bne.n	8003b60 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f06f 0208 	mvn.w	r2, #8
 8003b30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2204      	movs	r2, #4
 8003b36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	69db      	ldr	r3, [r3, #28]
 8003b3e:	f003 0303 	and.w	r3, r3, #3
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d003      	beq.n	8003b4e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f000 fa0c 	bl	8003f64 <HAL_TIM_IC_CaptureCallback>
 8003b4c:	e005      	b.n	8003b5a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f000 f9fe 	bl	8003f50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f000 fa0f 	bl	8003f78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	f003 0310 	and.w	r3, r3, #16
 8003b6a:	2b10      	cmp	r3, #16
 8003b6c:	d122      	bne.n	8003bb4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	f003 0310 	and.w	r3, r3, #16
 8003b78:	2b10      	cmp	r3, #16
 8003b7a:	d11b      	bne.n	8003bb4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f06f 0210 	mvn.w	r2, #16
 8003b84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2208      	movs	r2, #8
 8003b8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	69db      	ldr	r3, [r3, #28]
 8003b92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d003      	beq.n	8003ba2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 f9e2 	bl	8003f64 <HAL_TIM_IC_CaptureCallback>
 8003ba0:	e005      	b.n	8003bae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f000 f9d4 	bl	8003f50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f000 f9e5 	bl	8003f78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	f003 0301 	and.w	r3, r3, #1
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d10e      	bne.n	8003be0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	f003 0301 	and.w	r3, r3, #1
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d107      	bne.n	8003be0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f06f 0201 	mvn.w	r2, #1
 8003bd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f7fc fdec 	bl	80007b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	691b      	ldr	r3, [r3, #16]
 8003be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bea:	2b80      	cmp	r3, #128	; 0x80
 8003bec:	d10e      	bne.n	8003c0c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bf8:	2b80      	cmp	r3, #128	; 0x80
 8003bfa:	d107      	bne.n	8003c0c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f000 fb82 	bl	8004310 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	691b      	ldr	r3, [r3, #16]
 8003c12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c1a:	d10e      	bne.n	8003c3a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c26:	2b80      	cmp	r3, #128	; 0x80
 8003c28:	d107      	bne.n	8003c3a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003c32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f000 fb75 	bl	8004324 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	691b      	ldr	r3, [r3, #16]
 8003c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c44:	2b40      	cmp	r3, #64	; 0x40
 8003c46:	d10e      	bne.n	8003c66 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c52:	2b40      	cmp	r3, #64	; 0x40
 8003c54:	d107      	bne.n	8003c66 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f000 f993 	bl	8003f8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	691b      	ldr	r3, [r3, #16]
 8003c6c:	f003 0320 	and.w	r3, r3, #32
 8003c70:	2b20      	cmp	r3, #32
 8003c72:	d10e      	bne.n	8003c92 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	f003 0320 	and.w	r3, r3, #32
 8003c7e:	2b20      	cmp	r3, #32
 8003c80:	d107      	bne.n	8003c92 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f06f 0220 	mvn.w	r2, #32
 8003c8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f000 fb35 	bl	80042fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	691b      	ldr	r3, [r3, #16]
 8003c98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ca0:	d10f      	bne.n	8003cc2 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cb0:	d107      	bne.n	8003cc2 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8003cba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f000 fb3b 	bl	8004338 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	691b      	ldr	r3, [r3, #16]
 8003cc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ccc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003cd0:	d10f      	bne.n	8003cf2 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cdc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ce0:	d107      	bne.n	8003cf2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8003cea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f000 fb2d 	bl	800434c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	691b      	ldr	r3, [r3, #16]
 8003cf8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cfc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d00:	d10f      	bne.n	8003d22 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d10:	d107      	bne.n	8003d22 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8003d1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f000 fb1f 	bl	8004360 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	691b      	ldr	r3, [r3, #16]
 8003d28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d2c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003d30:	d10f      	bne.n	8003d52 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d3c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003d40:	d107      	bne.n	8003d52 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8003d4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f000 fb11 	bl	8004374 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d52:	bf00      	nop
 8003d54:	3708      	adds	r7, #8
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
	...

08003d5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d66:	2300      	movs	r3, #0
 8003d68:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d101      	bne.n	8003d78 <HAL_TIM_ConfigClockSource+0x1c>
 8003d74:	2302      	movs	r3, #2
 8003d76:	e0de      	b.n	8003f36 <HAL_TIM_ConfigClockSource+0x1da>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2202      	movs	r2, #2
 8003d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8003d96:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003da2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	68ba      	ldr	r2, [r7, #8]
 8003daa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a63      	ldr	r2, [pc, #396]	; (8003f40 <HAL_TIM_ConfigClockSource+0x1e4>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	f000 80a9 	beq.w	8003f0a <HAL_TIM_ConfigClockSource+0x1ae>
 8003db8:	4a61      	ldr	r2, [pc, #388]	; (8003f40 <HAL_TIM_ConfigClockSource+0x1e4>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	f200 80ae 	bhi.w	8003f1c <HAL_TIM_ConfigClockSource+0x1c0>
 8003dc0:	4a60      	ldr	r2, [pc, #384]	; (8003f44 <HAL_TIM_ConfigClockSource+0x1e8>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	f000 80a1 	beq.w	8003f0a <HAL_TIM_ConfigClockSource+0x1ae>
 8003dc8:	4a5e      	ldr	r2, [pc, #376]	; (8003f44 <HAL_TIM_ConfigClockSource+0x1e8>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	f200 80a6 	bhi.w	8003f1c <HAL_TIM_ConfigClockSource+0x1c0>
 8003dd0:	4a5d      	ldr	r2, [pc, #372]	; (8003f48 <HAL_TIM_ConfigClockSource+0x1ec>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	f000 8099 	beq.w	8003f0a <HAL_TIM_ConfigClockSource+0x1ae>
 8003dd8:	4a5b      	ldr	r2, [pc, #364]	; (8003f48 <HAL_TIM_ConfigClockSource+0x1ec>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	f200 809e 	bhi.w	8003f1c <HAL_TIM_ConfigClockSource+0x1c0>
 8003de0:	4a5a      	ldr	r2, [pc, #360]	; (8003f4c <HAL_TIM_ConfigClockSource+0x1f0>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	f000 8091 	beq.w	8003f0a <HAL_TIM_ConfigClockSource+0x1ae>
 8003de8:	4a58      	ldr	r2, [pc, #352]	; (8003f4c <HAL_TIM_ConfigClockSource+0x1f0>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	f200 8096 	bhi.w	8003f1c <HAL_TIM_ConfigClockSource+0x1c0>
 8003df0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003df4:	f000 8089 	beq.w	8003f0a <HAL_TIM_ConfigClockSource+0x1ae>
 8003df8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003dfc:	f200 808e 	bhi.w	8003f1c <HAL_TIM_ConfigClockSource+0x1c0>
 8003e00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e04:	d03e      	beq.n	8003e84 <HAL_TIM_ConfigClockSource+0x128>
 8003e06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e0a:	f200 8087 	bhi.w	8003f1c <HAL_TIM_ConfigClockSource+0x1c0>
 8003e0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e12:	f000 8086 	beq.w	8003f22 <HAL_TIM_ConfigClockSource+0x1c6>
 8003e16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e1a:	d87f      	bhi.n	8003f1c <HAL_TIM_ConfigClockSource+0x1c0>
 8003e1c:	2b70      	cmp	r3, #112	; 0x70
 8003e1e:	d01a      	beq.n	8003e56 <HAL_TIM_ConfigClockSource+0xfa>
 8003e20:	2b70      	cmp	r3, #112	; 0x70
 8003e22:	d87b      	bhi.n	8003f1c <HAL_TIM_ConfigClockSource+0x1c0>
 8003e24:	2b60      	cmp	r3, #96	; 0x60
 8003e26:	d050      	beq.n	8003eca <HAL_TIM_ConfigClockSource+0x16e>
 8003e28:	2b60      	cmp	r3, #96	; 0x60
 8003e2a:	d877      	bhi.n	8003f1c <HAL_TIM_ConfigClockSource+0x1c0>
 8003e2c:	2b50      	cmp	r3, #80	; 0x50
 8003e2e:	d03c      	beq.n	8003eaa <HAL_TIM_ConfigClockSource+0x14e>
 8003e30:	2b50      	cmp	r3, #80	; 0x50
 8003e32:	d873      	bhi.n	8003f1c <HAL_TIM_ConfigClockSource+0x1c0>
 8003e34:	2b40      	cmp	r3, #64	; 0x40
 8003e36:	d058      	beq.n	8003eea <HAL_TIM_ConfigClockSource+0x18e>
 8003e38:	2b40      	cmp	r3, #64	; 0x40
 8003e3a:	d86f      	bhi.n	8003f1c <HAL_TIM_ConfigClockSource+0x1c0>
 8003e3c:	2b30      	cmp	r3, #48	; 0x30
 8003e3e:	d064      	beq.n	8003f0a <HAL_TIM_ConfigClockSource+0x1ae>
 8003e40:	2b30      	cmp	r3, #48	; 0x30
 8003e42:	d86b      	bhi.n	8003f1c <HAL_TIM_ConfigClockSource+0x1c0>
 8003e44:	2b20      	cmp	r3, #32
 8003e46:	d060      	beq.n	8003f0a <HAL_TIM_ConfigClockSource+0x1ae>
 8003e48:	2b20      	cmp	r3, #32
 8003e4a:	d867      	bhi.n	8003f1c <HAL_TIM_ConfigClockSource+0x1c0>
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d05c      	beq.n	8003f0a <HAL_TIM_ConfigClockSource+0x1ae>
 8003e50:	2b10      	cmp	r3, #16
 8003e52:	d05a      	beq.n	8003f0a <HAL_TIM_ConfigClockSource+0x1ae>
 8003e54:	e062      	b.n	8003f1c <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6818      	ldr	r0, [r3, #0]
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	6899      	ldr	r1, [r3, #8]
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	685a      	ldr	r2, [r3, #4]
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	f000 f9a7 	bl	80041b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e78:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	68ba      	ldr	r2, [r7, #8]
 8003e80:	609a      	str	r2, [r3, #8]
      break;
 8003e82:	e04f      	b.n	8003f24 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6818      	ldr	r0, [r3, #0]
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	6899      	ldr	r1, [r3, #8]
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	685a      	ldr	r2, [r3, #4]
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	f000 f990 	bl	80041b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	689a      	ldr	r2, [r3, #8]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ea6:	609a      	str	r2, [r3, #8]
      break;
 8003ea8:	e03c      	b.n	8003f24 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6818      	ldr	r0, [r3, #0]
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	6859      	ldr	r1, [r3, #4]
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	f000 f902 	bl	80040c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	2150      	movs	r1, #80	; 0x50
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f000 f95b 	bl	800417e <TIM_ITRx_SetConfig>
      break;
 8003ec8:	e02c      	b.n	8003f24 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6818      	ldr	r0, [r3, #0]
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	6859      	ldr	r1, [r3, #4]
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	f000 f921 	bl	800411e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2160      	movs	r1, #96	; 0x60
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f000 f94b 	bl	800417e <TIM_ITRx_SetConfig>
      break;
 8003ee8:	e01c      	b.n	8003f24 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6818      	ldr	r0, [r3, #0]
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	6859      	ldr	r1, [r3, #4]
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	f000 f8e2 	bl	80040c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2140      	movs	r1, #64	; 0x40
 8003f02:	4618      	mov	r0, r3
 8003f04:	f000 f93b 	bl	800417e <TIM_ITRx_SetConfig>
      break;
 8003f08:	e00c      	b.n	8003f24 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4619      	mov	r1, r3
 8003f14:	4610      	mov	r0, r2
 8003f16:	f000 f932 	bl	800417e <TIM_ITRx_SetConfig>
      break;
 8003f1a:	e003      	b.n	8003f24 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	73fb      	strb	r3, [r7, #15]
      break;
 8003f20:	e000      	b.n	8003f24 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8003f22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3710      	adds	r7, #16
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	00100070 	.word	0x00100070
 8003f44:	00100040 	.word	0x00100040
 8003f48:	00100030 	.word	0x00100030
 8003f4c:	00100020 	.word	0x00100020

08003f50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f58:	bf00      	nop
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f6c:	bf00      	nop
 8003f6e:	370c      	adds	r7, #12
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr

08003f78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f80:	bf00      	nop
 8003f82:	370c      	adds	r7, #12
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f94:	bf00      	nop
 8003f96:	370c      	adds	r7, #12
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr

08003fa0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b085      	sub	sp, #20
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	4a3c      	ldr	r2, [pc, #240]	; (80040a4 <TIM_Base_SetConfig+0x104>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d00f      	beq.n	8003fd8 <TIM_Base_SetConfig+0x38>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fbe:	d00b      	beq.n	8003fd8 <TIM_Base_SetConfig+0x38>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	4a39      	ldr	r2, [pc, #228]	; (80040a8 <TIM_Base_SetConfig+0x108>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d007      	beq.n	8003fd8 <TIM_Base_SetConfig+0x38>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4a38      	ldr	r2, [pc, #224]	; (80040ac <TIM_Base_SetConfig+0x10c>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d003      	beq.n	8003fd8 <TIM_Base_SetConfig+0x38>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4a37      	ldr	r2, [pc, #220]	; (80040b0 <TIM_Base_SetConfig+0x110>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d108      	bne.n	8003fea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	68fa      	ldr	r2, [r7, #12]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a2d      	ldr	r2, [pc, #180]	; (80040a4 <TIM_Base_SetConfig+0x104>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d01b      	beq.n	800402a <TIM_Base_SetConfig+0x8a>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ff8:	d017      	beq.n	800402a <TIM_Base_SetConfig+0x8a>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4a2a      	ldr	r2, [pc, #168]	; (80040a8 <TIM_Base_SetConfig+0x108>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d013      	beq.n	800402a <TIM_Base_SetConfig+0x8a>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4a29      	ldr	r2, [pc, #164]	; (80040ac <TIM_Base_SetConfig+0x10c>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d00f      	beq.n	800402a <TIM_Base_SetConfig+0x8a>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a28      	ldr	r2, [pc, #160]	; (80040b0 <TIM_Base_SetConfig+0x110>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d00b      	beq.n	800402a <TIM_Base_SetConfig+0x8a>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a27      	ldr	r2, [pc, #156]	; (80040b4 <TIM_Base_SetConfig+0x114>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d007      	beq.n	800402a <TIM_Base_SetConfig+0x8a>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a26      	ldr	r2, [pc, #152]	; (80040b8 <TIM_Base_SetConfig+0x118>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d003      	beq.n	800402a <TIM_Base_SetConfig+0x8a>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a25      	ldr	r2, [pc, #148]	; (80040bc <TIM_Base_SetConfig+0x11c>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d108      	bne.n	800403c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004030:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	68fa      	ldr	r2, [r7, #12]
 8004038:	4313      	orrs	r3, r2
 800403a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	695b      	ldr	r3, [r3, #20]
 8004046:	4313      	orrs	r3, r2
 8004048:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	68fa      	ldr	r2, [r7, #12]
 800404e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	689a      	ldr	r2, [r3, #8]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	4a10      	ldr	r2, [pc, #64]	; (80040a4 <TIM_Base_SetConfig+0x104>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d00f      	beq.n	8004088 <TIM_Base_SetConfig+0xe8>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	4a11      	ldr	r2, [pc, #68]	; (80040b0 <TIM_Base_SetConfig+0x110>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d00b      	beq.n	8004088 <TIM_Base_SetConfig+0xe8>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	4a10      	ldr	r2, [pc, #64]	; (80040b4 <TIM_Base_SetConfig+0x114>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d007      	beq.n	8004088 <TIM_Base_SetConfig+0xe8>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4a0f      	ldr	r2, [pc, #60]	; (80040b8 <TIM_Base_SetConfig+0x118>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d003      	beq.n	8004088 <TIM_Base_SetConfig+0xe8>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	4a0e      	ldr	r2, [pc, #56]	; (80040bc <TIM_Base_SetConfig+0x11c>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d103      	bne.n	8004090 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	691a      	ldr	r2, [r3, #16]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	615a      	str	r2, [r3, #20]
}
 8004096:	bf00      	nop
 8004098:	3714      	adds	r7, #20
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop
 80040a4:	40012c00 	.word	0x40012c00
 80040a8:	40000400 	.word	0x40000400
 80040ac:	40000800 	.word	0x40000800
 80040b0:	40013400 	.word	0x40013400
 80040b4:	40014000 	.word	0x40014000
 80040b8:	40014400 	.word	0x40014400
 80040bc:	40014800 	.word	0x40014800

080040c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b087      	sub	sp, #28
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	60f8      	str	r0, [r7, #12]
 80040c8:	60b9      	str	r1, [r7, #8]
 80040ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	6a1b      	ldr	r3, [r3, #32]
 80040d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6a1b      	ldr	r3, [r3, #32]
 80040d6:	f023 0201 	bic.w	r2, r3, #1
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	699b      	ldr	r3, [r3, #24]
 80040e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	011b      	lsls	r3, r3, #4
 80040f0:	693a      	ldr	r2, [r7, #16]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	f023 030a 	bic.w	r3, r3, #10
 80040fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80040fe:	697a      	ldr	r2, [r7, #20]
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	4313      	orrs	r3, r2
 8004104:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	693a      	ldr	r2, [r7, #16]
 800410a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	697a      	ldr	r2, [r7, #20]
 8004110:	621a      	str	r2, [r3, #32]
}
 8004112:	bf00      	nop
 8004114:	371c      	adds	r7, #28
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr

0800411e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800411e:	b480      	push	{r7}
 8004120:	b087      	sub	sp, #28
 8004122:	af00      	add	r7, sp, #0
 8004124:	60f8      	str	r0, [r7, #12]
 8004126:	60b9      	str	r1, [r7, #8]
 8004128:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6a1b      	ldr	r3, [r3, #32]
 800412e:	f023 0210 	bic.w	r2, r3, #16
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	699b      	ldr	r3, [r3, #24]
 800413a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6a1b      	ldr	r3, [r3, #32]
 8004140:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004148:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	031b      	lsls	r3, r3, #12
 800414e:	697a      	ldr	r2, [r7, #20]
 8004150:	4313      	orrs	r3, r2
 8004152:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800415a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	011b      	lsls	r3, r3, #4
 8004160:	693a      	ldr	r2, [r7, #16]
 8004162:	4313      	orrs	r3, r2
 8004164:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	697a      	ldr	r2, [r7, #20]
 800416a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	693a      	ldr	r2, [r7, #16]
 8004170:	621a      	str	r2, [r3, #32]
}
 8004172:	bf00      	nop
 8004174:	371c      	adds	r7, #28
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr

0800417e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800417e:	b480      	push	{r7}
 8004180:	b085      	sub	sp, #20
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
 8004186:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004194:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004198:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800419a:	683a      	ldr	r2, [r7, #0]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	4313      	orrs	r3, r2
 80041a0:	f043 0307 	orr.w	r3, r3, #7
 80041a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	68fa      	ldr	r2, [r7, #12]
 80041aa:	609a      	str	r2, [r3, #8]
}
 80041ac:	bf00      	nop
 80041ae:	3714      	adds	r7, #20
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b087      	sub	sp, #28
 80041bc:	af00      	add	r7, sp, #0
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	607a      	str	r2, [r7, #4]
 80041c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	021a      	lsls	r2, r3, #8
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	431a      	orrs	r2, r3
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	4313      	orrs	r3, r2
 80041e0:	697a      	ldr	r2, [r7, #20]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	697a      	ldr	r2, [r7, #20]
 80041ea:	609a      	str	r2, [r3, #8]
}
 80041ec:	bf00      	nop
 80041ee:	371c      	adds	r7, #28
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr

080041f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b085      	sub	sp, #20
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004208:	2b01      	cmp	r3, #1
 800420a:	d101      	bne.n	8004210 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800420c:	2302      	movs	r3, #2
 800420e:	e065      	b.n	80042dc <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2201      	movs	r2, #1
 8004214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2202      	movs	r2, #2
 800421c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a2c      	ldr	r2, [pc, #176]	; (80042e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d004      	beq.n	8004244 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a2b      	ldr	r2, [pc, #172]	; (80042ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d108      	bne.n	8004256 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800424a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	68fa      	ldr	r2, [r7, #12]
 8004252:	4313      	orrs	r3, r2
 8004254:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800425c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004260:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	68fa      	ldr	r2, [r7, #12]
 8004268:	4313      	orrs	r3, r2
 800426a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	68fa      	ldr	r2, [r7, #12]
 8004272:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a1b      	ldr	r2, [pc, #108]	; (80042e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d018      	beq.n	80042b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004286:	d013      	beq.n	80042b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a18      	ldr	r2, [pc, #96]	; (80042f0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d00e      	beq.n	80042b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a17      	ldr	r2, [pc, #92]	; (80042f4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d009      	beq.n	80042b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a12      	ldr	r2, [pc, #72]	; (80042ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d004      	beq.n	80042b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a13      	ldr	r2, [pc, #76]	; (80042f8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d10c      	bne.n	80042ca <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042b6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	68ba      	ldr	r2, [r7, #8]
 80042be:	4313      	orrs	r3, r2
 80042c0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	68ba      	ldr	r2, [r7, #8]
 80042c8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2201      	movs	r2, #1
 80042ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042da:	2300      	movs	r3, #0
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3714      	adds	r7, #20
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr
 80042e8:	40012c00 	.word	0x40012c00
 80042ec:	40013400 	.word	0x40013400
 80042f0:	40000400 	.word	0x40000400
 80042f4:	40000800 	.word	0x40000800
 80042f8:	40014000 	.word	0x40014000

080042fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b083      	sub	sp, #12
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004304:	bf00      	nop
 8004306:	370c      	adds	r7, #12
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr

08004310 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004310:	b480      	push	{r7}
 8004312:	b083      	sub	sp, #12
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004318:	bf00      	nop
 800431a:	370c      	adds	r7, #12
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr

08004324 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004324:	b480      	push	{r7}
 8004326:	b083      	sub	sp, #12
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800432c:	bf00      	nop
 800432e:	370c      	adds	r7, #12
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr

08004338 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004340:	bf00      	nop
 8004342:	370c      	adds	r7, #12
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr

0800434c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800434c:	b480      	push	{r7}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004354:	bf00      	nop
 8004356:	370c      	adds	r7, #12
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr

08004360 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004360:	b480      	push	{r7}
 8004362:	b083      	sub	sp, #12
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004368:	bf00      	nop
 800436a:	370c      	adds	r7, #12
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr

08004374 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800437c:	bf00      	nop
 800437e:	370c      	adds	r7, #12
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr

08004388 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d101      	bne.n	800439a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e042      	b.n	8004420 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d106      	bne.n	80043b2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f7fd fa73 	bl	8001898 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2224      	movs	r2, #36	; 0x24
 80043b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f022 0201 	bic.w	r2, r2, #1
 80043c8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f000 f82c 	bl	8004428 <UART_SetConfig>
 80043d0:	4603      	mov	r3, r0
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d101      	bne.n	80043da <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e022      	b.n	8004420 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d002      	beq.n	80043e8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f000 faec 	bl	80049c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	685a      	ldr	r2, [r3, #4]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	689a      	ldr	r2, [r3, #8]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004406:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f042 0201 	orr.w	r2, r2, #1
 8004416:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f000 fb73 	bl	8004b04 <UART_CheckIdleState>
 800441e:	4603      	mov	r3, r0
}
 8004420:	4618      	mov	r0, r3
 8004422:	3708      	adds	r7, #8
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004428:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800442c:	b08c      	sub	sp, #48	; 0x30
 800442e:	af00      	add	r7, sp, #0
 8004430:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004432:	2300      	movs	r3, #0
 8004434:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	689a      	ldr	r2, [r3, #8]
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	691b      	ldr	r3, [r3, #16]
 8004440:	431a      	orrs	r2, r3
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	695b      	ldr	r3, [r3, #20]
 8004446:	431a      	orrs	r2, r3
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	69db      	ldr	r3, [r3, #28]
 800444c:	4313      	orrs	r3, r2
 800444e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	4bab      	ldr	r3, [pc, #684]	; (8004704 <UART_SetConfig+0x2dc>)
 8004458:	4013      	ands	r3, r2
 800445a:	697a      	ldr	r2, [r7, #20]
 800445c:	6812      	ldr	r2, [r2, #0]
 800445e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004460:	430b      	orrs	r3, r1
 8004462:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	68da      	ldr	r2, [r3, #12]
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	430a      	orrs	r2, r1
 8004478:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	699b      	ldr	r3, [r3, #24]
 800447e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4aa0      	ldr	r2, [pc, #640]	; (8004708 <UART_SetConfig+0x2e0>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d004      	beq.n	8004494 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	6a1b      	ldr	r3, [r3, #32]
 800448e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004490:	4313      	orrs	r3, r2
 8004492:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800449e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80044a2:	697a      	ldr	r2, [r7, #20]
 80044a4:	6812      	ldr	r2, [r2, #0]
 80044a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80044a8:	430b      	orrs	r3, r1
 80044aa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b2:	f023 010f 	bic.w	r1, r3, #15
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	430a      	orrs	r2, r1
 80044c0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a91      	ldr	r2, [pc, #580]	; (800470c <UART_SetConfig+0x2e4>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d125      	bne.n	8004518 <UART_SetConfig+0xf0>
 80044cc:	4b90      	ldr	r3, [pc, #576]	; (8004710 <UART_SetConfig+0x2e8>)
 80044ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044d2:	f003 0303 	and.w	r3, r3, #3
 80044d6:	2b03      	cmp	r3, #3
 80044d8:	d81a      	bhi.n	8004510 <UART_SetConfig+0xe8>
 80044da:	a201      	add	r2, pc, #4	; (adr r2, 80044e0 <UART_SetConfig+0xb8>)
 80044dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044e0:	080044f1 	.word	0x080044f1
 80044e4:	08004501 	.word	0x08004501
 80044e8:	080044f9 	.word	0x080044f9
 80044ec:	08004509 	.word	0x08004509
 80044f0:	2301      	movs	r3, #1
 80044f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044f6:	e0d6      	b.n	80046a6 <UART_SetConfig+0x27e>
 80044f8:	2302      	movs	r3, #2
 80044fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044fe:	e0d2      	b.n	80046a6 <UART_SetConfig+0x27e>
 8004500:	2304      	movs	r3, #4
 8004502:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004506:	e0ce      	b.n	80046a6 <UART_SetConfig+0x27e>
 8004508:	2308      	movs	r3, #8
 800450a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800450e:	e0ca      	b.n	80046a6 <UART_SetConfig+0x27e>
 8004510:	2310      	movs	r3, #16
 8004512:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004516:	e0c6      	b.n	80046a6 <UART_SetConfig+0x27e>
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a7d      	ldr	r2, [pc, #500]	; (8004714 <UART_SetConfig+0x2ec>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d138      	bne.n	8004594 <UART_SetConfig+0x16c>
 8004522:	4b7b      	ldr	r3, [pc, #492]	; (8004710 <UART_SetConfig+0x2e8>)
 8004524:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004528:	f003 030c 	and.w	r3, r3, #12
 800452c:	2b0c      	cmp	r3, #12
 800452e:	d82d      	bhi.n	800458c <UART_SetConfig+0x164>
 8004530:	a201      	add	r2, pc, #4	; (adr r2, 8004538 <UART_SetConfig+0x110>)
 8004532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004536:	bf00      	nop
 8004538:	0800456d 	.word	0x0800456d
 800453c:	0800458d 	.word	0x0800458d
 8004540:	0800458d 	.word	0x0800458d
 8004544:	0800458d 	.word	0x0800458d
 8004548:	0800457d 	.word	0x0800457d
 800454c:	0800458d 	.word	0x0800458d
 8004550:	0800458d 	.word	0x0800458d
 8004554:	0800458d 	.word	0x0800458d
 8004558:	08004575 	.word	0x08004575
 800455c:	0800458d 	.word	0x0800458d
 8004560:	0800458d 	.word	0x0800458d
 8004564:	0800458d 	.word	0x0800458d
 8004568:	08004585 	.word	0x08004585
 800456c:	2300      	movs	r3, #0
 800456e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004572:	e098      	b.n	80046a6 <UART_SetConfig+0x27e>
 8004574:	2302      	movs	r3, #2
 8004576:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800457a:	e094      	b.n	80046a6 <UART_SetConfig+0x27e>
 800457c:	2304      	movs	r3, #4
 800457e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004582:	e090      	b.n	80046a6 <UART_SetConfig+0x27e>
 8004584:	2308      	movs	r3, #8
 8004586:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800458a:	e08c      	b.n	80046a6 <UART_SetConfig+0x27e>
 800458c:	2310      	movs	r3, #16
 800458e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004592:	e088      	b.n	80046a6 <UART_SetConfig+0x27e>
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a5f      	ldr	r2, [pc, #380]	; (8004718 <UART_SetConfig+0x2f0>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d125      	bne.n	80045ea <UART_SetConfig+0x1c2>
 800459e:	4b5c      	ldr	r3, [pc, #368]	; (8004710 <UART_SetConfig+0x2e8>)
 80045a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045a4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80045a8:	2b30      	cmp	r3, #48	; 0x30
 80045aa:	d016      	beq.n	80045da <UART_SetConfig+0x1b2>
 80045ac:	2b30      	cmp	r3, #48	; 0x30
 80045ae:	d818      	bhi.n	80045e2 <UART_SetConfig+0x1ba>
 80045b0:	2b20      	cmp	r3, #32
 80045b2:	d00a      	beq.n	80045ca <UART_SetConfig+0x1a2>
 80045b4:	2b20      	cmp	r3, #32
 80045b6:	d814      	bhi.n	80045e2 <UART_SetConfig+0x1ba>
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d002      	beq.n	80045c2 <UART_SetConfig+0x19a>
 80045bc:	2b10      	cmp	r3, #16
 80045be:	d008      	beq.n	80045d2 <UART_SetConfig+0x1aa>
 80045c0:	e00f      	b.n	80045e2 <UART_SetConfig+0x1ba>
 80045c2:	2300      	movs	r3, #0
 80045c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045c8:	e06d      	b.n	80046a6 <UART_SetConfig+0x27e>
 80045ca:	2302      	movs	r3, #2
 80045cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045d0:	e069      	b.n	80046a6 <UART_SetConfig+0x27e>
 80045d2:	2304      	movs	r3, #4
 80045d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045d8:	e065      	b.n	80046a6 <UART_SetConfig+0x27e>
 80045da:	2308      	movs	r3, #8
 80045dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045e0:	e061      	b.n	80046a6 <UART_SetConfig+0x27e>
 80045e2:	2310      	movs	r3, #16
 80045e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045e8:	e05d      	b.n	80046a6 <UART_SetConfig+0x27e>
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a4b      	ldr	r2, [pc, #300]	; (800471c <UART_SetConfig+0x2f4>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d125      	bne.n	8004640 <UART_SetConfig+0x218>
 80045f4:	4b46      	ldr	r3, [pc, #280]	; (8004710 <UART_SetConfig+0x2e8>)
 80045f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045fa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80045fe:	2bc0      	cmp	r3, #192	; 0xc0
 8004600:	d016      	beq.n	8004630 <UART_SetConfig+0x208>
 8004602:	2bc0      	cmp	r3, #192	; 0xc0
 8004604:	d818      	bhi.n	8004638 <UART_SetConfig+0x210>
 8004606:	2b80      	cmp	r3, #128	; 0x80
 8004608:	d00a      	beq.n	8004620 <UART_SetConfig+0x1f8>
 800460a:	2b80      	cmp	r3, #128	; 0x80
 800460c:	d814      	bhi.n	8004638 <UART_SetConfig+0x210>
 800460e:	2b00      	cmp	r3, #0
 8004610:	d002      	beq.n	8004618 <UART_SetConfig+0x1f0>
 8004612:	2b40      	cmp	r3, #64	; 0x40
 8004614:	d008      	beq.n	8004628 <UART_SetConfig+0x200>
 8004616:	e00f      	b.n	8004638 <UART_SetConfig+0x210>
 8004618:	2300      	movs	r3, #0
 800461a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800461e:	e042      	b.n	80046a6 <UART_SetConfig+0x27e>
 8004620:	2302      	movs	r3, #2
 8004622:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004626:	e03e      	b.n	80046a6 <UART_SetConfig+0x27e>
 8004628:	2304      	movs	r3, #4
 800462a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800462e:	e03a      	b.n	80046a6 <UART_SetConfig+0x27e>
 8004630:	2308      	movs	r3, #8
 8004632:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004636:	e036      	b.n	80046a6 <UART_SetConfig+0x27e>
 8004638:	2310      	movs	r3, #16
 800463a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800463e:	e032      	b.n	80046a6 <UART_SetConfig+0x27e>
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a30      	ldr	r2, [pc, #192]	; (8004708 <UART_SetConfig+0x2e0>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d12a      	bne.n	80046a0 <UART_SetConfig+0x278>
 800464a:	4b31      	ldr	r3, [pc, #196]	; (8004710 <UART_SetConfig+0x2e8>)
 800464c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004650:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004654:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004658:	d01a      	beq.n	8004690 <UART_SetConfig+0x268>
 800465a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800465e:	d81b      	bhi.n	8004698 <UART_SetConfig+0x270>
 8004660:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004664:	d00c      	beq.n	8004680 <UART_SetConfig+0x258>
 8004666:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800466a:	d815      	bhi.n	8004698 <UART_SetConfig+0x270>
 800466c:	2b00      	cmp	r3, #0
 800466e:	d003      	beq.n	8004678 <UART_SetConfig+0x250>
 8004670:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004674:	d008      	beq.n	8004688 <UART_SetConfig+0x260>
 8004676:	e00f      	b.n	8004698 <UART_SetConfig+0x270>
 8004678:	2300      	movs	r3, #0
 800467a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800467e:	e012      	b.n	80046a6 <UART_SetConfig+0x27e>
 8004680:	2302      	movs	r3, #2
 8004682:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004686:	e00e      	b.n	80046a6 <UART_SetConfig+0x27e>
 8004688:	2304      	movs	r3, #4
 800468a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800468e:	e00a      	b.n	80046a6 <UART_SetConfig+0x27e>
 8004690:	2308      	movs	r3, #8
 8004692:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004696:	e006      	b.n	80046a6 <UART_SetConfig+0x27e>
 8004698:	2310      	movs	r3, #16
 800469a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800469e:	e002      	b.n	80046a6 <UART_SetConfig+0x27e>
 80046a0:	2310      	movs	r3, #16
 80046a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a17      	ldr	r2, [pc, #92]	; (8004708 <UART_SetConfig+0x2e0>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	f040 80a8 	bne.w	8004802 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80046b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80046b6:	2b08      	cmp	r3, #8
 80046b8:	d834      	bhi.n	8004724 <UART_SetConfig+0x2fc>
 80046ba:	a201      	add	r2, pc, #4	; (adr r2, 80046c0 <UART_SetConfig+0x298>)
 80046bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046c0:	080046e5 	.word	0x080046e5
 80046c4:	08004725 	.word	0x08004725
 80046c8:	080046ed 	.word	0x080046ed
 80046cc:	08004725 	.word	0x08004725
 80046d0:	080046f3 	.word	0x080046f3
 80046d4:	08004725 	.word	0x08004725
 80046d8:	08004725 	.word	0x08004725
 80046dc:	08004725 	.word	0x08004725
 80046e0:	080046fb 	.word	0x080046fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046e4:	f7fe fe96 	bl	8003414 <HAL_RCC_GetPCLK1Freq>
 80046e8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80046ea:	e021      	b.n	8004730 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046ec:	4b0c      	ldr	r3, [pc, #48]	; (8004720 <UART_SetConfig+0x2f8>)
 80046ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80046f0:	e01e      	b.n	8004730 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046f2:	f7fe fe21 	bl	8003338 <HAL_RCC_GetSysClockFreq>
 80046f6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80046f8:	e01a      	b.n	8004730 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046fe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004700:	e016      	b.n	8004730 <UART_SetConfig+0x308>
 8004702:	bf00      	nop
 8004704:	cfff69f3 	.word	0xcfff69f3
 8004708:	40008000 	.word	0x40008000
 800470c:	40013800 	.word	0x40013800
 8004710:	40021000 	.word	0x40021000
 8004714:	40004400 	.word	0x40004400
 8004718:	40004800 	.word	0x40004800
 800471c:	40004c00 	.word	0x40004c00
 8004720:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004724:	2300      	movs	r3, #0
 8004726:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800472e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004732:	2b00      	cmp	r3, #0
 8004734:	f000 812a 	beq.w	800498c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473c:	4a9e      	ldr	r2, [pc, #632]	; (80049b8 <UART_SetConfig+0x590>)
 800473e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004742:	461a      	mov	r2, r3
 8004744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004746:	fbb3 f3f2 	udiv	r3, r3, r2
 800474a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	685a      	ldr	r2, [r3, #4]
 8004750:	4613      	mov	r3, r2
 8004752:	005b      	lsls	r3, r3, #1
 8004754:	4413      	add	r3, r2
 8004756:	69ba      	ldr	r2, [r7, #24]
 8004758:	429a      	cmp	r2, r3
 800475a:	d305      	bcc.n	8004768 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004762:	69ba      	ldr	r2, [r7, #24]
 8004764:	429a      	cmp	r2, r3
 8004766:	d903      	bls.n	8004770 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800476e:	e10d      	b.n	800498c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004772:	2200      	movs	r2, #0
 8004774:	60bb      	str	r3, [r7, #8]
 8004776:	60fa      	str	r2, [r7, #12]
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477c:	4a8e      	ldr	r2, [pc, #568]	; (80049b8 <UART_SetConfig+0x590>)
 800477e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004782:	b29b      	uxth	r3, r3
 8004784:	2200      	movs	r2, #0
 8004786:	603b      	str	r3, [r7, #0]
 8004788:	607a      	str	r2, [r7, #4]
 800478a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800478e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004792:	f7fb fd41 	bl	8000218 <__aeabi_uldivmod>
 8004796:	4602      	mov	r2, r0
 8004798:	460b      	mov	r3, r1
 800479a:	4610      	mov	r0, r2
 800479c:	4619      	mov	r1, r3
 800479e:	f04f 0200 	mov.w	r2, #0
 80047a2:	f04f 0300 	mov.w	r3, #0
 80047a6:	020b      	lsls	r3, r1, #8
 80047a8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80047ac:	0202      	lsls	r2, r0, #8
 80047ae:	6979      	ldr	r1, [r7, #20]
 80047b0:	6849      	ldr	r1, [r1, #4]
 80047b2:	0849      	lsrs	r1, r1, #1
 80047b4:	2000      	movs	r0, #0
 80047b6:	460c      	mov	r4, r1
 80047b8:	4605      	mov	r5, r0
 80047ba:	eb12 0804 	adds.w	r8, r2, r4
 80047be:	eb43 0905 	adc.w	r9, r3, r5
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	469a      	mov	sl, r3
 80047ca:	4693      	mov	fp, r2
 80047cc:	4652      	mov	r2, sl
 80047ce:	465b      	mov	r3, fp
 80047d0:	4640      	mov	r0, r8
 80047d2:	4649      	mov	r1, r9
 80047d4:	f7fb fd20 	bl	8000218 <__aeabi_uldivmod>
 80047d8:	4602      	mov	r2, r0
 80047da:	460b      	mov	r3, r1
 80047dc:	4613      	mov	r3, r2
 80047de:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80047e0:	6a3b      	ldr	r3, [r7, #32]
 80047e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047e6:	d308      	bcc.n	80047fa <UART_SetConfig+0x3d2>
 80047e8:	6a3b      	ldr	r3, [r7, #32]
 80047ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047ee:	d204      	bcs.n	80047fa <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	6a3a      	ldr	r2, [r7, #32]
 80047f6:	60da      	str	r2, [r3, #12]
 80047f8:	e0c8      	b.n	800498c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004800:	e0c4      	b.n	800498c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	69db      	ldr	r3, [r3, #28]
 8004806:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800480a:	d167      	bne.n	80048dc <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800480c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004810:	2b08      	cmp	r3, #8
 8004812:	d828      	bhi.n	8004866 <UART_SetConfig+0x43e>
 8004814:	a201      	add	r2, pc, #4	; (adr r2, 800481c <UART_SetConfig+0x3f4>)
 8004816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800481a:	bf00      	nop
 800481c:	08004841 	.word	0x08004841
 8004820:	08004849 	.word	0x08004849
 8004824:	08004851 	.word	0x08004851
 8004828:	08004867 	.word	0x08004867
 800482c:	08004857 	.word	0x08004857
 8004830:	08004867 	.word	0x08004867
 8004834:	08004867 	.word	0x08004867
 8004838:	08004867 	.word	0x08004867
 800483c:	0800485f 	.word	0x0800485f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004840:	f7fe fde8 	bl	8003414 <HAL_RCC_GetPCLK1Freq>
 8004844:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004846:	e014      	b.n	8004872 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004848:	f7fe fdfa 	bl	8003440 <HAL_RCC_GetPCLK2Freq>
 800484c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800484e:	e010      	b.n	8004872 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004850:	4b5a      	ldr	r3, [pc, #360]	; (80049bc <UART_SetConfig+0x594>)
 8004852:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004854:	e00d      	b.n	8004872 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004856:	f7fe fd6f 	bl	8003338 <HAL_RCC_GetSysClockFreq>
 800485a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800485c:	e009      	b.n	8004872 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800485e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004862:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004864:	e005      	b.n	8004872 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8004866:	2300      	movs	r3, #0
 8004868:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004870:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004874:	2b00      	cmp	r3, #0
 8004876:	f000 8089 	beq.w	800498c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487e:	4a4e      	ldr	r2, [pc, #312]	; (80049b8 <UART_SetConfig+0x590>)
 8004880:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004884:	461a      	mov	r2, r3
 8004886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004888:	fbb3 f3f2 	udiv	r3, r3, r2
 800488c:	005a      	lsls	r2, r3, #1
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	085b      	lsrs	r3, r3, #1
 8004894:	441a      	add	r2, r3
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	fbb2 f3f3 	udiv	r3, r2, r3
 800489e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048a0:	6a3b      	ldr	r3, [r7, #32]
 80048a2:	2b0f      	cmp	r3, #15
 80048a4:	d916      	bls.n	80048d4 <UART_SetConfig+0x4ac>
 80048a6:	6a3b      	ldr	r3, [r7, #32]
 80048a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048ac:	d212      	bcs.n	80048d4 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80048ae:	6a3b      	ldr	r3, [r7, #32]
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	f023 030f 	bic.w	r3, r3, #15
 80048b6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80048b8:	6a3b      	ldr	r3, [r7, #32]
 80048ba:	085b      	lsrs	r3, r3, #1
 80048bc:	b29b      	uxth	r3, r3
 80048be:	f003 0307 	and.w	r3, r3, #7
 80048c2:	b29a      	uxth	r2, r3
 80048c4:	8bfb      	ldrh	r3, [r7, #30]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	8bfa      	ldrh	r2, [r7, #30]
 80048d0:	60da      	str	r2, [r3, #12]
 80048d2:	e05b      	b.n	800498c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80048da:	e057      	b.n	800498c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80048dc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80048e0:	2b08      	cmp	r3, #8
 80048e2:	d828      	bhi.n	8004936 <UART_SetConfig+0x50e>
 80048e4:	a201      	add	r2, pc, #4	; (adr r2, 80048ec <UART_SetConfig+0x4c4>)
 80048e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ea:	bf00      	nop
 80048ec:	08004911 	.word	0x08004911
 80048f0:	08004919 	.word	0x08004919
 80048f4:	08004921 	.word	0x08004921
 80048f8:	08004937 	.word	0x08004937
 80048fc:	08004927 	.word	0x08004927
 8004900:	08004937 	.word	0x08004937
 8004904:	08004937 	.word	0x08004937
 8004908:	08004937 	.word	0x08004937
 800490c:	0800492f 	.word	0x0800492f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004910:	f7fe fd80 	bl	8003414 <HAL_RCC_GetPCLK1Freq>
 8004914:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004916:	e014      	b.n	8004942 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004918:	f7fe fd92 	bl	8003440 <HAL_RCC_GetPCLK2Freq>
 800491c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800491e:	e010      	b.n	8004942 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004920:	4b26      	ldr	r3, [pc, #152]	; (80049bc <UART_SetConfig+0x594>)
 8004922:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004924:	e00d      	b.n	8004942 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004926:	f7fe fd07 	bl	8003338 <HAL_RCC_GetSysClockFreq>
 800492a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800492c:	e009      	b.n	8004942 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800492e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004932:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004934:	e005      	b.n	8004942 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8004936:	2300      	movs	r3, #0
 8004938:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004940:	bf00      	nop
    }

    if (pclk != 0U)
 8004942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004944:	2b00      	cmp	r3, #0
 8004946:	d021      	beq.n	800498c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494c:	4a1a      	ldr	r2, [pc, #104]	; (80049b8 <UART_SetConfig+0x590>)
 800494e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004952:	461a      	mov	r2, r3
 8004954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004956:	fbb3 f2f2 	udiv	r2, r3, r2
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	085b      	lsrs	r3, r3, #1
 8004960:	441a      	add	r2, r3
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	fbb2 f3f3 	udiv	r3, r2, r3
 800496a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800496c:	6a3b      	ldr	r3, [r7, #32]
 800496e:	2b0f      	cmp	r3, #15
 8004970:	d909      	bls.n	8004986 <UART_SetConfig+0x55e>
 8004972:	6a3b      	ldr	r3, [r7, #32]
 8004974:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004978:	d205      	bcs.n	8004986 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800497a:	6a3b      	ldr	r3, [r7, #32]
 800497c:	b29a      	uxth	r2, r3
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	60da      	str	r2, [r3, #12]
 8004984:	e002      	b.n	800498c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	2201      	movs	r2, #1
 8004990:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	2201      	movs	r2, #1
 8004998:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	2200      	movs	r2, #0
 80049a0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	2200      	movs	r2, #0
 80049a6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80049a8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3730      	adds	r7, #48	; 0x30
 80049b0:	46bd      	mov	sp, r7
 80049b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049b6:	bf00      	nop
 80049b8:	08004fd0 	.word	0x08004fd0
 80049bc:	00f42400 	.word	0x00f42400

080049c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b083      	sub	sp, #12
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049cc:	f003 0301 	and.w	r3, r3, #1
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d00a      	beq.n	80049ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	430a      	orrs	r2, r1
 80049e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ee:	f003 0302 	and.w	r3, r3, #2
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d00a      	beq.n	8004a0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	430a      	orrs	r2, r1
 8004a0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a10:	f003 0304 	and.w	r3, r3, #4
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d00a      	beq.n	8004a2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	430a      	orrs	r2, r1
 8004a2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a32:	f003 0308 	and.w	r3, r3, #8
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d00a      	beq.n	8004a50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	430a      	orrs	r2, r1
 8004a4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a54:	f003 0310 	and.w	r3, r3, #16
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d00a      	beq.n	8004a72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	430a      	orrs	r2, r1
 8004a70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a76:	f003 0320 	and.w	r3, r3, #32
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d00a      	beq.n	8004a94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	430a      	orrs	r2, r1
 8004a92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d01a      	beq.n	8004ad6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	430a      	orrs	r2, r1
 8004ab4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004abe:	d10a      	bne.n	8004ad6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	430a      	orrs	r2, r1
 8004ad4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d00a      	beq.n	8004af8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	430a      	orrs	r2, r1
 8004af6:	605a      	str	r2, [r3, #4]
  }
}
 8004af8:	bf00      	nop
 8004afa:	370c      	adds	r7, #12
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr

08004b04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b086      	sub	sp, #24
 8004b08:	af02      	add	r7, sp, #8
 8004b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b14:	f7fc fffe 	bl	8001b14 <HAL_GetTick>
 8004b18:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 0308 	and.w	r3, r3, #8
 8004b24:	2b08      	cmp	r3, #8
 8004b26:	d10e      	bne.n	8004b46 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b2c:	9300      	str	r3, [sp, #0]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2200      	movs	r2, #0
 8004b32:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 f82f 	bl	8004b9a <UART_WaitOnFlagUntilTimeout>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d001      	beq.n	8004b46 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b42:	2303      	movs	r3, #3
 8004b44:	e025      	b.n	8004b92 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0304 	and.w	r3, r3, #4
 8004b50:	2b04      	cmp	r3, #4
 8004b52:	d10e      	bne.n	8004b72 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b58:	9300      	str	r3, [sp, #0]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 f819 	bl	8004b9a <UART_WaitOnFlagUntilTimeout>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d001      	beq.n	8004b72 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b6e:	2303      	movs	r3, #3
 8004b70:	e00f      	b.n	8004b92 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2220      	movs	r2, #32
 8004b76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2220      	movs	r2, #32
 8004b7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004b90:	2300      	movs	r3, #0
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3710      	adds	r7, #16
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}

08004b9a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b9a:	b580      	push	{r7, lr}
 8004b9c:	b09c      	sub	sp, #112	; 0x70
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	60f8      	str	r0, [r7, #12]
 8004ba2:	60b9      	str	r1, [r7, #8]
 8004ba4:	603b      	str	r3, [r7, #0]
 8004ba6:	4613      	mov	r3, r2
 8004ba8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004baa:	e0a9      	b.n	8004d00 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004bae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bb2:	f000 80a5 	beq.w	8004d00 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bb6:	f7fc ffad 	bl	8001b14 <HAL_GetTick>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	1ad3      	subs	r3, r2, r3
 8004bc0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d302      	bcc.n	8004bcc <UART_WaitOnFlagUntilTimeout+0x32>
 8004bc6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d140      	bne.n	8004c4e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bd4:	e853 3f00 	ldrex	r3, [r3]
 8004bd8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004bda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bdc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004be0:	667b      	str	r3, [r7, #100]	; 0x64
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	461a      	mov	r2, r3
 8004be8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004bea:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004bec:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004bf0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004bf2:	e841 2300 	strex	r3, r2, [r1]
 8004bf6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004bf8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d1e6      	bne.n	8004bcc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	3308      	adds	r3, #8
 8004c04:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c08:	e853 3f00 	ldrex	r3, [r3]
 8004c0c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c10:	f023 0301 	bic.w	r3, r3, #1
 8004c14:	663b      	str	r3, [r7, #96]	; 0x60
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	3308      	adds	r3, #8
 8004c1c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004c1e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004c20:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c22:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004c24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c26:	e841 2300 	strex	r3, r2, [r1]
 8004c2a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004c2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d1e5      	bne.n	8004bfe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2220      	movs	r2, #32
 8004c36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2220      	movs	r2, #32
 8004c3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2200      	movs	r2, #0
 8004c46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	e069      	b.n	8004d22 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 0304 	and.w	r3, r3, #4
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d051      	beq.n	8004d00 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	69db      	ldr	r3, [r3, #28]
 8004c62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c6a:	d149      	bne.n	8004d00 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c74:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c7e:	e853 3f00 	ldrex	r3, [r3]
 8004c82:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c86:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004c8a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	461a      	mov	r2, r3
 8004c92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c94:	637b      	str	r3, [r7, #52]	; 0x34
 8004c96:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c98:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c9c:	e841 2300 	strex	r3, r2, [r1]
 8004ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d1e6      	bne.n	8004c76 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	3308      	adds	r3, #8
 8004cae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	e853 3f00 	ldrex	r3, [r3]
 8004cb6:	613b      	str	r3, [r7, #16]
   return(result);
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	f023 0301 	bic.w	r3, r3, #1
 8004cbe:	66bb      	str	r3, [r7, #104]	; 0x68
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	3308      	adds	r3, #8
 8004cc6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004cc8:	623a      	str	r2, [r7, #32]
 8004cca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ccc:	69f9      	ldr	r1, [r7, #28]
 8004cce:	6a3a      	ldr	r2, [r7, #32]
 8004cd0:	e841 2300 	strex	r3, r2, [r1]
 8004cd4:	61bb      	str	r3, [r7, #24]
   return(result);
 8004cd6:	69bb      	ldr	r3, [r7, #24]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d1e5      	bne.n	8004ca8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2220      	movs	r2, #32
 8004ce0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2220      	movs	r2, #32
 8004ce8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2220      	movs	r2, #32
 8004cf0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004cfc:	2303      	movs	r3, #3
 8004cfe:	e010      	b.n	8004d22 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	69da      	ldr	r2, [r3, #28]
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	4013      	ands	r3, r2
 8004d0a:	68ba      	ldr	r2, [r7, #8]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	bf0c      	ite	eq
 8004d10:	2301      	moveq	r3, #1
 8004d12:	2300      	movne	r3, #0
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	461a      	mov	r2, r3
 8004d18:	79fb      	ldrb	r3, [r7, #7]
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	f43f af46 	beq.w	8004bac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3770      	adds	r7, #112	; 0x70
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}

08004d2a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004d2a:	b480      	push	{r7}
 8004d2c:	b085      	sub	sp, #20
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d101      	bne.n	8004d40 <HAL_UARTEx_DisableFifoMode+0x16>
 8004d3c:	2302      	movs	r3, #2
 8004d3e:	e027      	b.n	8004d90 <HAL_UARTEx_DisableFifoMode+0x66>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2224      	movs	r2, #36	; 0x24
 8004d4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f022 0201 	bic.w	r2, r2, #1
 8004d66:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004d6e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	68fa      	ldr	r2, [r7, #12]
 8004d7c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2220      	movs	r2, #32
 8004d82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004d8e:	2300      	movs	r3, #0
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3714      	adds	r7, #20
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr

08004d9c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d101      	bne.n	8004db4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004db0:	2302      	movs	r3, #2
 8004db2:	e02d      	b.n	8004e10 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2201      	movs	r2, #1
 8004db8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2224      	movs	r2, #36	; 0x24
 8004dc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f022 0201 	bic.w	r2, r2, #1
 8004dda:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	683a      	ldr	r2, [r7, #0]
 8004dec:	430a      	orrs	r2, r1
 8004dee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f000 f84f 	bl	8004e94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	68fa      	ldr	r2, [r7, #12]
 8004dfc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2220      	movs	r2, #32
 8004e02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004e0e:	2300      	movs	r3, #0
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3710      	adds	r7, #16
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}

08004e18 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d101      	bne.n	8004e30 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004e2c:	2302      	movs	r3, #2
 8004e2e:	e02d      	b.n	8004e8c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2224      	movs	r2, #36	; 0x24
 8004e3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f022 0201 	bic.w	r2, r2, #1
 8004e56:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	683a      	ldr	r2, [r7, #0]
 8004e68:	430a      	orrs	r2, r1
 8004e6a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f000 f811 	bl	8004e94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	68fa      	ldr	r2, [r7, #12]
 8004e78:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2220      	movs	r2, #32
 8004e7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004e8a:	2300      	movs	r3, #0
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3710      	adds	r7, #16
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}

08004e94 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b085      	sub	sp, #20
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d108      	bne.n	8004eb6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004eb4:	e031      	b.n	8004f1a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004eb6:	2308      	movs	r3, #8
 8004eb8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004eba:	2308      	movs	r3, #8
 8004ebc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	0e5b      	lsrs	r3, r3, #25
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	f003 0307 	and.w	r3, r3, #7
 8004ecc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	0f5b      	lsrs	r3, r3, #29
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	f003 0307 	and.w	r3, r3, #7
 8004edc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004ede:	7bbb      	ldrb	r3, [r7, #14]
 8004ee0:	7b3a      	ldrb	r2, [r7, #12]
 8004ee2:	4911      	ldr	r1, [pc, #68]	; (8004f28 <UARTEx_SetNbDataToProcess+0x94>)
 8004ee4:	5c8a      	ldrb	r2, [r1, r2]
 8004ee6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004eea:	7b3a      	ldrb	r2, [r7, #12]
 8004eec:	490f      	ldr	r1, [pc, #60]	; (8004f2c <UARTEx_SetNbDataToProcess+0x98>)
 8004eee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004ef0:	fb93 f3f2 	sdiv	r3, r3, r2
 8004ef4:	b29a      	uxth	r2, r3
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004efc:	7bfb      	ldrb	r3, [r7, #15]
 8004efe:	7b7a      	ldrb	r2, [r7, #13]
 8004f00:	4909      	ldr	r1, [pc, #36]	; (8004f28 <UARTEx_SetNbDataToProcess+0x94>)
 8004f02:	5c8a      	ldrb	r2, [r1, r2]
 8004f04:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004f08:	7b7a      	ldrb	r2, [r7, #13]
 8004f0a:	4908      	ldr	r1, [pc, #32]	; (8004f2c <UARTEx_SetNbDataToProcess+0x98>)
 8004f0c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004f0e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004f12:	b29a      	uxth	r2, r3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004f1a:	bf00      	nop
 8004f1c:	3714      	adds	r7, #20
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr
 8004f26:	bf00      	nop
 8004f28:	08004fe8 	.word	0x08004fe8
 8004f2c:	08004ff0 	.word	0x08004ff0

08004f30 <__libc_init_array>:
 8004f30:	b570      	push	{r4, r5, r6, lr}
 8004f32:	4d0d      	ldr	r5, [pc, #52]	; (8004f68 <__libc_init_array+0x38>)
 8004f34:	4c0d      	ldr	r4, [pc, #52]	; (8004f6c <__libc_init_array+0x3c>)
 8004f36:	1b64      	subs	r4, r4, r5
 8004f38:	10a4      	asrs	r4, r4, #2
 8004f3a:	2600      	movs	r6, #0
 8004f3c:	42a6      	cmp	r6, r4
 8004f3e:	d109      	bne.n	8004f54 <__libc_init_array+0x24>
 8004f40:	4d0b      	ldr	r5, [pc, #44]	; (8004f70 <__libc_init_array+0x40>)
 8004f42:	4c0c      	ldr	r4, [pc, #48]	; (8004f74 <__libc_init_array+0x44>)
 8004f44:	f000 f820 	bl	8004f88 <_init>
 8004f48:	1b64      	subs	r4, r4, r5
 8004f4a:	10a4      	asrs	r4, r4, #2
 8004f4c:	2600      	movs	r6, #0
 8004f4e:	42a6      	cmp	r6, r4
 8004f50:	d105      	bne.n	8004f5e <__libc_init_array+0x2e>
 8004f52:	bd70      	pop	{r4, r5, r6, pc}
 8004f54:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f58:	4798      	blx	r3
 8004f5a:	3601      	adds	r6, #1
 8004f5c:	e7ee      	b.n	8004f3c <__libc_init_array+0xc>
 8004f5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f62:	4798      	blx	r3
 8004f64:	3601      	adds	r6, #1
 8004f66:	e7f2      	b.n	8004f4e <__libc_init_array+0x1e>
 8004f68:	08005000 	.word	0x08005000
 8004f6c:	08005000 	.word	0x08005000
 8004f70:	08005000 	.word	0x08005000
 8004f74:	08005004 	.word	0x08005004

08004f78 <memset>:
 8004f78:	4402      	add	r2, r0
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d100      	bne.n	8004f82 <memset+0xa>
 8004f80:	4770      	bx	lr
 8004f82:	f803 1b01 	strb.w	r1, [r3], #1
 8004f86:	e7f9      	b.n	8004f7c <memset+0x4>

08004f88 <_init>:
 8004f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f8a:	bf00      	nop
 8004f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f8e:	bc08      	pop	{r3}
 8004f90:	469e      	mov	lr, r3
 8004f92:	4770      	bx	lr

08004f94 <_fini>:
 8004f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f96:	bf00      	nop
 8004f98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f9a:	bc08      	pop	{r3}
 8004f9c:	469e      	mov	lr, r3
 8004f9e:	4770      	bx	lr
